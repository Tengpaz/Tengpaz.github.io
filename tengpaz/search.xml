<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023级算法C1上机赛</title>
    <url>/tengpaz/2024/09/14/2023%E7%BA%A7%E7%AE%97%E6%B3%95C1%E4%B8%8A%E6%9C%BA%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级软院学生第一次上机赛习题讲解"><a href="#2023级软院学生第一次上机赛习题讲解" class="headerlink" title="2023级软院学生第一次上机赛习题讲解"></a>2023级软院学生第一次上机赛习题讲解</h1><h2 id="补题情况"><a href="#补题情况" class="headerlink" title="补题情况"></a>补题情况</h2><p><img lazyload="" src="/images/loading.svg" data-src="/tengpaz/images/2024ALC1.png" alt="2024ALC1"></p>
<h2 id="C-最长的姓名"><a href="#C-最长的姓名" class="headerlink" title="C 最长的姓名"></a>C 最长的姓名</h2><hr>
<h3 id="原题如下"><a href="#原题如下" class="headerlink" title="原题如下"></a>原题如下</h3><p><img lazyload="" src="/images/loading.svg" data-src="/tengpaz/images/2024ALC1C.png" alt="2024ALC1C"></p>
<h3 id="你需要知道"><a href="#你需要知道" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>快排函数的使用/快排的实现</li>
<li>插入排序的实现</li>
<li>内存压缩</li>
<li>多关键字排序</li>
</ul>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>首先看清题目要求，<strong>本题内存限制为 4096 kb， 仅允许 C 语言提交</strong></p>
<p>本人上来要求不看<u>畅快</u>写了一篇cpp代码<u>，成功获得没有可提交语言的快乐.</u></p>
<p>大致浏览题目信息，可以不难知道，本题特地禁止使用了<code>C++</code>的<code>STL</code>，并且加上了内存的限制范围，所以一开始思路就要放在这几个方面：</p>
<ol>
<li>减少内存占用，所以必然不能存下所有字符串后进行统一排序处理，这样避免了用内存换取时间</li>
<li>既然禁用了<code>C++STL</code>，将计就计参考这个实现思路，实现<code>C++</code>的<code>set</code>容器实现逻辑，即对于已有的符合题目需求的答案字符串需要维护字符串长度顺序，这里时间宽泛数据量小，根据数据逐个获取处理的特征，选择插入排序进行维护，同时对于旧有的被顶替的答案，合理清除，这里选择只定义长度有限的字符串数组，排序后超出长度外的数据自然抛弃</li>
<li>题目要求按照原始输入顺序进行输出，于是还需要最后还原输入顺序，以及在之前的排序情况下，对于数组的维护既要维护长度次序，又要维护输入顺序这个次要关键字的顺序</li>
</ol>
<h3 id="插入排序-内存压缩"><a href="#插入排序-内存压缩" class="headerlink" title="插入排序&内存压缩"></a>插入排序&amp;内存压缩</h3><p>大致实现就像你手中已经有了一列牌，牌已经按照一定顺序（这里全部默认为由小到大排序），此时你拿了一张牌，需要插入已有牌堆，且不破坏牌堆顺序</p>
<p>不难想到可以依次从小到大比较新牌与牌堆中牌的大小，直到发现第一张比新牌大的牌，于是将新牌插入这张牌前面，实现插入排序。</p>
<p>当然也有可能找到末尾还没有更大的牌了，此时直接插入牌尾。</p>
<p>同理，这道题需要实现对于20个字符串的长度顺序的维持，由于考虑<strong>空间</strong>限制，我们自然不能够将所有字符串全部获取后来个快排干脆利落地解决，需要动态维护，时间要求不高，直接用简单的插入已经完全够了。</p>
<p>存在两种情况，在获取到20个字符串前，对于获得的字符串只需要无脑插入排序到答案字符串数组里。</p>
<p>在已经获取到了20个字符串后，此时需要做的不仅是插入，还有删除。</p>
<p>所以在找到插入位置后，需要对于找到的位置进行判断，如果是如上面案例中第二种情况，已经找到数组尾部，还没有发现比手中字符串长的字符串，这里需要直接舍弃。</p>
<p>其它情况只需要忽略最后一个字符串，将前面至插入位的字符串后移一位，自然末位淘汰。</p>
<p>实际代码中我添加了一个多余的数组格，也就是我保留了21个元素，这样用来处理舍弃情况，因为如果搜寻到了第21位，直接进行舍弃即可。</p>
<h3 id="多关键字"><a href="#多关键字" class="headerlink" title="多关键字"></a>多关键字</h3><p>由于最后题目要求按照输入顺序输出，所以还需要保留字符串的输入顺序信息，最后根据这个关键字再一次进行排序，由于只有29个元素，任意排序方式都能河里通过。这里使用快排函数。</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> Author: 王宇祯</span></span><br><span class="line"><span class="comment"> Result: AC	Submission_id: 6316128</span></span><br><span class="line"><span class="comment"> Created at: Wed Sep 11 2024 20:14:37 GMT+0800 (China Standard Time)</span></span><br><span class="line"><span class="comment"> Problem_id: 8189	Time: 29	Memory: 1540</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">string</span> {</span></span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">1001</span>];</span><br><span class="line">} string_;</span><br><span class="line"></span><br><span class="line">string_ strings[<span class="number">21</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> content = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp2</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* a, <span class="type">const</span> <span class="type">void</span>* b)</span> {</span><br><span class="line">    string_* aa = (string_*)a;</span><br><span class="line">    string_* bb = (string_*)b;</span><br><span class="line">    <span class="keyword">if</span> (aa-&gt;id &gt; bb-&gt;id) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (aa-&gt;id &lt; bb-&gt;id) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    string_ str;</span><br><span class="line">    <span class="keyword">while</span> (gets(str.str) != <span class="literal">NULL</span>) {</span><br><span class="line">        str.id = n;</span><br><span class="line">        str.len = <span class="built_in">strlen</span>(str.str);</span><br><span class="line">        <span class="keyword">if</span> (content == <span class="number">0</span>) {</span><br><span class="line">            strings[content++] = str;</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (content &lt;= <span class="number">19</span>) {</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; content; i++) {</span><br><span class="line">                <span class="keyword">if</span> (strings[i].len &lt; str.len) {</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = content; j &gt; i; j--) {</span><br><span class="line">                        strings[j] = strings[j - <span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                    strings[i] = str;</span><br><span class="line">                    content++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (i == content) {</span><br><span class="line">                strings[content++] = str;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; content; i++) {</span><br><span class="line">                <span class="keyword">if</span> (strings[i].len &lt; str.len) {</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = content; j &gt; i; j--) {</span><br><span class="line">                        strings[j] = strings[j - <span class="number">1</span>];</span><br><span class="line">                    }</span><br><span class="line">                    strings[i] = str;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        n++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    qsort(strings, <span class="number">20</span>, <span class="keyword">sizeof</span>(string_), cmp2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">        <span class="built_in">puts</span>(strings[i].str);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="I-莫卡与异或"><a href="#I-莫卡与异或" class="headerlink" title="I 莫卡与异或"></a>I 莫卡与异或</h2><p>本次上级赛最喜欢的一道题</p>
<h3 id="原题如下-1"><a href="#原题如下-1" class="headerlink" title="原题如下"></a>原题如下</h3><p><img lazyload="" src="/images/loading.svg" data-src="/tengpaz/images/2024ALC1I.png" alt="2024ALC1I"></p>
<h3 id="你需要知道-1"><a href="#你需要知道-1" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>位运算</li>
<li>一些与二进制有关的东西</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这道题还是挺有意思的，当然这是因为本人水平刚好够到，所以觉得挺有启发性</p>
<p>首先看题目要求，找到n个<strong>互不相同</strong>的数的序列，按位异或值为<strong>0</strong>，要求求所有序列中最大数的最小值</p>
<p>好，打住</p>
<p>求最值，即降低了本题难度，明确答案，给了方向性</p>
<p>由于n个数互不相同，在不考虑异或条件下，不难想到最合适的情况为0~n，最小值为n</p>
<p>但是这种情况肯定不能都会满足，而且题目中明确说<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.506ex" height="1.817ex" role="img" focusable="false" viewBox="0 -665 2433.6 803"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mn" transform="translate(1933.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>，而恰恰在3以内的数是解题的关键点</p>
<p>一眼肯定看不出来，先列举一些数字进行观察</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">0       0       0</span><br><span class="line">1       1       1</span><br><span class="line">10      2       01</span><br><span class="line">11      3       11</span><br><span class="line">100     4       001</span><br><span class="line">101     5       101</span><br><span class="line">110     6       011</span><br><span class="line">111     7       111</span><br><span class="line">1000    8       0001</span><br><span class="line">1001    9       1001</span><br><span class="line">1010    10      0101</span><br><span class="line">1011    11      1101</span><br><span class="line">1100    12      0011</span><br><span class="line">1101    13      1011</span><br><span class="line">1110    14      0111</span><br><span class="line">1111    15      1111</span><br><span class="line">10000   16      00001</span><br><span class="line">10001   17      10001</span><br><span class="line">二进制  十进制  按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>列举到这里，够用了，仔细观察，按照最小单元划分按位异或后值恒为0的连续数序列（先分析离散只会导致里结果更远）</p>
<p>发现最小划分方案为四个一组，可以如下两种情况划分（下面只画按位对齐二进制）</p>
<p>偏移量为0（这里偏移量指的是相距最优-最小值为n-情况的整体数列偏移量）</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">1101</span><br><span class="line">----</span><br><span class="line">0011</span><br><span class="line">1011</span><br><span class="line">0111</span><br><span class="line">1111</span><br><span class="line">----</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>偏移量为2</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">---</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">---</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">----</span><br><span class="line">0101</span><br><span class="line">1101</span><br><span class="line">0011</span><br><span class="line">1011</span><br><span class="line">----</span><br><span class="line">0111</span><br><span class="line">1111</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">-----</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>以上是不加损耗的偏移（不加损耗指的是全连续，无需考虑填补项凑条件）</p>
<p>光从上面两种情况分析，就已经能得到两种情况的答案了</p>
<ul>
<li>当<code>(n &amp; 3) == 0</code>时，也即n为4的倍数时，直接使用第一种偏移情况，为最优解</li>
<li>当<code>(n &amp; 3) == 1</code>时，也即n为4的倍数余1时，可以直接使用第二种偏移情况，余数即添加为了偏移去掉的最开始的<code>0</code>，因为0是所有数里面添加减少都无损的，为最优解</li>
</ul>
<p>那么另外两种情况能不能也参考这个思路走的，很自然bushi，于是顺理成章，来研究一下偏移量分别为<code>1</code>和<code>3</code>的情况</p>
<p>偏移量为<code>1</code></p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">-</span><br><span class="line">1</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">---</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">0001</span><br><span class="line">----</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">1101</span><br><span class="line">0011</span><br><span class="line">----</span><br><span class="line">1011</span><br><span class="line">0111</span><br><span class="line">1111</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>没有很多参考意义，因为每四个一组都存在按位异或后有二进制为不为0的情况</p>
<p>偏移量为<code>3</code></p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">(01)</span><br><span class="line">--</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">---</span><br><span class="line">111</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">----</span><br><span class="line">1101</span><br><span class="line">0011</span><br><span class="line">1011</span><br><span class="line">0111</span><br><span class="line">----</span><br><span class="line">1111</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>依旧没有进步，至此移位的探索已经分析完了，目前还有两种情况没有解决，先来看与<code>(n &amp; 3) == 1</code>相对称的<code>(n &amp; 3) == 3</code>，因为这两个余数刚好凑整4，可以知道，是在相同情况下的变式</p>
<p>当<code>(n &amp; 3) == 3</code>时，首先通过前面两种偏移可以处理整除4的部分的所有数字序列，相当于只需要处理剩下3个余数的位置了，因为要求获得最小值，所以尽量在小数上下功夫，对于整除四的部分，先将整体偏移四位，得到</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">(01)</span><br><span class="line">(11)</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">1101</span><br><span class="line">----</span><br><span class="line">0011</span><br><span class="line">1011</span><br><span class="line">0111</span><br><span class="line">1111</span><br><span class="line">----</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>现在只需要从最前面删掉的四个中找3个数使得满足这3个数按位异或为0即可，非常容易，只需要去掉0即可，可以不难发现这是唯一最优解法，所以此时得到结论</p>
<ul>
<li>当<code>(n &amp; 3) == 3</code>时，也即n为4的倍数余3时，可以使用第一种偏移情况，在次基础上加4个偏移量空出前4个数字可供调度，由于0对于按位异或毫无影响，前四个只需要去掉0即可得到最优序列。</li>
</ul>
<p>最难的是<code>(n &amp; 3) == 2</code>的情况，有上面的基础，还是老样子，扣掉4的整数倍，但是这一次我们需要保留6个数，因为<code>n=2</code>已经被题目贴心排除了(bushi)</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">(01)</span><br><span class="line">(11)</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">1101</span><br><span class="line">----</span><br><span class="line">0011</span><br><span class="line">1011</span><br><span class="line">0111</span><br><span class="line">1111</span><br><span class="line">----</span><br><span class="line">00001</span><br><span class="line">10001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>这样子，现在需要找到6个数，使得6个数之间按位异或值为0，不要被前面4个数诱惑，因为前面4个数还有比直接加上凑6更大的用处，为后面两个数打基础，补弱，这里先考虑比较简单的情况，当<code>n = 10</code>时</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">(01)</span><br><span class="line">(11)</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>列举到这里已经够用了，为了找最优解，先直接添加与最后的<code>011</code>和<code>111</code>相邻的两个数<code>0001</code>和<code>1001</code></p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">(01)</span><br><span class="line">(11)</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>此时发现第一位满足不了题意了，为了找到最优解，当然不会选择往后选更大的数，由于只是第一位出现异常，前面4个数可以派上用处了，直接看如下选择方案</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>这样就补齐第一个了，可是不是还少了两个嘛，这次继续前面的模式，往后面找一个数<code>0101</code></p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>好的，第二位也异常了，没事，调度前面的变成</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">1</span><br><span class="line">01</span><br><span class="line">(11)</span><br><span class="line">---</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">---</span><br><span class="line">0001</span><br><span class="line">1001</span><br><span class="line">0101</span><br><span class="line">...</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>完美配位，剩下一个数不用说找<code>0</code></p>
<p>可能你会想，这不就结束了嘛？答案就是<code>n + 2</code>打错特错，这样你会得到<code>0.4</code>分<code>WA</code>的好成绩，为什么跳过了更小的<code>6</code>先来讨论<code>10</code>的情况了呢？观察<code>n = 6</code>，沿用之前的方案，这次考虑偏移量为2</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">---</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">---</span><br><span class="line">011</span><br><span class="line">111</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>后面两个数第一位异常，去掉更大的数</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">---</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">101</span><br><span class="line">---</span><br><span class="line">011</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>发现了么，第三位，也就是高位出现问题了，但是高位不可能由前几个数补，所以这就是6和10不一样的地方，6涉及进位问题，于是必须去掉一个高位，且保证高位的1能够被前面的数补，得到</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">(0)</span><br><span class="line">(1)</span><br><span class="line">---</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">(101)</span><br><span class="line">---</span><br><span class="line">011</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>添加1和0</p>
<div class="code-container" data-rel="Txt"><figure class="iseeu highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">---</span><br><span class="line">01</span><br><span class="line">11</span><br><span class="line">001</span><br><span class="line">(101)</span><br><span class="line">---</span><br><span class="line">011</span><br><span class="line">按位对齐二进制</span><br></pre></td></tr></table></figure></div>

<p>完成，其它情况类似，不放心读者自行列举，另一类答案<code>n + 3</code></p>
<p>综合一下即可得到如下代码</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> Author: 王宇祯</span></span><br><span class="line"><span class="comment"> Result: AC	Submission_id: 6345044</span></span><br><span class="line"><span class="comment"> Created at: Sat Sep 14 2024 20:28:39 GMT+0800 (China Standard Time)</span></span><br><span class="line"><span class="comment"> Problem_id: 8192	Time: 86	Memory: 3492</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="type">int</span> mod = n &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">switch</span> (mod) {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cout &lt;&lt; n - <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (__builtin_popcount(n + <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">                    cout &lt;&lt; n + <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cout &lt;&lt; n + <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>__builtin_popcount(n + 2)</code> 返回<code>n + 2</code>二进制数中数位为<code>1</code>的个数</li>
</ul>
<h2 id="J-魔法糖果"><a href="#J-魔法糖果" class="headerlink" title="J 魔法糖果"></a>J 魔法糖果</h2><p>很好玩的一道题</p>
<h3 id="原题如下-2"><a href="#原题如下-2" class="headerlink" title="原题如下"></a>原题如下</h3><p><img lazyload="" src="/images/loading.svg" data-src="/tengpaz/images/2024ALC1J.png" alt="2024ALC1J"></p>
<h3 id="你需要知道-2"><a href="#你需要知道-2" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>位运算</li>
</ul>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>怎么想到用位运算呢？</p>
<p>一方面是，出题人很喜欢考位运算，不管是从前面类似好玩的I题来看，还是各种大佬的标程（J题标程没参考的前提下），发现这次上机赛有点青睐位运算。或者说是二进制？</p>
<p>再而</p>
<p>仔细观察题目的两种变换方式，发现都与幂2与差1有关，经典对于二进制高度相关的两个数</p>
<p>分析到现在，开始进入正题</p>
<ul>
<li><code>2 * x + 1</code>效果是在现有二进制位的基础上，在第0位的1前面添加一个二进制1</li>
<li><code>2 * x - 1</code>效果是在现有二进制位的基础上，在第0位的1前面添加一个二进制0</li>
</ul>
<blockquote>
<p>之所以说是<strong>在第0位的1前面</strong>是因为怕位数有歧义，另外也是强调运算的特点，不动第0位</p>
</blockquote>
<p>不难发现，第0二进制位永远为1，所以所有<code>(n &amp; 1) == 0</code>的情况都无法满足，输出<code>-1</code></p>
<p>下面讨论可以满足的情况，根据运算的特点，不难想到只需要将目标数字写成二进制位后，忽略第一位，按照从左到右依次进行相应运算即可，比如是<code>1</code>就对应<code>2 * x + 1</code>，是<code>0</code>就对应<code>2 * x - 1</code></p>
<p>别忘了每进行一次运算都要输出结果，最开头的1在确认存在满足方案后也要输出！</p>
<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> Author: 王宇祯</span></span><br><span class="line"><span class="comment"> Result: AC	Submission_id: 6345154</span></span><br><span class="line"><span class="comment"> Created at: Sat Sep 14 2024 20:39:36 GMT+0800 (China Standard Time)</span></span><br><span class="line"><span class="comment"> Problem_id: 8181	Time: 17	Memory: 3520</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 位运算</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &amp; <span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">1</span>; i--) {</span><br><span class="line">            <span class="keyword">if</span> (flag) {</span><br><span class="line">                <span class="keyword">if</span> ((n &gt;&gt; i) &amp; <span class="number">1</span>) { <span class="comment">// 第i + 1位为1</span></span><br><span class="line">                    now = now * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>, now);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    now = now * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>, now);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> ((n &gt;&gt; i) &amp; <span class="number">1</span>) { <span class="comment">// 第i + 1位为1</span></span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>, now);</span><br><span class="line">                    now = now * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">"%d "</span>, now);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法C4上机赛</title>
    <url>/tengpaz/2024/11/06/2023%E7%BA%A7%E7%AE%97%E6%B3%95C4%E4%B8%8A%E6%9C%BA%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级软院学生第四次上机赛习题讲解"><a href="#2023级软院学生第四次上机赛习题讲解" class="headerlink" title="2023级软院学生第四次上机赛习题讲解"></a>2023级软院学生第四次上机赛习题讲解</h1><h2 id="H-2024-TOPO"><a href="#H-2024-TOPO" class="headerlink" title="H 2024-TOPO!"></a>H 2024-TOPO!</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>其实拓扑排序是有两种比较经典的算法的，但是这道题很巧妙地（菜菜觉得）禁用了其中一种。</p>
<p>题目相比普通的拓扑排序存在一个额外的限制条件，<strong>P.S. 对于拓扑排序不唯一的情况，先输出序号大的点，再输出序号小的点。即输出字典序最大的拓扑排序。</strong></p>
<p>可能一开始会想，DFS是否也可以达到这个目的，只需要将得到的图按照点的序列升序排列然后遍历后反转序列即可</p>
<p>但是这只能处理在同一条连通路径上的点的次序，也就是不能跨连通路径选择最优点，举个例子的话就是</p>
<p>比如下面的图（图后期发现有点问题，把3换成4，4换成2，2换成3）</p>
<p><img lazyload="" src="/images/loading.svg" data-src="/tengpaz/images/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E5%AE%9E%E4%BE%8B.jpg" alt="拓扑排序实例"></p>
<p>如果按dfs首先遍历选择了顶点4，那么下一个必然只有2号顶点这一个选项，然而此时的更优解应改转而选择3和5的那条通路继续走，然后最后转回2，实现拓扑排序后字典序最大</p>
<p>所以这题适合用Kahn算法，利用其对于各顶点没有路径限制的特点，用优先队列/最大堆来维护序号最大的无入度顶点，实现拓扑排序并满足字典序最大</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级E2练习赛</title>
    <url>/tengpaz/2023/09/24/2023%E7%BA%A7E2%E7%BB%83%E4%B9%A0%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级本科新生第二次练习赛习题讲解"><a href="#2023级本科新生第二次练习赛习题讲解" class="headerlink" title="2023级本科新生第二次练习赛习题讲解"></a>2023级本科新生第二次练习赛习题讲解</h1><h2 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h2><ul>
<li>2023&#x2F;10&#x2F;15 sizeof()是操作符不是函数</li>
</ul>
<h2 id="A-坐标系变换"><a href="#A-坐标系变换" class="headerlink" title="A 坐标系变换"></a>A 坐标系变换</h2><hr>
<h3 id="原题如下"><a href="#原题如下" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023E2A.png"
                      alt="E2A"
                ></p>
<h3 id="你需要知道"><a href="#你需要知道" class="headerlink" title="你需要知道"></a>你需要知道</h3><p>本题会用到</p>
<ul>
<li>&lt;math.h&gt;头文件中的<code>cos</code>、<code>sin</code>两个函数  </li>
<li>数学里极坐标的基本知识</li>
<li>标准输出里如何保留小数位数输出浮点数</li>
</ul>
<h3 id="cos-函数-求余弦"><a href="#cos-函数-求余弦" class="headerlink" title="cos()函数-求余弦"></a>cos()函数-求余弦</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型： </p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">cos</span><span class="params">(<span class="type">double</span> x)</span>;</span><br></pre></td></tr></table></figure></div>

<p>这里<code>cos</code>前的<code>double</code>表示的是函数的返回值为<code>double</code>双精度实型<br>里面的<code>double x</code>表示这里函数的形式参数是double类型的实数<br>实际运用时，函数名前的<code>double</code>以及参数前的<code>double</code>都不用写，这里只是告诉你函数相关值的类型</p>
<h3 id="sin-函数-求正弦"><a href="#sin-函数-求正弦" class="headerlink" title="sin()函数-求正弦"></a>sin()函数-求正弦</h3><p>同理我们可以推到正弦函数是怎么使用的<br>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">sin</span><span class="params">(<span class="type">double</span> x)</span>;</span><br></pre></td></tr></table></figure></div>
<p>读者可以自行类比</p>
<h3 id="极坐标"><a href="#极坐标" class="headerlink" title="极坐标"></a>极坐标</h3><p>在极坐标中，我们用一个点到极点的距离ρ也即极径和过极点与该点的射线与极轴在逆时针方向所成的角度θ也即极角来描述一个点的位置，不难得到，极坐标转化为直角坐标后表示为(ρcosθ,ρsinθ).<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E6%9E%81%E5%9D%90%E6%A0%87.png"
                      alt="极坐标"
                ></p>
<h3 id="保留小数位数输出浮点数"><a href="#保留小数位数输出浮点数" class="headerlink" title="保留小数位数输出浮点数"></a>保留小数位数输出浮点数</h3><p>来看看如下的输出语句</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-6.2lf&quot;</span>, x);</span><br></pre></td></tr></table></figure></div>

<p>这个语句中  </p>
<ul>
<li><code>-</code>表示左对齐</li>
<li><code>6</code>表示输出占6个字符</li>
<li><code>2</code>表示保留两位小数<br>如果x&#x3D;3.14123，输出如下</li>
</ul>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>如果去掉<code>6</code>前面的负号<br>输出如下(下面的·表示空格)</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">··<span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>注意在使用时不要忘了两个数字中间的<code>.</code>，比如本题我们不需要调整输出的浮点数的对齐方式和占据的字符数，那么就可以把语句写成</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,x);</span><br></pre></td></tr></table></figure></div>

<p>这个就表示保留一位小数输出浮点数<code>x</code>啦</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> a, b;<span class="comment">//a表示极径，b表示极角</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf %.1lf&quot;</span>, a * <span class="built_in">cos</span>(b), a * <span class="built_in">sin</span>(b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-这里是BUAA-2"><a href="#B-这里是BUAA-2" class="headerlink" title="B 这里是BUAA 2"></a>B 这里是BUAA 2</h2><hr>
<h3 id="原题如下-1"><a href="#原题如下-1" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023E2B.png"
                      alt="E2B"
                ></p>
<h3 id="你需要知道-1"><a href="#你需要知道-1" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>在ASCII码表中，大写字母数值连续，比如<code>&#39;B&#39;</code>比<code>&#39;A&#39;</code>大1</li>
<li>读取多个字符</li>
</ul>
<h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>对于读取的每一个字符，我们可以做一次判断，当读取的字符在<code>&#39;B&#39;</code>和<code>&#39;Z&#39;</code>之间时才需要把字母往前调一位</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里不是最简单的版本，如果你喜欢数组和字符串的话<br>可以给你看看一个非常啰嗦的版本</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span><span class="comment">//引入字符串相关函数的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10001</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    gets(str);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i] &gt;= <span class="string">&#x27;B&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;Z&#x27;</span> ? str[i] - <span class="number">1</span> : str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>大佬直接跳，我这里稍作解释</p>
<h3 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen()函数"></a>strlen()函数</h3><p>头文件：<code>string.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>size_t</code>表示函数返回字符串的长度,为unsigned int类型<br><code>const char *str</code>是一个形式参数，类型是常量指针，<code>const</code>是<code>constant</code>的缩写，本意为不变的，不可改变的，表明该类指针指向的内存值不可改变<br><code>char *str</code>是一个指向字符串的指针，如果目前没学指针的话，暂时可以理解为<code>char str[]</code>，这里其实说明调用函数传参时传的是地址不是数值<br>这个函数的作用是返回字符串的长度，但需要注意的是，这个函数在取字符串长度时，读取到<code>&#39;\0&#39;</code>时就会停止，最后读取到的长度是第一个字符到第一个<code>&#39;\0&#39;</code>（不包括<code>&#39;\0&#39;</code>）之间的字符串长度  </p>
<p>这里举个例子</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出为<code>6</code><br>再来举几个例子  </p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//[a b c d e f \0]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p + <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></div>

<p>最后一个<code>printf</code>没有打印出来，因为指针p解码后是字符串中的一个字符，而<code>strlen</code>并不能对一个数据求长度  </p>
<p>这里尤其需要与另一个操作符区分一下</p>
<h3 id="sizeof-操作符"><a href="#sizeof-操作符" class="headerlink" title="sizeof()操作符"></a>sizeof()操作符</h3><p>对于同一个合理字符串来说，sizeof操作符返回的字符串长度会包含结尾的<code>&#39;\0&#39;</code>，而strlen不会包含，并且sizeof计算的是整个字符串占据的字节，并不会在<code>&#39;\0&#39;</code>处就此停下<br>来看一个例子  </p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(p))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure></div>

<h3 id="gets-函数"><a href="#gets-函数" class="headerlink" title="gets()函数"></a>gets()函数</h3><p>头文件：<code>stdio.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>char *</code>表明返回的是一个指向字符串的指针<br>里面的<code>char *str</code>说明传参时传入的是指向字符串str的地址<br><code>gets</code>函数与<code>scanf</code>函数一样都是输入函数，但是两者还是会有很多差别的  </p>
<ul>
<li><code>scanf</code>读取字符串是以空格作为结束标志的，这就决定了它无法读取完整的含有空格字符的字符串</li>
<li><code>gets</code>也是读取一行字符串，但是它是以回车键作为结束标记的，所以它能读取含有空格字符的字符串</li>
</ul>
<h2 id="C-GYCY的乘法口诀表"><a href="#C-GYCY的乘法口诀表" class="headerlink" title="C GYCY的乘法口诀表"></a>C GYCY的乘法口诀表</h2><hr>
<h3 id="原题如下-2"><a href="#原题如下-2" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2C.png"
                      alt="ACE2C"
                ></p>
<h3 id="你需要知道-2"><a href="#你需要知道-2" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li><code>for</code>循环遍历</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>很明显需要迭代两个<code>for</code>循环进行遍历，这里不多说，直接上代码</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d &quot;</span>, i, j, i * j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-小亮的圆周率"><a href="#D-小亮的圆周率" class="headerlink" title="D 小亮的圆周率"></a>D 小亮的圆周率</h2><hr>
<h3 id="原题如下-3"><a href="#原题如下-3" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2D.png"
                      alt="ACE2D"
                ></p>
<h3 id="你需要知道-3"><a href="#你需要知道-3" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>各类数据类型及数据表示范围</li>
<li>强制类型转换</li>
<li>如果你想，可以使用<code>fabs</code>函数求两个浮点数之差的绝对值</li>
<li>如果你想练习函数，可以故意把代码搞麻烦点弄两个计算不同公式不同项数值的函数</li>
<li>多个数据输入</li>
<li>保留特定小数位数输出</li>
<li>如果你想，可以使用<code>pow()</code>函数计算次方</li>
</ul>
<h3 id="fabs-函数"><a href="#fabs-函数" class="headerlink" title="fabs()函数"></a><code>fabs()</code>函数</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">fabs</span><span class="params">(<span class="type">double</span> x)</span></span><br></pre></td></tr></table></figure></div>

<p>这个函数可以用来返回<strong>浮点数</strong>x的绝对值，这样我们在做这道题时可以不用比较两个公式计算值的大小关系了<br>不过使用这个函数时要注意，我们看这个函数声明可以发现，传参是有要求的，<code>fabs</code>函数可以用于<code>double</code>、<code>float</code>、<code>long double</code>类型的参数如果你用它来求整数绝对值，最后求得的结果将带上小数<br>如果你以后需要计算某个整数的绝对值，可以选择使用<code>abs()</code>函数，这里就不详细展开了</p>
<h3 id="pow-函数"><a href="#pow-函数" class="headerlink" title="pow()函数"></a><code>pow()</code>函数</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br></pre></td></tr></table></figure></div>

<p>同样我们看函数声明可以发现，该函数返回值为<code>double</code>类型，传递的参数类型为<code>double</code>类型，计算出的结果是x的y次幂</p>
<h3 id="数据类型及表示范围"><a href="#数据类型及表示范围" class="headerlink" title="数据类型及表示范围"></a>数据类型及表示范围</h3><p>我们仔细观察可以发现，n的取值可以非常大，加上公式中出现的(2n+1)^2^数值将会达到4x10^10^，int能容纳得下吗？我们需要使用long long啦</p>
<ul>
<li>int类型数据所占内存大小为4字节32位，其中一位为符号位，计算机是以二进制储存数据的，我们通过计算可以知道int最大允许的取值为2^31^-1，好的，不够用了</li>
<li>long long类型数据所占内存大小为8字节64位，这就完全够用了</li>
</ul>
<h3 id="保留小数位数"><a href="#保留小数位数" class="headerlink" title="保留小数位数"></a>保留小数位数</h3><p>详见A</p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>你所需要的最终数据的类型可能与你最初给的数据的类型不同，这时候便需要转换数据的类型了，格式如下<br>(&lt;数据类型&gt;)x<br>这表示把x的数据类型强制转换为括号内的数据类型</p>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里给出的只是正确代码，不是最佳代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">x</span><span class="params">(<span class="type">int</span> j)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>,<span class="built_in">fabs</span>(x(n)-y(n)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">x</span><span class="params">(<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">        sum+=<span class="built_in">pow</span>(<span class="number">-1</span>,j - <span class="number">1</span>)/(<span class="number">2</span> * j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">        sum+=(<span class="type">double</span>)<span class="number">1</span>/((<span class="type">long</span> <span class="type">long</span>)(<span class="number">2</span> * j - <span class="number">1</span>)*(<span class="number">2</span> * j - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">8</span> * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-体能锻炼走廊"><a href="#E-体能锻炼走廊" class="headerlink" title="E 体能锻炼走廊"></a>E 体能锻炼走廊</h2><hr>
<h3 id="原题如下-4"><a href="#原题如下-4" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2E.png"
                      alt="ACE2E"
                ></p>
<h3 id="你需要知道-4"><a href="#你需要知道-4" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>多组多个数据输入</li>
<li>对前次循环进行数值清除</li>
</ul>
<h3 id="多次循环"><a href="#多次循环" class="headerlink" title="多次循环"></a>多次循环</h3><p>当你的同一个变量在多次循环中出现并作为一种判断条件，你就要注意了，如果你清楚地知道你需要用该变量做什么，你就要关注这个变量是否会带着上一轮的数据进入下一轮并作为条件进行判断了，因为这很容易导致逻辑错误而导致结果不如人意，并且这种错误很难被人察觉</p>
<h3 id="分析思路-1"><a href="#分析思路-1" class="headerlink" title="分析思路"></a>分析思路</h3><p>其实思路挺简单，主要就是对条件语句的运用了</p>
<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里是正确代码，不是最佳代码，不是最简代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, below = <span class="number">0</span>, up = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">            <span class="keyword">if</span>(m &gt;= <span class="number">48</span>)&#123;</span><br><span class="line">                up = m<span class="number">-48</span>;</span><br><span class="line">                <span class="keyword">if</span>(below &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    below += up;</span><br><span class="line">                    <span class="keyword">if</span>(below &gt; <span class="number">0</span>)</span><br><span class="line">                        below = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                below += m - <span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(below == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Success\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(below &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failure %d\n&quot;</span>,-below);</span><br><span class="line">        below = <span class="number">0</span>;<span class="comment">//清除前一轮的数据</span></span><br><span class="line">        up = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="F-Wings-咖啡"><a href="#F-Wings-咖啡" class="headerlink" title="F Wings 咖啡"></a>F Wings 咖啡</h2><hr>
<h3 id="原题如下-5"><a href="#原题如下-5" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2F.png"
                      alt="ACE2F"
                ></p>
<h3 id="你需要知道-5"><a href="#你需要知道-5" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>对于多种极端情况的考虑要求周全</li>
<li>数据范围</li>
<li>如何防止爆栈</li>
<li>全局变量</li>
<li>对数据最大值的求取</li>
</ul>
<h3 id="情况极端"><a href="#情况极端" class="headerlink" title="情况极端"></a>情况极端</h3><ul>
<li>虽然说你可能凭直觉觉得6元肯定是划算的价格，不然就不会把每天用校园卡买的第一杯咖啡定为6元了，但是！！！这是编程题目不是实际情况，咖啡价格确实很有可能小于6元（bushi</li>
<li>虽然说去找卡的那个人大概明白需要多少张卡，但是这也避免不了找到的卡的数量比需要的卡的数量要更多</li>
<li>本人的卡和人头数你算上了吗？</li>
<li>你有注意数据有多大吗？</li>
<li>你有注意需要的数组的长度吗？</li>
</ul>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>之前强调过就不再强调了</p>
<h3 id="爆栈"><a href="#爆栈" class="headerlink" title="爆栈"></a>爆栈</h3><p>c语言的函数调用机制是依靠堆栈来实现的，称为函数调用栈（栈空间），程序中函数的局部变量存放在栈空间中，但是，每一个函数的栈空间有限，Windows系统下通常是2MB，所以，局部数组不能开得太大了！！！<br>像这道题，如果你把一个长度为3000001的int型数组作为局部数组扔那个小小的<code>main</code>函数栈空间里（辛苦你了），后果长啥样应该能知道了叭，这就是爆栈，在Debug中应该是被软件识别为<code>segmantation fault</code>（储存器区块错误），你的程序就运行不了啦  </p>
<p>解决这个问题其实也很简单<br>你放函数里面会爆，我扔函数外面就没事了嘛<br>这就是我们接下来要讲的-全局变量</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>我们之前提到了，函数里边定义的变量其实是局部变量，为什么叫局部呢，因为这个变量的生命周期，是随着函数的调用与结束而开始和终结的，也就是说，你函数一用完，这变量就没了<br>而全局函数不同的是，它是定义在整个程序中而不是某个函数中的，也就是说，它的生命周期随这个程序的运行情况而定，只有当程序运行完后，变量才会“死亡”<br>并且，理论上讲，全局变量能使用的空间是无限的（当然得要小于你电脑的内存啦awww），所以你可以放心大胆得开你的超长数组。。。</p>
<h3 id="最大值的求取"><a href="#最大值的求取" class="headerlink" title="最大值的求取"></a>最大值的求取</h3><p>其实在c语言里有这个函数的文件的，但这个函数的头文件叫<code>algorithm</code>，如果你用的编译软件是VScode，这个软件可能找不到这个文件的位置，需要你进行配置，这里就不展开说明啦<br>所以就别躲了，上循环硬刚叭  </p>
<p>本题需要的不仅仅是最大值，而是最大的m+1个值，所以我们可以在每循环一次求得了最大值后，选择把最大值处理掉，使上一个最大值不再影响第二次最大值的求取</p>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>这不是最优的，但是是正确的</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3000001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,max,num;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;<span class="comment">//sum的数值后期非常大</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    num = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= <span class="number">6</span>)&#123;<span class="comment">//算出咖啡价格大于6的人头数</span></span><br><span class="line">            n--;</span><br><span class="line">            sum += a[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;<span class="comment">//把数值清零，后面就不会重复加和了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m &gt;= n)&#123;</span><br><span class="line">        sum += <span class="number">6</span> * (n+<span class="number">1</span>);<span class="comment">//卡足够，全部置为6</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m + <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>||a[max] &lt; a[i])&#123;<span class="comment">//取最大值</span></span><br><span class="line">                    max = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[max] = <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="G-某咸鱼与投资"><a href="#G-某咸鱼与投资" class="headerlink" title="G 某咸鱼与投资"></a>G 某咸鱼与投资</h2><hr>
<h3 id="原题如下-6"><a href="#原题如下-6" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2G.png"
                      alt="ACE2G"
                ></p>
<h3 id="你需要知道-6"><a href="#你需要知道-6" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>输出数字的前导零</li>
<li>字符串相等的判断-<code>strcmp()</code>函数</li>
<li>你知道闰年的规则嘛</li>
</ul>
<h3 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a><code>strcmp()</code>函数</h3><p>头文件：<code>string.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span>;</span><br></pre></td></tr></table></figure></div>

<p>从声明中我们可以知道，这个函数返回一个int型整数值，传参为两个指向字符串的常量指针  </p>
<p>返回值的规则如下  </p>
<ul>
<li>如果<code>str1 &gt; str2</code>，返回正数</li>
<li>如果<code>str1 = str2</code>，返回0</li>
<li>如果<code>str1 &lt; str2</code>，返回负数</li>
</ul>
<p>其中，两个字符串比较时从第一个字符开始比较，如果相同则比较下一个  </p>
<ul>
<li>遇到不同的字符，排在字母表前面的字符小于排在后面的（可以认为是比较字符的ASCII码）</li>
<li>如果两个字符串所有字符都相同，则二者相等</li>
<li>如果一个字符串提前结束，那么一定是长的那个字符串大于短的那个字符串</li>
</ul>
<h3 id="输出前导零"><a href="#输出前导零" class="headerlink" title="输出前导零"></a>输出前导零</h3><p>比如<code>%0md</code>，表示以整型输出时在数字前补充前导零，使其总位数为m位，m也即<strong>位宽</strong></p>
<h3 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h3><p>对于闰年来说，它能整除4且不能被100整除，或者它能整除400，则这个年为闰年</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实主要就是需要判断2月的天数，大月小月判断，以及延期是早于时间点还是晚于时间点，这些用普通条件语句可以解决啦<br>看代码实现叭</p>
<h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><p>这是正确的，不是最好的</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">runnian</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//判断是否为闰年的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ifdelay</span><span class="params">(<span class="type">char</span>*, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span>;<span class="comment">//判断延期类型的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">monthdays</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//判断月的天数的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">after</span><span class="params">(<span class="type">char</span>*)</span>;<span class="comment">//日期后移的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">()</span>;<span class="comment">//输出函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;<span class="comment">//闰年情况，全局变量</span></span><br><span class="line"><span class="type">char</span> mon[] = <span class="string">&quot;Mon&quot;</span>, tue[] = <span class="string">&quot;Tue&quot;</span>, wed[] = <span class="string">&quot;Wed&quot;</span>, thu[] = <span class="string">&quot;Thu&quot;</span>, fri[] = <span class="string">&quot;Fri&quot;</span>, sat[] = <span class="string">&quot;Sat&quot;</span>, sun[] = <span class="string">&quot;Sun&quot;</span>;</span><br><span class="line"><span class="type">int</span> year, month, day, hour, minute, second;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> litter;<span class="comment">//吞掉空格，或者你也可以在输入代码后面做改动</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d/%d %d:%d:%d&quot;</span>, &amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;litter);<span class="comment">//清除空格</span></span><br><span class="line">    <span class="type">char</span> date[<span class="number">4</span>];<span class="comment">//日期，注意把字符串结束符括进去</span></span><br><span class="line">    gets(date);</span><br><span class="line">    <span class="comment">//判断闰年</span></span><br><span class="line">    runnian(year);</span><br><span class="line">    <span class="comment">//延期情况分类</span></span><br><span class="line">    <span class="keyword">if</span>(ifdelay(date, hour, minute, second))&#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ifdelay(date, hour, minute, second) == <span class="number">0</span>)&#123;<span class="comment">//延期</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, sat) == <span class="number">0</span>)&#123;<span class="comment">//周六</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">2</span>)&#123;</span><br><span class="line">                day += <span class="number">2</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = day + <span class="number">2</span> - monthdays(month);</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = day + <span class="number">2</span> - monthdays(month);</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, sun) == <span class="number">0</span>)&#123;<span class="comment">//周日</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">1</span>)&#123;</span><br><span class="line">                day++;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, fri) != <span class="number">0</span>)&#123;<span class="comment">//周一到周四</span></span><br><span class="line">            after(date);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">1</span>)&#123;</span><br><span class="line">                day++;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//周五</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">3</span>)&#123;</span><br><span class="line">                day += <span class="number">3</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = day + <span class="number">3</span> - monthdays(month);</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = day + <span class="number">3</span> - monthdays(month);</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//前类延期</span></span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闰年函数定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">runnian</span><span class="params">(<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延期判断</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ifdelay</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,sat) == <span class="number">0</span> || <span class="built_in">strcmp</span>(str,sun) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//后移</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((h &gt;= <span class="number">9</span> &amp;&amp; h &lt;= <span class="number">14</span>) || (h == <span class="number">15</span> &amp;&amp; m == <span class="number">0</span> &amp;&amp; s == <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//不延期</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h &lt; <span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//前类</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//后类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//月天数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">monthdays</span><span class="params">(<span class="type">int</span> m)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span> || m == <span class="number">3</span> || m == <span class="number">5</span> || m == <span class="number">7</span> || m == <span class="number">8</span> || m == <span class="number">10</span> || m == <span class="number">12</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//日期后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">after</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,mon) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,tue);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,tue) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,wed);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,wed) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,thu);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,fri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d/%02d/%02d&quot;</span>, year, month, day);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="H-摩卡背单词"><a href="#H-摩卡背单词" class="headerlink" title="H 摩卡背单词"></a>H 摩卡背单词</h2><hr>
<h3 id="原题如下-7"><a href="#原题如下-7" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2H.png"
                      alt="ACE2H"
                ></p>
<h3 id="你需要知道-7"><a href="#你需要知道-7" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>对于重复字符的判断转化为数字确实会容易很多，因为数字是计算机可以直接识别的整体，而字符串计算机无法直接判断是否相同</li>
<li>输入的东西在计算机里的储存方式</li>
<li>如何清除掉换行符</li>
</ul>
<h3 id="字符转化为数字"><a href="#字符转化为数字" class="headerlink" title="字符转化为数字"></a>字符转化为数字</h3><p>如何把字符串翻译成数字呢？</p>
<p>用<strong>ASCII码</strong></p>
<p>为了不保证字符位置的改变造成的数字重复，同时也保证数字不要过于大，我们可以把不同位置的字符减去一个合理的相同的数字后分别乘以一个不同的数来转化为数字</p>
<p>比如说moca</p>
<p>可以把每个字符先减97</p>
<p>第一个字符乘1000000</p>
<p>第二个字符乘10000</p>
<p>第三个字符乘100</p>
<p>最后一个不乘</p>
<p>结果加和就是我们翻译出来的数字啦嘿</p>
<h3 id="输入的东西在计算机里是如何储存的"><a href="#输入的东西在计算机里是如何储存的" class="headerlink" title="输入的东西在计算机里是如何储存的"></a>输入的东西在计算机里是如何储存的</h3><p>比如我们按照题目示例那样，在第一行输入一个6后按回车键，那么这一输入在计算机里储存实际上大概长这样</p>
<p><code>[6|\n]</code></p>
<p>此时如果你没有处理掉<strong>回车键</strong></p>
<p>你就可能在后面读取字符时把回车键一起读取进去，导致答案错误</p>
<h3 id="处理掉回车键换行符"><a href="#处理掉回车键换行符" class="headerlink" title="处理掉回车键换行符"></a>处理掉回车键换行符</h3><p>我们可以使用<code>getchar()</code>函数，因为这个函数读取字符只读取一个，也就是说，它只会读取到<code>\n</code>，从而可以很好地解决到行尾换行符回车键的问题</p>
<h3 id="getchar-函数"><a href="#getchar-函数" class="headerlink" title="getchar()函数"></a><code>getchar()</code>函数</h3><p>头文件：<code>stdio.h</code><br>语法&#x2F;原型：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>我们来看这个函数的声明，不难发现，<code>getchar</code>返回值是字符的<code>ASCII</code>码</p>
<p><code>getchar</code>用于读取单个字符，如果此时<strong>缓存区</strong>（如果不清楚就暂且把它理解为暂时储存你输入的东西的地方）中有多个字符，那么<code>getchar</code>读取的就是上一次读取的最后一个字符的后一个字符</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>既然我们已经可以把字符串转化为数字了，那我们就可以用数组来判断是否重复的问题</p>
<p>比如如果39出现过了，我们就可以把数组的第39个元素设为1，其他位置的数据在刚开始时全部设为0，这样再次遇见39时，我们只要判断该数组的第39个元素是否为1即可</p>
<h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><p>这不是最优代码，但是是正确代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[<span class="number">26262627</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line">    <span class="type">char</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        getchar();<span class="comment">//清除换行符</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        m = (a - <span class="number">97</span>) * <span class="number">1000000</span> + (b - <span class="number">97</span>) * <span class="number">10000</span> + (c - <span class="number">97</span>) * <span class="number">100</span> + d;<span class="comment">//翻译为数字</span></span><br><span class="line">        <span class="keyword">if</span> (x[m] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca has already memorized this word!\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x[m] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca memorized a new word!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最小内存版本</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">readBit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> bit,<span class="type">char</span> *<span class="built_in">array</span>)</span>&#123;<span class="comment">//读取字节</span></span><br><span class="line">    <span class="type">int</span> shift = <span class="number">7</span> - (bit % <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="built_in">array</span>[bit / <span class="number">8</span> ]&gt;&gt;shift)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeBit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> bit,<span class="type">int</span> value,<span class="type">char</span>*<span class="built_in">array</span>)</span>&#123;<span class="comment">//压缩字节</span></span><br><span class="line">    <span class="keyword">if</span>(readBit(bit,<span class="built_in">array</span>)==value)&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">array</span>[bit/<span class="number">8</span>] ^= (<span class="number">128</span>&gt;&gt; (bit % <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样可以做到把一个数字压缩为一个bit储存于数组内存的不同位中，达到减小内存的目的</span></span><br><span class="line"><span class="type">char</span> wordBank[<span class="number">57122</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,position;</span><br><span class="line">    <span class="type">char</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        position = (a - <span class="string">&#x27;a&#x27;</span>)*<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span> + (b - <span class="string">&#x27;a&#x27;</span>) *<span class="number">26</span>*<span class="number">26</span>  + (c - <span class="string">&#x27;a&#x27;</span>) * <span class="number">26</span> + d-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (readBit(position,wordBank)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca has already memorized this word!\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writeBit(position,<span class="number">1</span>,wordBank);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca memorized a new word!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="I-规则的形"><a href="#I-规则的形" class="headerlink" title="I 规则的形"></a>I 规则的形</h2><hr>
<p><strong>待更新哦</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法C2上机赛</title>
    <url>/tengpaz/2024/09/28/2023%E7%BA%A7%E7%AE%97%E6%B3%95C2%E4%B8%8A%E6%9C%BA%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级软院学生第二次上机赛习题讲解"><a href="#2023级软院学生第二次上机赛习题讲解" class="headerlink" title="2023级软院学生第二次上机赛习题讲解"></a>2023级软院学生第二次上机赛习题讲解</h1><p>没事，只AC了四道</p>
<p>加油！！！</p>
<h2 id="补题情况"><a href="#补题情况" class="headerlink" title="补题情况"></a>补题情况</h2><h2 id="E-2024-矩阵乘法"><a href="#E-2024-矩阵乘法" class="headerlink" title="E 2024-矩阵乘法"></a>E 2024-矩阵乘法</h2><p>一个那么easy的矩阵乘法都能TLE???</p>
<p>哒死我叭！！</p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>矩阵乘法</li>
</ul>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>矩阵乘法</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> A[<span class="number">201</span>][<span class="number">201</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> B[<span class="number">201</span>][<span class="number">201</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> C[<span class="number">201</span>][<span class="number">201</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="type">int</span> number;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">                A[i][j] = number;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="type">int</span> number;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;number);</span><br><span class="line">                B[i][j] = number;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                C[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++) {</span><br><span class="line">                    C[i][j] += A[i][k] * B[k][j];</span><br><span class="line">                }</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld "</span>, C[i][j]);</span><br><span class="line">            }</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="F-2024-排序？数数！"><a href="#F-2024-排序？数数！" class="headerlink" title="F 2024-排序？数数！"></a>F 2024-排序？数数！</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>计数</li>
</ul>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>又是排序又要记录小的数的，感觉与快速排序很符合</p>
<p>个人觉得，快速排序之所以快，它的一大特点是极大减少了不必要的比较，每次都是只和哨兵元素比较，哨兵作为中介值，那么就将原本比较<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="11.168ex" height="1.71ex" role="img" focusable="false" viewBox="0 -716 4936.1 756"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3120.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(4176.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container>时需要将两两分别比较的情况简化为了只需要<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="6.431ex" height="1.71ex" role="img" focusable="false" viewBox="0 -716 2842.6 756"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2083.6,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="6.454ex" height="1.686ex" role="img" focusable="false" viewBox="0 -705 2852.6 745"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2092.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container>两组比较，并且将哨兵元素直接确定最终位置，也就是只有哨兵元素需要比较而且不再会与其它元素重复比较，这种对于已做功的最大化利用使得快速排序整体平均最优，对于差的情况就是哨兵总是那个最小的或者最大的或者类似的情况，使得比较次数没有很大的节省（不难想到最节省的情况就是每次的哨兵元素刚好是最中间的值）</p>
<p>而非常好用的归并排序也就是同样避免了很多不必要的比较，两两元素之间最多比较一次，利用空间复杂换来对于比较节省的最优化。</p>
<p>题目的要求只需要我们在快排过程中顺便记录比较小的数的个数即可</p>
<p>然后TLE</p>
<p>好重整思路，仔细一看数据量不对劲，为什么呢？因为它相当于只认可除读数据外10个指令，快排不是显得太慢了么ww</p>
<p>大道至简，仔细看<code>mod</code>的大小，太宜人了，所以只需要记录下来每种数字的数量，然后每次累加时加上<code>数字*数量*更小数的个数</code>即可</p>
<p>计数注意考虑0</p>
<p>这里总结经验教训</p>
<ol>
<li>注意题目的数据范围，考虑清楚再下手，不然会浪费时间和心力</li>
<li>一般我们之所以需要排序是因为特殊数据无法直接不重叠地利用<code>hash</code>值进行直接排序，否则直接<code>hash</code>显然是非常方便的</li>
</ol>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 5000005</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nextRand</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> rnd_num = <span class="number">0x80000001</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> mod = <span class="number">1e5</span> + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    rnd_num ^= rnd_num &gt;&gt; <span class="number">10</span>;</span><br><span class="line">    rnd_num ^= rnd_num &lt;&lt; <span class="number">9</span>;</span><br><span class="line">    rnd_num ^= rnd_num &gt;&gt; <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">return</span> rnd_num % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> number[(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)(<span class="number">1e5</span> + <span class="number">3</span>)] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tt);</span><br><span class="line">    <span class="keyword">while</span> (tt--) {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            a[i] = <span class="built_in">nextRand</span>();</span><br><span class="line">            number[a[i]]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; n) {</span><br><span class="line">            <span class="keyword">while</span> (!number[i]) {</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">            ans += (<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>)i * number[i] * (count + <span class="number">1</span>); <span class="comment">// 数字 * 数量 * 位置</span></span><br><span class="line">            count += number[i];</span><br><span class="line">            i++;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            number[a[i]] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="G-待到山花浪漫时"><a href="#G-待到山花浪漫时" class="headerlink" title="G 待到山花浪漫时"></a>G 待到山花浪漫时</h2><p>题目好美</p>
<h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>差分</li>
</ul>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>时间复杂度肯定不能够支持暴力求解，所以就想起来了以前程设题目的一次hint</p>
<p>对于一段区间赋相同值的情况，可以不必将区间上每个点的值都求出来，只需要记录每相邻两个值的差值即可，最后求前缀和即为对应值，差分也就是前缀和的逆运算</p>
<p>注意防溢出噢！</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXN 1000000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> mountain[MAXN + <span class="number">1</span>] = {<span class="number">1</span>, <span class="number">-1</span>}; <span class="comment">// 山坡之花</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n, k, l, r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;n, &amp;k, &amp;l, &amp;r);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> flower = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> flower_birth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> year = <span class="number">0</span>; year &lt;= n; year++) {</span><br><span class="line">        flower_birth += mountain[year];</span><br><span class="line">        flower_birth %= MOD;</span><br><span class="line">        flower += flower_birth;</span><br><span class="line">        flower %= MOD;</span><br><span class="line">        <span class="keyword">if</span> (year + l &lt;= n) {</span><br><span class="line">            mountain[year + l] = ((flower_birth * k) % MOD + mountain[year + l]) % MOD;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (year + r + <span class="number">1</span> &lt;= n) {</span><br><span class="line">            mountain[year + r + <span class="number">1</span>] = (mountain[year + r + <span class="number">1</span>] - (flower_birth * k) % MOD) % MOD;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (flower + MOD) % MOD);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="H-莫卡的龙"><a href="#H-莫卡的龙" class="headerlink" title="H 莫卡的龙"></a>H 莫卡的龙</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>贪吃蛇的实现原理</li>
<li>模拟</li>
</ul>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>因为以前开发过贪吃蛇游戏，这个其实主要解决的就是如何实现位置的移动并且减少实践复杂度，这个简单，因为描述上确实是每个块都要移到前一个块的位置处，但是其实可以直接中间部分不改变，最后一个块移到头需要到的下一个位置，那么就实现了一次移动，实践复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>至于如何实现可以使用双端队列<code>deque</code>，我选择用循环队列加数组实现</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">point</span> {</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">} Point;</span><br><span class="line"></span><br><span class="line">Point dragon[<span class="number">1000001</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> head = <span class="number">1</span>, tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> N)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">char</span> direction, <span class="type">int</span> N)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> position, <span class="type">int</span> N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> N, Q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;Q);</span><br><span class="line">    <span class="built_in">init</span>(N);</span><br><span class="line">    <span class="type">char</span> direction = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> position = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; i++) {</span><br><span class="line">        <span class="type">int</span> op;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">        <span class="keyword">switch</span> (op) {</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">" %c"</span>, &amp;direction);</span><br><span class="line">                <span class="built_in">move</span>(direction, N);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;position);</span><br><span class="line">                <span class="built_in">find</span>(position, N);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> N)</span> </span>{</span><br><span class="line">    tail = N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; i++) {</span><br><span class="line">        dragon[i].x = i;</span><br><span class="line">        dragon[i].y = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">move</span><span class="params">(<span class="type">char</span> direction, <span class="type">int</span> N)</span> </span>{</span><br><span class="line">    <span class="type">int</span> head_follower = head;</span><br><span class="line">    head = (head - <span class="number">1</span>) == <span class="number">0</span> ? N : head - <span class="number">1</span>;</span><br><span class="line">    tail = (tail - <span class="number">1</span>) == <span class="number">0</span> ? N : tail - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="string">'R'</span>) {</span><br><span class="line">        dragon[head].x = dragon[head_follower].x + <span class="number">1</span>;</span><br><span class="line">        dragon[head].y = dragon[head_follower].y;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="string">'L'</span>) {</span><br><span class="line">        dragon[head].x = dragon[head_follower].x - <span class="number">1</span>;</span><br><span class="line">        dragon[head].y = dragon[head_follower].y;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="string">'U'</span>) {</span><br><span class="line">        dragon[head].x = dragon[head_follower].x;</span><br><span class="line">        dragon[head].y = dragon[head_follower].y + <span class="number">1</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        dragon[head].x = dragon[head_follower].x;</span><br><span class="line">        dragon[head].y = dragon[head_follower].y - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> position, <span class="type">int</span> N)</span> </span>{</span><br><span class="line">    position = position + head - <span class="number">1</span> &gt; N ? position + head - <span class="number">1</span> - N : position + head - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, dragon[position].x, dragon[position].y);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="I-2024-矩阵连乘"><a href="#I-2024-矩阵连乘" class="headerlink" title="I 2024-矩阵连乘"></a>I 2024-矩阵连乘</h2><h3 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>矩阵乘法</li>
<li>线性代数</li>
<li>倍增</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>这个时间复杂度，感觉倍增能勉强过，试试，仔细看题目发现时间限制为4ms，稳了，就是直接倍增</p>
<p>首先先算出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="6.18ex" height="1.62ex" role="img" focusable="false" viewBox="0 -716 2731.4 716"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>这个最坏情况为大概<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.25ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 1436.6 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g></svg></mjx-container>差不多满足算法时间复杂度要求</p>
<p>对于上面矩阵乘法的计算结果求m次幂，这里沿用快速幂的思路，对于矩阵进行乘法计算，注意初始化时快速幂最开始那个<code>res</code>初始化为1，但是在矩阵的概念中，单位矩阵不是元素全为1的矩阵，而是对角元素全为1的对角矩阵，也即单位矩阵</p>
<p>具体思路可以参考快速幂的模板，看代码</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 快速幂</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_build</span><span class="params">(<span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">long</span> <span class="type">long</span>** b, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n, <span class="type">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">matrix_free</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">matrix_print</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span>** A = <span class="built_in">matrix_build</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span>** B = <span class="built_in">matrix_build</span>(n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;A[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;B[i][j]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span>** C = <span class="built_in">matrix_mul</span>(A, B, n);</span><br><span class="line">        C = <span class="built_in">matrix_pow</span>(C, n, m);</span><br><span class="line">        <span class="built_in">matrix_print</span>(C, n);</span><br><span class="line">        <span class="built_in">matrix_free</span>(A, n);</span><br><span class="line">        <span class="built_in">matrix_free</span>(B, n);</span><br><span class="line">        <span class="built_in">matrix_free</span>(C, n);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_build</span><span class="params">(<span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>** a = <span class="keyword">new</span> <span class="type">long</span> <span class="type">long</span>*[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        a[i] = <span class="keyword">new</span> <span class="type">long</span> <span class="type">long</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            a[i][j] = <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_mul</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">long</span> <span class="type">long</span>** b, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>** c = <span class="built_in">matrix_build</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">            c[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++) {</span><br><span class="line">                c[i][j] += (a[i][k] * b[k][j]) % MOD;</span><br><span class="line">                c[i][j] %= MOD;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span>** <span class="title">matrix_pow</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n, <span class="type">int</span> k)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span>**res = <span class="built_in">matrix_build</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        res[i][i] = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (k) {</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) {</span><br><span class="line">            res = <span class="built_in">matrix_mul</span>(res, a, n);</span><br><span class="line">        }</span><br><span class="line">        a = <span class="built_in">matrix_mul</span>(a, a, n);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">matrix_free</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="keyword">delete</span>[] a[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">delete</span>[] a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">matrix_print</span><span class="params">(<span class="type">long</span> <span class="type">long</span>** a, <span class="type">int</span> n)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld "</span>, a[i][j]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="J-2024-三叉卡特兰数"><a href="#J-2024-三叉卡特兰数" class="headerlink" title="J 2024-三叉卡特兰数"></a>J 2024-三叉卡特兰数</h2><h3 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>卡特兰数</li>
</ul>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>三叉卡特兰数，先试试动态规划，通过给出的递归式依次计算出从1到n的三叉卡特兰数值，时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.424ex" height="2.451ex" role="img" focusable="false" viewBox="0 -833.2 3281.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="msup" transform="translate(1856,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(2892.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，出界，可以尝试</p>
<p>但其实对于每组数据后面分析发现不需要重新求，只需要求一遍n=5000全部的三叉卡特兰数的项值，对于多组数据只需要取值即可，虽然但是还是时间复杂度高了，实在不行甚至可以打表，时间复杂度降为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.079ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2245 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(1856,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>打表过了，找不打表的方法</p>
<p>对于每次计算三叉卡特兰数，其实二项乘的和是有部分可重复使用的，可以降低复杂度</p>
<h2 id="K-序列询问"><a href="#K-序列询问" class="headerlink" title="K 序列询问"></a>K 序列询问</h2><h3 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>异或</li>
<li>前缀和</li>
<li>离散化</li>
</ul>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>对于求一列数里是否出现数刚好为奇数次，首先可以考虑异或，不过由于可能有多个整数出现奇数次的情况，需要另外考虑一下</p>
<p>不考虑特殊情况后，由于只使用异或涉及遍历一段区间，这个时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，过大，所以可以结合前缀和的思想，使用前缀异或</p>
<p>但是这种方法有个非常大的缺陷就是，不知道内部多个出现奇数次的整数的异或是否会直接相抵消结果为0了</p>
<p>于是还是觉得可以暴力一点点</p>
<p>使用莫队算法试试</p>
<p>进行离线处理，读取全部的询问，对于询问按照先按<code>l</code>排序，再按<code>r</code>排序的原则排序，那么第一个询问<code>l</code>与<code>r</code>均最左，对于后面的询问可以通过前面的询问推理得到，进行区间移动，最后得到所有询问的结果。</p>
<p>如何发现也TEL了，再试试莫队加前缀异或</p>
<p>TLE</p>
<p>发现奇数个数组成的数列必然存在整数恰好出现了奇数次，再剪枝试试</p>
<p>TLE</p>
<p>后面试过了各种莫队阴间卡常办法，都没通过，估计这题防了莫队</p>
<p>根据最后给的标程</p>
<p>这题考的是离散化和前缀异或</p>
<p>如果按它原来给的数字由于数据过于密集可能导致多个不同的数异或后抵消了，所以就可以考虑让数字之间不那么密集，减小抵消概率，答案给了在longlong范围取随机数的方法，由于这里涉及到离散化，使用c++的map是更为方便的，c也可以做</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">rnd</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">static</span> <span class="type">long</span> <span class="type">long</span> x = <span class="number">19260817</span>;</span><br><span class="line">    <span class="keyword">return</span> x = x * <span class="number">233</span> % <span class="number">1000000007</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">long</span> <span class="type">long</span>&gt; m;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100005</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        m.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="type">int</span> q;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="type">int</span> v;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v);</span><br><span class="line">            <span class="keyword">if</span> (m[v] == <span class="number">0</span>) {</span><br><span class="line">                m[v] = <span class="built_in">rnd</span>();</span><br><span class="line">            }</span><br><span class="line">            a[i] = a[i - <span class="number">1</span>] ^ m[v];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (q--) {</span><br><span class="line">            <span class="type">int</span> l, r;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">            <span class="built_in">printf</span>(a[r] ^ a[l - <span class="number">1</span>] ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法E3练习赛</title>
    <url>/tengpaz/2024/10/27/2023%E7%BA%A7%E7%AE%97%E6%B3%95E3%E4%B8%8A%E7%BA%A7%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级算法第三次上级赛"><a href="#2023级算法第三次上级赛" class="headerlink" title="2023级算法第三次上级赛"></a>2023级算法第三次上级赛</h1><h2 id="A-2024-小水懒和蓝园"><a href="#A-2024-小水懒和蓝园" class="headerlink" title="A 2024-小水懒和蓝园"></a>A 2024-小水懒和蓝园</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目需要求得最少的快递数，能够将所有花全部发往学院路。这里发现题目具有贪心的属性。</p>
<p>假设每次都必然会送走一束最轻的花，这个假设可以成立，因为最终所有花都会被送走，只是送走的先后顺序问题。</p>
<p>那么很容易知道，使得快递数能够最少的方案就是让这束最轻的花带上此时最重的能带走的花。并且如果此时所有花中最重的花不能够被一同带走，那么这朵花一定只能被单独送走，于是可以在每一轮送快递时，将不能连同最轻花一同带走的当前最重的花单独先送走，直到剩下的花中最轻最重的能一同带走，此时将这两朵花打包送走，进入下一轮，重复直至全部花都送走，那么此时累计的快递数总数是最少的。</p>
<h2 id="B-mjh的淘宝店"><a href="#B-mjh的淘宝店" class="headerlink" title="B mjh的淘宝店"></a>B mjh的淘宝店</h2><h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>如果没有优惠制度的话，那么很容易知道这是一个经典的背包问题，但是现在的问题是，它存在优惠制度了。</p>
<p>所以可以考虑，从最简单的情况开始想，如果在k为0的基础上，求k=1的情况要怎么做。</p>
<p>可以考虑在此时的购物清单中，将最贵的一个物品免费，然后买剩下的物品，或者将剩下的物品中价值最高的一个物品免费，然后放进已购物清单内。也许这两种情况具有一定的包含关系，并不互斥，我们想使它互斥。</p>
<p>其中前一种情况下不能保证最后获得的价值一定比后一种高，所以这两种情况存在一个最优解。</p>
<p>是否可以直接考虑k的情况</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法E4练习赛</title>
    <url>/tengpaz/2024/10/27/2023%E7%BA%A7%E7%AE%97%E6%B3%95E4%E4%B8%8A%E7%BA%A7%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级算法第四次上级赛"><a href="#2023级算法第四次上级赛" class="headerlink" title="2023级算法第四次上级赛"></a>2023级算法第四次上级赛</h1><h2 id="A-2024-妮妮与自来水厂"><a href="#A-2024-妮妮与自来水厂" class="headerlink" title="A 2024-妮妮与自来水厂"></a>A 2024-妮妮与自来水厂</h2><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>Hint里直接说明了，本题考察的是网络流基本模型，具体模板参考<a class="link" href="https://oi-wiki.org/graph/flow/max-flow/%E5%8D%B3%E5%8F%AF%EF%BC%8C%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8Dinic%E7%AE%97%E6%B3%95">https://oi-wiki.org/graph/flow/max-flow/即可，建议使用Dinic算法<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 10001 <span class="comment">// the double number of original edges, which involves the reverse edge of each.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF 100000000000000000ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">MF</span> {</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">edge</span> {</span><br><span class="line">    <span class="type">int</span> v, nxt;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> cap, flow;</span><br><span class="line">    <span class="comment">// vejex next_edge capacity flow</span></span><br><span class="line">  } e[M];</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> fir[N], cnt = <span class="number">0</span>; <span class="comment">// cnt: the number of edges; fir[n]: first edge to consider;</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> n, S, T; <span class="comment">// number of v; source; target</span></span><br><span class="line">  <span class="type">long</span> <span class="type">long</span> maxflow = <span class="number">0</span>;</span><br><span class="line">  <span class="type">int</span> dep[N], cur[N];</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">memset</span>(fir, <span class="number">-1</span>, <span class="keyword">sizeof</span> fir);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// fir实现当前弧优化</span></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">addedge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">long</span> <span class="type">long</span> w)</span> </span>{</span><br><span class="line">    e[cnt] = {v, fir[u], w, <span class="number">0</span>};</span><br><span class="line">    fir[u] = cnt++;</span><br><span class="line">    e[cnt] = {u, fir[v], <span class="number">0</span>, <span class="number">0</span>}; <span class="comment">// reverse edge</span></span><br><span class="line">    fir[v] = cnt++;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>{</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="type">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    dep[S] = <span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(S);</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>()) {</span><br><span class="line">      <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">      q.<span class="built_in">pop</span>();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = fir[u]; ~i; i = e[i].nxt) {</span><br><span class="line">        <span class="type">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span> ((!dep[v]) &amp;&amp; (e[i].cap &gt; e[i].flow)) {</span><br><span class="line">          dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">          q.<span class="built_in">push</span>(v);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> dep[T];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">long</span> <span class="type">long</span> flow)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> ((u == T) || (!flow)) <span class="keyword">return</span> flow;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>&amp; i = cur[u]; ~i; i = e[i].nxt) {</span><br><span class="line">      <span class="type">int</span> v = e[i].v, d;</span><br><span class="line">      <span class="keyword">if</span> ((dep[v] == dep[u] + <span class="number">1</span>) &amp;&amp;</span><br><span class="line">          (d = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(flow - ret, e[i].cap - e[i].flow)))) {</span><br><span class="line">        ret += d;</span><br><span class="line">        e[i].flow += d;</span><br><span class="line">        e[i ^ <span class="number">1</span>].flow -= d;</span><br><span class="line">        <span class="keyword">if</span> (ret == flow) <span class="keyword">return</span> ret;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">dinic</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>()) {</span><br><span class="line">      <span class="built_in">memcpy</span>(cur, fir, <span class="built_in">sizeof</span>(<span class="type">int</span>) * (n + <span class="number">1</span>));</span><br><span class="line">      maxflow += <span class="built_in">dfs</span>(S, INF);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">} mf;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) {</span><br><span class="line">        <span class="type">int</span> n, m, s, t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;s, &amp;t);</span><br><span class="line">        mf network;</span><br><span class="line">        network.<span class="built_in">init</span>();</span><br><span class="line">        network.S = s;</span><br><span class="line">        network.T = t;</span><br><span class="line">        network.n = n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">            <span class="type">int</span> u, v;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> w;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">            network.<span class="built_in">addedge</span>(u, v, w);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        network.<span class="built_in">dinic</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, network.maxflow);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法C5上机赛</title>
    <url>/tengpaz/2024/11/13/2023%E7%BA%A7%E7%AE%97%E6%B3%95C5%E4%B8%8A%E6%9C%BA%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级算法C5上级赛"><a href="#2023级算法C5上级赛" class="headerlink" title="2023级算法C5上级赛"></a>2023级算法C5上级赛</h1><h2 id="考察方向"><a href="#考察方向" class="headerlink" title="考察方向"></a>考察方向</h2><p>计算几何</p>
<h2 id="A-三点共线"><a href="#A-三点共线" class="headerlink" title="A 三点共线"></a>A 三点共线</h2><p>这题本来是一道非常简单的题目，但是被我犯了一个重要错误，后面影响到了我的整个上机心态，不得不说一个小错误变成了一个严重错误，希望同学朋友能以我为鉴orz</p>
<p>具体思路很简单，我们想要对n个点判断是否存在不共线的三个点，其实只需要以前两个点（之所以取前两个是因为每组数据必然有这两个点而且简单，当然取其它也可以）所在直线为基准判断是否与这两个点共线。</p>
<p>接下来可以看一段错误代码，了解一下为什么能错</p>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> {</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> x;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> y;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1p2 x p1p3</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cross_product</span><span class="params">(Point p1, Point p2, Point p3)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> (p<span class="number">2.</span>x - p<span class="number">1.</span>x) * (p<span class="number">3.</span>y - p<span class="number">1.</span>y) - (p<span class="number">3.</span>x - p<span class="number">1.</span>x) * (p<span class="number">2.</span>y - p<span class="number">1.</span>y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        Point p1, p2, p3;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;p<span class="number">1.</span>x, &amp;p<span class="number">1.</span>y);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;p<span class="number">2.</span>x, &amp;p<span class="number">2.</span>y);</span><br><span class="line">        <span class="type">bool</span> has = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;p<span class="number">3.</span>x, &amp;p<span class="number">3.</span>y);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">cross_product</span>(p1, p2, p3) != <span class="number">0</span>) {</span><br><span class="line">                has = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (has) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"how?\n"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"boo how! boo how!\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>乍一眼看上去思路好像没大问题，但是注意到，因为在同一个测试中存在多组数据，多组数据的数据输入输出一定要注意不要相互影响，这段代码最大错误就是它判断到存在不共线的点后提前暂停了，导致上一个数据点的数据被遗传到了下一个点继续使用，造成错误。 </p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Git剖析</title>
    <url>/tengpaz/2024/07/29/Git%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><p>对于Git怎么传输数据，官方文档给了两种不同的处理方式，分别是”哑<code>(dump)</code>“协议和”智能<code>(smart)</code>协议.</p>
<h3 id="哑协议"><a href="#哑协议" class="headerlink" title="哑协议"></a>哑协议</h3><p>如果架设的仓库是一个基于HTTP协议的<strong>只读</strong>版本库,注意是<strong>只读</strong>.一般而言这种情况下使用的就是哑协议,它不允许客户端向服务端传输数据,可能这也是为什么会称为”哑”(不过具体是怎么命名的请另外深入了解).</p>
<p>对于基于HTTP协议的一个版本库来说,如果我们使用<code>git clone</code>抓取仓库信息,那么就涉及到哑协议,具体实现过程如下:</p>
<p>首先是我们使用了指令</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git clone http://server/repo-progit.git</span><br></pre></td></tr></table></figure></div>

<p>这里的<code>server</code>指的是<strong>服务器</strong>,<code>repo</code>指的是<strong>仓库名</strong>.</p>
<p>输入指令后第一件事是拉取<code>info/refs</code>文件.这个文件是通过<code>update-server-info</code>生成的,于是乎相当于经历了一下过程:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET info/refs</span><br><span class="line">xxxxxxxxxxxxxxx(一堆编号)       refs/heads/master</span><br></pre></td></tr></table></figure></div>

<p>这样就获取了一个远程引用和<code>SHA-1</code>值的列表,接下来要确定HEAD引用的是什么,由此来确定完成后被检出到工作目录里的内容.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure></div>

<p>这说明在抓取完成后应该检出<code>master</code>分支,然后开始遍历处理,然后由于是从之前获取的<code>xxxxx</code>对象开始的,所以首先获取它:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET objects/xx/xxx</span><br><span class="line">([number] bytes of binary data)</span><br></pre></td></tr></table></figure></div>

<p>然后就取得了一个服务器上保存的<strong>对象</strong>,这是使用静态<code>HTTP GET</code>请求获取的,然后可以<code>zlib</code>解压它</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/tengpaz/2023/10/07/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>这里所有笔记都是个人整理的，有参考等会列出，有误区会后期改正欢迎指出</p>
<h1 id="语言基础简介"><a href="#语言基础简介" class="headerlink" title="语言基础简介"></a>语言基础简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><input disabled="" type="checkbox"> C语言程序开发步骤</li>
<li><input disabled="" type="checkbox"> 数据表示</li>
<li><input disabled="" type="checkbox"> 数据处理与储存<ul>
<li>编码</li>
<li>进制</li>
<li>储存</li>
<li>浮点数的表达与储存</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 运算<ul>
<li>关系运算</li>
<li>算术运算</li>
<li>逻辑运算</li>
<li>位运算</li>
<li>复合赋值运算</li>
<li>自增自减运算</li>
<li>运算优先级</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 控制结构<ul>
<li>选择结构</li>
<li>循环结构</li>
<li>goto语句</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 函数<ul>
<li>定义与调用</li>
<li>参数传递原理</li>
<li>递归函数</li>
<li>标准库函数</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之数组<ul>
<li>一维数组</li>
<li>二维数组</li>
<li>变长数组</li>
<li>多维数组</li>
<li>字符型数组与字符串</li>
<li>标准字符串strings处理函数</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之指针<ul>
<li>什么是指针</li>
<li>指针变量</li>
<li>指针运算</li>
<li>空指针</li>
<li>字符串指针</li>
<li>数组指针</li>
<li>多重指针</li>
<li>指针数组</li>
<li>函数指针</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之结构体</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之联合体</li>
<li><input disabled="" type="checkbox"> 文件<br><strong>待更新</strong></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>语言基础</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>语言基础</tag>
        <tag>编译语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 版本控制</title>
    <url>/tengpaz/2024/09/29/NodejsVersionControl/</url>
    <content><![CDATA[<h1 id="Node-js-版本控制"><a href="#Node-js-版本控制" class="headerlink" title="Node.js 版本控制"></a>Node.js 版本控制</h1><p>怎么管理Node的版本阿</p>
<p>这里记录下来一些尝试避免电脑环境大寄</p>
<h2 id="尝试前初始状态"><a href="#尝试前初始状态" class="headerlink" title="尝试前初始状态"></a>尝试前初始状态</h2><p>本机电脑Node.js版本为20.17.0</p>
<p>安装目录为D:\CodeSoftware\Node.js</p>
<p>npm版本为10.8.2</p>
<p>目录为<a class="link" href="mailto:&#x6e;&#x70;&#x6d;&#x40;&#49;&#x30;&#46;&#56;&#x2e;&#x32;">npm@10.8.2<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> D:\CodeSoftware\Node.js\node_modules\npm</p>
<p>Node.js环境变量设置为D:\CodeSoftware\Node.js 为系统环境变量，这里存放<code>npm</code>指令的地址</p>
<p>npm缓存目录为C:\Users\藤爬\AppData\Local\npm-cache</p>
<p>这个可以使用</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get cache</span><br></pre></td></tr></table></figure></div>

<p>获得</p>
<p>这个没有加入环境变量中, 可以使用<code>npm config set cache "C:\Users\藤爬\AppData\Local\npm-cache"</code>设置</p>
<p>npm全局目录为C:\Users\藤爬\AppData\Roaming\npm</p>
<p>这个可以使用</p>
<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure></div>

<p>获得</p>
<p>这个被加入到了用户变量中, 可以使用<code>npm config set prefix "C:\Users\藤爬\AppData\Roaming\npm"</code>设置npm的全局目录，在电脑环境变量中更改调用的环境变量</p>
<p>没有设置的几个变量还有</p>
<p>Node.js的node_modules地址，可以加入到系统变量中</p>
<p>对于新存放的目录，要设置权限，右击<code>Node.js</code>文件夹，依次点击<code>属性``安全</code>点击编辑然后全部允许</p>
<p>电脑里面有两个存放了node_modules的文件夹</p>
<ul>
<li>C:\Users\藤爬\node_modules</li>
<li>D:\CodeSoftware\Node.js\node_modules\npm\node_modules</li>
<li>C:\Users\藤爬\AppData\Roaming\npm\node_modules<br>全局的应该在C:\Users\藤爬\AppData\Roaming\npm\node_modules<br>C:\Users\藤爬\node_modules是以C:\Users\藤爬为项目目录的node包目录</li>
</ul>
<p>node/npm相关配置文件有</p>
<ul>
<li>“C:\Users\藤爬.node_repl_history”</li>
<li>“C:\Users\藤爬\package-lock.json”</li>
<li>“C:\Users\藤爬\package.json”</li>
<li>“C:\Users\藤爬.yarnrc”</li>
<li>“C:\Users\藤爬.npmrc”</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">que</span><br><span class="line">C</span><br><span class="line">D</span><br><span class="line">.clear</span><br><span class="line">.help</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">//registry.npmjs.org/:_authToken=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</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.</span><br><span class="line"># yarn lockfile v1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lastUpdateCheck 1724916869016</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "dependencies": {</span><br><span class="line">    "gitbook": "^2.6.9",</span><br><span class="line">    "npm": "^9.8.1",</span><br><span class="line">    "yarn": "^1.22.22"</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="code"><pre><span class="line">npm config list</span><br><span class="line">; <span class="string">"builtin"</span> config from D:\CodeSoftware\Node.js\node_modules\npm\npmrc</span><br><span class="line"></span><br><span class="line">prefix = <span class="string">"C:\\Users\\藤爬\\AppData\\Roaming\\npm"</span></span><br><span class="line"></span><br><span class="line">; <span class="string">"user"</span> config from C:\Users\藤爬\.npmrc</span><br><span class="line"></span><br><span class="line">//registry.npmjs.org/:_authToken = (protected)</span><br><span class="line"></span><br><span class="line">; node bin location = D:\CodeSoftware\Node.js\node.exe</span><br><span class="line">; node version = v20.17.0</span><br><span class="line">; npm <span class="built_in">local</span> prefix = xxxxxxxxxxxxxxxx</span><br><span class="line">; npm version = 10.8.2</span><br><span class="line">; cwd = xxxxxxxxxxxxxxxxxx</span><br><span class="line">; HOME = C:\Users\藤爬</span><br><span class="line">; Run `npm config <span class="built_in">ls</span> -l` to show all defaults.</span><br></pre></td></tr></table></figure></div>

<p>Node相关环境内置变量<br>Environment variables:<br>FORCE_COLOR                   when set to ‘true’, 1, 2, 3, or an empty string<br>                              causes NO_COLOR and NODE_DISABLE_COLORS to be<br>                              ignored.<br>NO_COLOR                      Alias for NODE_DISABLE_COLORS<br>NODE_DEBUG                    ‘,’-separated list of core modules that should<br>                              print debug information<br>NODE_DEBUG_NATIVE             ‘,’-separated list of C++ core debug categories<br>                              that should print debug output<br>NODE_DISABLE_COLORS           set to 1 to disable colors in the REPL<br>NODE_EXTRA_CA_CERTS           path to additional CA certificates file. Only read<br>                              once during process startup.<br>NODE_NO_WARNINGS              set to 1 to silence process warnings<br>NODE_PATH                     ‘;’-separated list of directories prefixed to the<br>                              module search path<br>NODE_PENDING_DEPRECATION      set to 1 to emit pending deprecation warnings<br>NODE_PENDING_PIPE_INSTANCES   set the number of pending pipe instance handles on<br>                              Windows<br>NODE_PRESERVE_SYMLINKS        set to 1 to preserve symbolic links when resolving<br>                              and caching modules<br>NODE_REDIRECT_WARNINGS        write warnings to path instead of stderr<br>NODE_REPL_EXTERNAL_MODULE     path to a Node.js module which will be loaded in<br>                              place of the built-in REPL<br>NODE_REPL_HISTORY             path to the persistent REPL history file<br>NODE_SKIP_PLATFORM_CHECK      set to 1 to skip the check for a supported platform<br>                              during Node.js startup<br>NODE_TLS_REJECT_UNAUTHORIZED  set to 0 to disable TLS certificate validation<br>NODE_V8_COVERAGE              directory to output v8 coverage JSON to<br>TZ                            specify the timezone configuration<br>UV_THREADPOOL_SIZE            sets the number of threads used in libuv’s threadpool</p>
<p>最后还是决定删除Node.js了呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜呜</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>2023级算法E1练习赛</title>
    <url>/tengpaz/2024/09/22/2023%E7%BA%A7%E7%AE%97%E6%B3%95E1%E7%BB%83%E4%B9%A0%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级软院算法第一次练习赛"><a href="#2023级软院算法第一次练习赛" class="headerlink" title="2023级软院算法第一次练习赛"></a>2023级软院算法第一次练习赛</h1><h2 id="测评情况"><a href="#测评情况" class="headerlink" title="测评情况"></a>测评情况</h2><h2 id="A-sort"><a href="#A-sort" class="headerlink" title="A sort"></a>A sort</h2><hr>
<h3 id="考察知识点"><a href="#考察知识点" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>排序</li>
</ul>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目写得比较明白，就是需要进行一个多关键字排序，具体实现比较简单，就不详细说明了</p>
<h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="type">char</span> name[<span class="number">9</span>];</span><br><span class="line">    <span class="type">int</span> algo_score;</span><br><span class="line">    <span class="type">int</span> ds_score;</span><br><span class="line">    <span class="type">int</span> cp_score;</span><br><span class="line">    <span class="type">int</span> total_score;</span><br><span class="line">} Student;</span><br><span class="line"></span><br><span class="line">Student students[<span class="number">100000</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="type">char</span> temp_name[<span class="number">9</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d %d %d"</span>, &amp;students[i].name, &amp;students[i].algo_score, &amp;students[i].ds_score, &amp;students[i].cp_score);</span><br><span class="line">        students[i].total_score = students[i].algo_score + students[i].ds_score + students[i].cp_score;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(students, students + n, [](Student a, Student b) {</span><br><span class="line">        <span class="keyword">if</span> (a.total_score == b.total_score) {</span><br><span class="line">            <span class="keyword">if</span> (a.algo_score == b.algo_score) {</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">return</span> a.algo_score &gt; b.algo_score;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> a.total_score &gt; b.total_score;</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, students[i].name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="B-Hope-Is-the-Thing-with-Feathers"><a href="#B-Hope-Is-the-Thing-with-Feathers" class="headerlink" title="B Hope Is the Thing with Feathers"></a>B Hope Is the Thing with Feathers</h2><hr>
<h3 id="考察知识点-1"><a href="#考察知识点-1" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>排序</li>
<li>查找</li>
</ul>
<h3 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h3><p>由于时间复杂度要求，不能够进行暴力搜索来遍历查找最终答案，所以我们可以缩小范围，对于数字序列进行排序后二分查找，同时查找只需要找到对应的答案的一个区间长度即可，对于具体是什么数字可以不用关心</p>
<p>使用cpp的一个好处就是可以使用现成的<code>upper_bound()</code>和<code>lower_bound()</code>函数，省去了手写二分查找的麻烦</p>
<h3 id="AC代码-1"><a href="#AC代码-1" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000000</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n, q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++) {</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> d, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>, &amp;d, &amp;k);</span><br><span class="line">        <span class="type">int</span> start, end;</span><br><span class="line">        start = <span class="built_in">lower_bound</span>(a, a + n, d * k) - a;</span><br><span class="line">        end = <span class="built_in">upper_bound</span>(a, a + n, d * (k + <span class="number">1ll</span>) - <span class="number">1ll</span>) - a;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, end - start);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="C-莫卡寻宝"><a href="#C-莫卡寻宝" class="headerlink" title="C 莫卡寻宝"></a>C 莫卡寻宝</h2><hr>
<h3 id="考察知识点-2"><a href="#考察知识点-2" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>模拟</li>
</ul>
<h3 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h3><p>这个数据范围太小了，可以直接暴力遍历</p>
<h3 id="AC代码-2"><a href="#AC代码-2" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">sort</span>(a, a + n);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>, min = <span class="number">0</span>, max_value = <span class="number">0</span>, value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">        min = a[i];</span><br><span class="line">        max = a[i] + k;</span><br><span class="line">        value = a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">if</span> (a[j] &lt;= max) {</span><br><span class="line">                value += a[j];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (value &gt; max_value) {</span><br><span class="line">            max_value = value;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="D-莫卡与序列"><a href="#D-莫卡与序列" class="headerlink" title="D 莫卡与序列"></a>D 莫卡与序列</h2><hr>
<h3 id="原题如下"><a href="#原题如下" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-3"><a href="#考察知识点-3" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>数学取模</li>
</ul>
<h3 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h3><p>由于整除的数也是序列中的正整数，所以必定有其中一个数是全序列中的最小数字</p>
<p>同理，再除去序列中被最小数整除的所有数后，剩下的数的最小数字也必定是存在的答案中的一个数</p>
<p>得到两个数后遍历序列按个判断是否整除即可</p>
<p>算法时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<h3 id="AC代码-3"><a href="#AC代码-3" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100000</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) {</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> min1, min2;</span><br><span class="line">        min1 = min2 = MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt; min1) {</span><br><span class="line">                min1 = a[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (a[i] % min1) {</span><br><span class="line">                <span class="keyword">if</span> (a[i] &lt; min2) {</span><br><span class="line">                    min2 = a[i];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="keyword">if</span> (a[i] % min1 != <span class="number">0</span> &amp;&amp; a[i] % min2 != <span class="number">0</span>) {</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="E-排位胜率（Easy-Version）"><a href="#E-排位胜率（Easy-Version）" class="headerlink" title="E 排位胜率（Easy Version）"></a>E 排位胜率（Easy Version）</h2><h3 id="原题如下-1"><a href="#原题如下-1" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-4"><a href="#考察知识点-4" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>概率论</li>
</ul>
<h3 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h3><p>如果暴力枚举加模拟，时间复杂度最大<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="6.987ex" height="2.294ex" role="img" focusable="false" viewBox="0 -864 3088.1 1014"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mn" transform="translate(748,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msup" transform="translate(1151.6,0)"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g><g data-mml-node="mn" transform="translate(2588.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，即3.0414093201713378043612608166065e+64，放弃</p>
<p>仔细看时间限制放成了2s，说明时间上要求宽泛很多了，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.147ex" height="2.005ex" role="img" focusable="false" viewBox="0 -864 3159 886"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container></p>
<p>嘶难www烦</p>
<p>条件概率问题</p>
<p>先不要管那个机制本身，数学分析一下</p>
<p>假设事件A为“第n+1局比赛赢”，事件B为“n + 1局比赛全输”</p>
<p>游戏机制就是让B事件成为不可能事件</p>
<p>那么题目要求算的概率就是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.502ex" height="2.828ex" role="img" focusable="false" viewBox="0 -1000 3316 1250"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1890,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mover" transform="translate(2168,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2927,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>因为B包含A，所以题目给的概率就是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.202ex" height="2.828ex" role="img" focusable="false" viewBox="0 -1000 8487.1 1250"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mover" transform="translate(1890,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(0,615)"><svg width="759" height="237" x="0" y="148" viewBox="189.8 148 759 237"><path data-c="2013" d="M0 248V285H499V248H0Z" transform="scale(2.277,1)"></path></svg></g></g><g data-mml-node="mo" transform="translate(2649,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3315.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4371.6,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(5122.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5511.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(6261.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6928.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7984.1,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container></p>
<h3 id="AC代码-4"><a href="#AC代码-4" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> n, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;p);</span><br><span class="line">    <span class="type">double</span> win = p / <span class="number">100.0</span>;</span><br><span class="line">    <span class="type">double</span> lose  = <span class="number">1</span> - win;</span><br><span class="line">    <span class="type">double</span> ans = win / (<span class="number">1</span> - <span class="built_in">pow</span>(lose, n + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.3f\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="F-莫卡的手套"><a href="#F-莫卡的手套" class="headerlink" title="F 莫卡的手套"></a>F 莫卡的手套</h2><h3 id="原题如下-2"><a href="#原题如下-2" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-5"><a href="#考察知识点-5" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>组合数学/离散数学3</li>
<li>逆元</li>
<li>快速幂</li>
</ul>
<h3 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h3><p>从n副手套里拿出m只要求存在k对的情况数目，从组合数学的角度考虑</p>
<p>从n里挑k副</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.688ex;" xmlns="http://www.w3.org/2000/svg" width="32.13ex" height="2.508ex" role="img" focusable="false" viewBox="0 -804.3 14201.7 1108.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">副</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">种</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(3277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4333.6,0)"><g data-mml-node="mo"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mtable" transform="translate(500,0)"><g data-mml-node="mtr" transform="translate(0,-49.5)"><g data-mml-node="mtd"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(845.3,363) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(748,-247) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1263.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(1708.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2208.3,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3007.1,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4062.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(4940.9,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(5190.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(5690.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(6135.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(6635.5,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(7434.3,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(8490.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(9868.1,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p>
<p>在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="7.313ex" height="1.661ex" role="img" focusable="false" viewBox="0 -694 3232.6 734"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(1298.8,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mi" transform="translate(2354.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>的情况下，剩下<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.302ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 2343.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1822.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></mjx-container>副即<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.959ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4843.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(1722.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2111.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2933.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3933.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4454.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>只，要求再挑<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.822ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3899.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1489.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2489.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2989.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3510.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>只且无成双的</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.879ex;" xmlns="http://www.w3.org/2000/svg" width="71.08ex" height="2.89ex" role="img" focusable="false" viewBox="0 -888.7 31417.3 1277.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">况</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(3277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4333.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M477 -343L471 -349H458Q432 -349 367 -325T273 -263Q258 -245 250 -212L249 -51Q249 -27 249 12Q248 118 244 128Q243 129 243 130Q220 189 121 228Q109 232 107 235T105 250Q105 256 105 257T105 261T107 265T111 268T118 272T128 276T142 283T162 291Q224 324 243 371Q243 372 244 373Q248 384 249 469Q249 475 249 489Q249 528 249 552L250 714Q253 728 256 736T271 761T299 789T347 816T422 843Q440 849 441 849H443Q445 849 447 849T452 850T457 850H471L477 844V830Q477 820 476 817T470 811T459 807T437 801T404 785Q353 760 338 724Q333 710 333 550Q333 526 333 492T334 447Q334 393 327 368T295 318Q257 280 181 255L169 251L184 245Q318 198 332 112Q333 106 333 -49Q333 -209 338 -223Q351 -255 391 -277T469 -309Q477 -311 477 -329V-343Z"></path></g><g data-mml-node="mtable" transform="translate(583,0)"><g data-mml-node="mtr" transform="translate(0,-13.6)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(944.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2044.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3045.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(3545.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4343.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(5399.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6221.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7222.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(7743.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">鸽</text></g><g data-mml-node="mi" transform="translate(9132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">巢</text></g><g data-mml-node="mi" transform="translate(10132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text></g><g data-mml-node="mi" transform="translate(11132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mo" transform="translate(12132.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(12521.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msubsup" transform="translate(12771.1,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(15781.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(16781.7,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(19257.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(19702.3,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(20802.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(21802.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(22302.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(23101.5,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(24157.3,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(24979.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(25979.8,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(27083.8,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p>
<p>综合一下</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.879ex;" xmlns="http://www.w3.org/2000/svg" width="97.775ex" height="2.89ex" role="img" focusable="false" viewBox="0 -888.7 43216.5 1277.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">情</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">况</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(3277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(4333.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M477 -343L471 -349H458Q432 -349 367 -325T273 -263Q258 -245 250 -212L249 -51Q249 -27 249 12Q248 118 244 128Q243 129 243 130Q220 189 121 228Q109 232 107 235T105 250Q105 256 105 257T105 261T107 265T111 268T118 272T128 276T142 283T162 291Q224 324 243 371Q243 372 244 373Q248 384 249 469Q249 475 249 489Q249 528 249 552L250 714Q253 728 256 736T271 761T299 789T347 816T422 843Q440 849 441 849H443Q445 849 447 849T452 850T457 850H471L477 844V830Q477 820 476 817T470 811T459 807T437 801T404 785Q353 760 338 724Q333 710 333 550Q333 526 333 492T334 447Q334 393 327 368T295 318Q257 280 181 255L169 251L184 245Q318 198 332 112Q333 106 333 -49Q333 -209 338 -223Q351 -255 391 -277T469 -309Q477 -311 477 -329V-343Z"></path></g><g data-mml-node="mtable" transform="translate(583,0)"><g data-mml-node="mtr" transform="translate(0,-13.6)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(944.7,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2044.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3045.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(3545.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4343.9,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mi" transform="translate(5399.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6221.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7222.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(7743.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(8132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">鸽</text></g><g data-mml-node="mi" transform="translate(9132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">巢</text></g><g data-mml-node="mi" transform="translate(10132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">原</text></g><g data-mml-node="mi" transform="translate(11132.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">理</text></g><g data-mml-node="mo" transform="translate(12132.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(12521.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">或</text></g><g data-mml-node="mi" transform="translate(13521.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14621.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(15621.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(16121.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(16920.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(17976.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(18476.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msubsup" transform="translate(18726.1,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(21736.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msubsup" transform="translate(22736.7,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(845.3,411.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(748,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(25747.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(26747.3,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(29223.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(29667.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(30445.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(31501.5,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(32601.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(33601.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(34101.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(34900.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(35956.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(36778.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(37778.9,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(38882.9,0) translate(0 250)"></g></g></g></g></svg></mjx-container></p>
<p>问题是怎么计算数字了</p>
<p>把组合数简化为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.238ex;" xmlns="http://www.w3.org/2000/svg" width="18.112ex" height="3.495ex" role="img" focusable="false" viewBox="0 -997.7 8005.3 1544.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(2541.8,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msup" transform="translate(1656,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(878,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1656,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2156,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(799,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(1577,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1966,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2844,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(3622,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(4122,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4643,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5032,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(5310,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(6088,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6477,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(7077,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(7855,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(8733,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9511,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(10032,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(10421,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="7765.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>需要计算阶乘、大数除法求模、幂</p>
<p>阶乘采用最普通的循环求模计算即可</p>
<p>大数除法求模需要用到逆元，将除法转化为在模的意义下等价的乘法运算，避免数据过大溢出，同时求逆元的算法有拓展欧几里得算法和快速幂加费马小定理算法，我选择了后者，具体理论详细可以自行网上搜索</p>
<p>幂的计算涉及快速幂降低时间复杂度，具体模板可以网上搜索</p>
<p>综合以上，尤其注意数据溢出问题，对于每个乘法结果都需要立即求模避免多个大数相乘溢出</p>
<h3 id="AC代码-5"><a href="#AC代码-5" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> mod)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpowmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> mod)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">stairmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> mod)</span></span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">reverse_multmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> mod)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">2</span> * k &gt; m || m - <span class="number">2</span> * k &gt; n - k) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">stairmod</span>(n, MOD) * <span class="built_in">reverse_multmod</span>(<span class="built_in">stairmod</span>(k, MOD), MOD) % MOD * <span class="built_in">reverse_multmod</span>(<span class="built_in">stairmod</span>(m - <span class="number">2</span> * k, MOD), MOD) % MOD * <span class="built_in">reverse_multmod</span>(<span class="built_in">stairmod</span>(n - m + k, MOD), MOD) % MOD * <span class="built_in">qpowmod</span>(<span class="number">2</span>, m - <span class="number">2</span> * k, MOD) % MOD;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合数取模</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">cmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> fracup = <span class="built_in">stairmod</span>(a, mod);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> fracdown1 = <span class="built_in">reverse_multmod</span>(<span class="built_in">stairmod</span>(b, mod), mod);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> fracdown2 = <span class="built_in">reverse_multmod</span>(<span class="built_in">stairmod</span>(a - b, mod), mod);</span><br><span class="line">    <span class="keyword">return</span> ((((fracup % mod) * (fracdown1 % mod)) % mod) % mod * (fracdown2 % mod)) % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速幂取模</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">qpowmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> b, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="number">1</span>;</span><br><span class="line">    a = (a % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) {</span><br><span class="line">            ans = (a * ans) % mod;</span><br><span class="line">        }</span><br><span class="line">        a = (a * a) % mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘取模</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">stairmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a; i++) {</span><br><span class="line">        temp *= i;</span><br><span class="line">        temp %= mod;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆元取模</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">reverse_multmod</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a, <span class="type">long</span> <span class="type">long</span> mod)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">qpowmod</span>(a, mod - <span class="number">2</span>, mod);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="G-莫卡和魔法图案"><a href="#G-莫卡和魔法图案" class="headerlink" title="G 莫卡和魔法图案"></a>G 莫卡和魔法图案</h2><h3 id="原题如下-3"><a href="#原题如下-3" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-6"><a href="#考察知识点-6" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>分治</li>
</ul>
<h3 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h3><p>题目描述已经涉及到了递归操作和问题分解，那么就直接分治处理就行了，具体实现看代码</p>
<h3 id="AC代码-6"><a href="#AC代码-6" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> picture[<span class="number">729</span>][<span class="number">729</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_white</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    <span class="built_in">draw</span>(k, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">print</span>(k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) {</span><br><span class="line">        picture[x][y] = <span class="string">'#'</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">pow</span>(<span class="number">3</span>, k - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x, y);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x + len, y);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x + <span class="number">2</span> * len, y);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x, y + len);</span><br><span class="line">        <span class="built_in">draw_white</span>(k - <span class="number">1</span>, x + len, y + len);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x + <span class="number">2</span> * len, y + len);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x, y + <span class="number">2</span> * len);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x + len, y + <span class="number">2</span> * len);</span><br><span class="line">        <span class="built_in">draw</span>(k - <span class="number">1</span>, x + <span class="number">2</span> * len, y + <span class="number">2</span> * len);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">draw_white</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) {</span><br><span class="line">        picture[x][y] = <span class="string">'.'</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">pow</span>(<span class="number">3</span>, k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) {</span><br><span class="line">                picture[x + i][y + j] = <span class="string">'.'</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> k)</span> </span>{</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">pow</span>(<span class="number">3</span>, k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>, picture[i][j]);</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="H-多种口味的月饼"><a href="#H-多种口味的月饼" class="headerlink" title="H 多种口味的月饼"></a>H 多种口味的月饼</h2><p>中秋节也过了，就别搞那么多坑了叭ww</p>
<h3 id="原题如下-4"><a href="#原题如下-4" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-7"><a href="#考察知识点-7" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>细致入微</li>
<li>滑动窗口</li>
</ul>
<h3 id="思路分析-7"><a href="#思路分析-7" class="headerlink" title="思路分析"></a>思路分析</h3><p>按这个数据量最好是在线处理时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.844ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2141 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1752,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>注意不存在的情况下输出为<code>N0</code>不是<code>NO</code>，以后老实复制叭，这个问题会挂第2, 3点</p>
<p>看问题是满足特定要求的最小区间问题，套路滑动窗口</p>
<p>滑动窗口就是一个动态的区间范围，为了满足题目要求在线性处理的过程中动态变化找到最优解</p>
<p>在这里要求是区间内所有种类月饼都满足，且要求区间长度最小，不难想到在在线处理的过程中，对于每种特定的月饼记录最大位置，因为是在线处理所以最大位置是最紧凑的一种区间，可能有点抽象可以看下图</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----------</span><br><span class="line">|1|2|2|1|4|</span><br><span class="line">-----------</span><br><span class="line">       ^</span><br></pre></td></tr></table></figure></div>

<p>当指针指到1时，我们需要的是最靠右的1，于此同时前面的2也应该取最靠右的2作为更新的参考位置，因为当1位置更新到2右边时，此时最优应该取靠右的2</p>
<p>举例说明滑动窗口</p>
<p>输入为</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6 3</span><br><span class="line">1 2 2 1 3 1</span><br></pre></td></tr></table></figure></div>

<p>设置数组kind用来存每种月饼的最右位置</p>
<p>处理过程如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 1 3 1  left = 1 right = 1 kind[1] = 1 left 表示可能为答案的区间的最左端 同理 right 为答案的区间的最右端</span><br><span class="line">^</span><br><span class="line">1 2 2 1 3 1  left = 1 right = 2 kind[1] = 1 kind[2] = 2</span><br><span class="line">  ^</span><br><span class="line">1 2 2 1 3 1  left = 1 right = 2 kind[1] = 1 kind[2] = 3</span><br><span class="line">    ^</span><br><span class="line">1 2 2 1 3 1  left = 3 right = 4 kind[1] = 4 kind[2] = 3 此时第1种月饼出现更后的位置，更新窗口</span><br><span class="line">      ^</span><br><span class="line">1 2 2 1 3 1  left = 3 right = 5 kind[1] = 4 kind[2] = 3 kind[3] = 5 l = 3 r = 5 此时开始存在答案</span><br><span class="line">        ^</span><br><span class="line">1 2 2 1 3 1  left = 3 right = 5 kind[1] = 4 kind[2] = 3 kind[3] = 5 l = 3 r = 5</span><br><span class="line">          ^</span><br></pre></td></tr></table></figure></div>

<p>大体过程如上，利用滑动区间就能很好地解决同类满足特定条件的最小区间问题</p>
<h3 id="AC代码-7"><a href="#AC代码-7" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> kind[<span class="number">100001</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	<span class="type">int</span> t;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">	<span class="keyword">while</span> (t--) {</span><br><span class="line">		<span class="type">int</span> n, k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">		}</span><br><span class="line">        <span class="keyword">if</span> (n &lt; k) {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"N0\n"</span>);</span><br><span class="line">            <span class="built_in">memset</span>(kind, <span class="number">0</span>, <span class="built_in">sizeof</span>(kind[<span class="number">0</span>]) * (k + <span class="number">1</span>));</span><br><span class="line">            <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]) * (n + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">			kind[a[i]] = i;</span><br><span class="line">		}</span><br><span class="line">		<span class="type">int</span> p = k;</span><br><span class="line">		<span class="type">int</span> end = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">			<span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">				<span class="keyword">if</span> (kind[i] == <span class="number">0</span>) {</span><br><span class="line">					flag = <span class="number">0</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">			<span class="keyword">if</span> (flag) {</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			} <span class="keyword">else</span> {</span><br><span class="line">				p++;</span><br><span class="line">				<span class="keyword">if</span> (p &lt;= n) {</span><br><span class="line">					kind[a[p]] = p;</span><br><span class="line">				} <span class="keyword">else</span> {</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">"N0\n"</span>); <span class="comment">// 1 2 3dian NOOOOOOOOOO0!!!</span></span><br><span class="line">					<span class="built_in">memset</span>(kind, <span class="number">0</span>, <span class="built_in">sizeof</span>(kind[<span class="number">0</span>]) * (k + <span class="number">1</span>));</span><br><span class="line">					<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]) * (n + <span class="number">1</span>));</span><br><span class="line">					end = <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="keyword">if</span> (end) {</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		}</span><br><span class="line">		<span class="type">int</span> r = p;</span><br><span class="line">		<span class="type">int</span> l = p;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++) {</span><br><span class="line">			<span class="keyword">if</span> (kind[i] &lt;= l) {</span><br><span class="line">				l = kind[i];</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		<span class="type">int</span> minlen = r - l;</span><br><span class="line">		<span class="type">int</span> left = l;</span><br><span class="line">		<span class="type">int</span> right = r;</span><br><span class="line">		<span class="keyword">while</span> (p &lt;= n - <span class="number">1</span>) {</span><br><span class="line">			p++;</span><br><span class="line">			kind[a[p]] = p;</span><br><span class="line">			<span class="keyword">if</span> (a[p] == a[left]) {</span><br><span class="line">				right = p;</span><br><span class="line">				<span class="keyword">while</span> (kind[a[left]] != left) {</span><br><span class="line">					left++;</span><br><span class="line">				}</span><br><span class="line">				<span class="keyword">if</span> (right - left &lt; minlen) {</span><br><span class="line">					r = right;</span><br><span class="line">					l = left;</span><br><span class="line">					minlen = right - left;</span><br><span class="line">				}</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, l, r);</span><br><span class="line">		<span class="built_in">memset</span>(kind, <span class="number">0</span>, <span class="built_in">sizeof</span>(kind[<span class="number">0</span>]) * (k + <span class="number">1</span>));</span><br><span class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in">sizeof</span>(a[<span class="number">0</span>]) * (n + <span class="number">1</span>));</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="I-If-I-Can-Stop-One-Heart-From-Breaking"><a href="#I-If-I-Can-Stop-One-Heart-From-Breaking" class="headerlink" title="I If I Can Stop One Heart From Breaking"></a>I If I Can Stop One Heart From Breaking</h2><p>好可爱的题ww</p>
<h3 id="原题如下-5"><a href="#原题如下-5" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-8"><a href="#考察知识点-8" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>链表</li>
</ul>
<h3 id="思路分析-8"><a href="#思路分析-8" class="headerlink" title="思路分析"></a>思路分析</h3><p>这里初步观察觉得最耗时间的是同类鱼的最短距离查找，然后可能还有非同类🐟之间的还有还有…</p>
<p>用链表试试</p>
<p>链表结点记录一下几项</p>
<ul>
<li>左节点非同类的指针</li>
<li>距离左节点非同类的指针的距离</li>
<li>左节点同类的指针</li>
<li>距离左节点同类的指针的距离</li>
<li>🐟的种类</li>
<li>是否被吃</li>
<li>距离右节点同类的指针的距离</li>
<li>右节点同类的指针</li>
<li>距离右节点非同类的指针的距离</li>
<li>右节点非同类的指针<br>对于每个🐟被吃了后还可以尝试更新距离信息，不过感觉这样做不太好就先不做<br>端点🐟指针可以为NULL用来识别是否同类🐟被吃完啦或者到坐标尽头啦</li>
</ul>
<p>一开始查询最近🐟🐟是靠链表来的，但是TLE了www</p>
<p>后面决定改进！</p>
<p>涉及几个函数</p>
<ul>
<li>新建结点</li>
<li>构建链接并记录数据</li>
<li>删除结点并重新处理数据</li>
</ul>
<p>最后试了试好像还是不行，这里放一个我写的很喜欢的但是TLE的代码</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">fish</span> {</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fish</span>* <span class="title">left_diff</span>;</span></span><br><span class="line">    <span class="type">int</span> left_diff_distance;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fish</span>* <span class="title">left_same</span>;</span></span><br><span class="line">    <span class="type">int</span> left_same_distance;</span><br><span class="line">    <span class="type">int</span> type;</span><br><span class="line">    <span class="type">int</span> is_left;</span><br><span class="line">    <span class="type">int</span> position;</span><br><span class="line">    <span class="type">int</span> right_diff_distance;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fish</span>* <span class="title">right_diff</span>;</span></span><br><span class="line">    <span class="type">int</span> right_same_distance;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fish</span>* <span class="title">right_same</span>;</span></span><br><span class="line">} fish, *fish_pointer;</span><br><span class="line"></span><br><span class="line">fish fishs[<span class="number">100000</span>] = {<span class="number">0</span>};</span><br><span class="line">fish_pointer fish_list[<span class="number">100000</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fish_init</span><span class="params">(fish_pointer fish, <span class="type">int</span> type, <span class="type">int</span> position)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_fish_to_fishlist</span><span class="params">(fish_pointer fish)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">link_fish_diff</span><span class="params">(fish_pointer fish_left, fish_pointer fish_right)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">link_fish_same</span><span class="params">(fish_pointer fish_left, fish_pointer fish_right)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">eat_fish</span><span class="params">(fish_pointer fish)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_next_same_fish_pos</span><span class="params">(fish_pointer fish)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_next_diff_fish_pos</span><span class="params">(fish_pointer fish)</span>;</span><br><span class="line"></span><br><span class="line">fish_pointer <span class="title function_">find_left_diff</span><span class="params">(fish_pointer fish)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            <span class="type">int</span> type;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type);</span><br><span class="line">            fish_init(&amp;fishs[i], type, i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) {</span><br><span class="line">                add_fish_to_fishlist(&amp;fishs[i]);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                add_fish_to_fishlist(&amp;fishs[i]);</span><br><span class="line">                fish_pointer left_diff = find_left_diff(&amp;fishs[i]);</span><br><span class="line">                <span class="keyword">if</span> (left_diff != <span class="literal">NULL</span>) {</span><br><span class="line">                    link_fish_diff(left_diff, &amp;fishs[i]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> now = k - <span class="number">1</span>;</span><br><span class="line">        eat_fish(&amp;fishs[now]);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) {</span><br><span class="line">            <span class="type">int</span> next = find_next_same_fish_pos(&amp;fishs[now]);</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="number">-1</span>) {</span><br><span class="line">                next = find_next_diff_fish_pos(&amp;fishs[now]);</span><br><span class="line">                <span class="keyword">if</span> (next == <span class="number">-1</span>) {</span><br><span class="line">                    <span class="built_in">memset</span>(fishs, <span class="number">0</span>, <span class="keyword">sizeof</span>(fish) * n);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            now = next;</span><br><span class="line">            eat_fish(&amp;fishs[now]);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fish_init</span><span class="params">(fish_pointer fish, <span class="type">int</span> type, <span class="type">int</span> position)</span> {</span><br><span class="line">    fish-&gt;type = type;</span><br><span class="line">    fish-&gt;position = position;</span><br><span class="line">    fish-&gt;is_left = <span class="number">1</span>;</span><br><span class="line">    fish-&gt;left_diff = <span class="literal">NULL</span>;</span><br><span class="line">    fish-&gt;left_diff_distance = <span class="number">0</span>;</span><br><span class="line">    fish-&gt;left_same = <span class="literal">NULL</span>;</span><br><span class="line">    fish-&gt;left_same_distance = <span class="number">0</span>;</span><br><span class="line">    fish-&gt;right_diff = <span class="literal">NULL</span>;</span><br><span class="line">    fish-&gt;right_diff_distance = <span class="number">0</span>;</span><br><span class="line">    fish-&gt;right_same = <span class="literal">NULL</span>;</span><br><span class="line">    fish-&gt;right_same_distance = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">add_fish_to_fishlist</span><span class="params">(fish_pointer fish)</span> {</span><br><span class="line">    <span class="keyword">if</span> (fish_list[fish-&gt;type] == <span class="literal">NULL</span>) {</span><br><span class="line">        fish_list[fish-&gt;type] = fish;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        link_fish_same(fish_list[fish-&gt;type], fish);</span><br><span class="line">        fish_list[fish-&gt;type] = fish;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">link_fish_diff</span><span class="params">(fish_pointer fish_left, fish_pointer fish_right)</span> {</span><br><span class="line">    fish_left-&gt;right_diff = fish_right;</span><br><span class="line">    fish_left-&gt;right_diff_distance = fish_right-&gt;position - fish_left-&gt;position;</span><br><span class="line">    fish_right-&gt;left_diff = fish_left;</span><br><span class="line">    fish_right-&gt;left_diff_distance = fish_right-&gt;position - fish_left-&gt;position;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">link_fish_same</span><span class="params">(fish_pointer fish_left, fish_pointer fish_right)</span> {</span><br><span class="line">    fish_left-&gt;right_same = fish_right;</span><br><span class="line">    fish_left-&gt;right_same_distance = fish_right-&gt;position - fish_left-&gt;position;</span><br><span class="line">    fish_right-&gt;left_same = fish_left;</span><br><span class="line">    fish_right-&gt;left_same_distance = fish_right-&gt;position - fish_left-&gt;position;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">eat_fish</span><span class="params">(fish_pointer fish)</span> {</span><br><span class="line">    fish-&gt;is_left = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, fish-&gt;position + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (fish-&gt;left_same != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same != <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;left_same-&gt;right_same = fish-&gt;right_same;</span><br><span class="line">        fish-&gt;left_same-&gt;right_same_distance += fish-&gt;right_same_distance;</span><br><span class="line">        fish-&gt;right_same-&gt;left_same = fish-&gt;left_same;</span><br><span class="line">        fish-&gt;right_same-&gt;left_same_distance += fish-&gt;left_same_distance;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_same == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same != <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;right_same-&gt;left_same = <span class="literal">NULL</span>;</span><br><span class="line">        fish-&gt;right_same-&gt;left_same_distance = <span class="number">0</span>;</span><br><span class="line">        fish_list[fish-&gt;type] = fish-&gt;right_same;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_same != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same == <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;left_same-&gt;right_same = <span class="literal">NULL</span>;</span><br><span class="line">        fish-&gt;left_same-&gt;right_same_distance = <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        fish_list[fish-&gt;type] = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fish-&gt;left_diff != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_diff != <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;left_diff-&gt;right_diff = fish-&gt;right_diff;</span><br><span class="line">        fish-&gt;left_diff-&gt;right_diff_distance += fish-&gt;right_diff_distance;</span><br><span class="line">        fish-&gt;right_diff-&gt;left_diff = fish-&gt;left_diff;</span><br><span class="line">        fish-&gt;right_diff-&gt;left_diff_distance += fish-&gt;left_diff_distance;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_diff == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_diff != <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;right_diff-&gt;left_diff = <span class="literal">NULL</span>;</span><br><span class="line">        fish-&gt;right_diff-&gt;left_diff_distance = <span class="number">0</span>;</span><br><span class="line">        fish_list[fish-&gt;type] = fish-&gt;right_diff;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_diff != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_diff == <span class="literal">NULL</span>) {</span><br><span class="line">        fish-&gt;left_diff-&gt;right_diff = <span class="literal">NULL</span>;</span><br><span class="line">        fish-&gt;left_diff-&gt;right_diff_distance = <span class="number">0</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_next_same_fish_pos</span><span class="params">(fish_pointer fish)</span> {</span><br><span class="line">    <span class="keyword">if</span> (fish-&gt;left_same == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_same == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> fish-&gt;right_same-&gt;position;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_same != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> fish-&gt;left_same-&gt;position;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (fish-&gt;left_same_distance &lt;= fish-&gt;right_same_distance) {</span><br><span class="line">            <span class="keyword">return</span> fish-&gt;left_same-&gt;position;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> fish-&gt;right_same-&gt;position;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find_next_diff_fish_pos</span><span class="params">(fish_pointer fish)</span> {</span><br><span class="line">    <span class="keyword">if</span> (fish-&gt;left_diff == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_same == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_diff == <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_diff != <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> fish-&gt;right_diff-&gt;position;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (fish-&gt;left_diff != <span class="literal">NULL</span> &amp;&amp; fish-&gt;right_diff == <span class="literal">NULL</span>) {</span><br><span class="line">        <span class="keyword">return</span> fish-&gt;left_diff-&gt;position;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (fish-&gt;left_diff_distance &lt;= fish-&gt;right_diff_distance) {</span><br><span class="line">            <span class="keyword">return</span> fish-&gt;left_diff-&gt;position;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">return</span> fish-&gt;right_diff-&gt;position;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fish_pointer <span class="title function_">find_left_diff</span><span class="params">(fish_pointer fish)</span> {</span><br><span class="line">    fish_pointer left_diff;</span><br><span class="line">    <span class="keyword">if</span> (fish-&gt;position != <span class="number">0</span>) {</span><br><span class="line">        left_diff = &amp;fishs[fish-&gt;position - <span class="number">1</span>];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        left_diff = <span class="literal">NULL</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (left_diff != <span class="literal">NULL</span> &amp;&amp; left_diff-&gt;type == fish-&gt;type) {</span><br><span class="line">        left_diff = left_diff-&gt;left_diff;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> left_diff;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>好了，改思路</p>
<p>后面发现主要是寻找不同🐟🐟那里时间复杂度高了，所以干脆不找不同🐟🐟了，因为相同鱼鱼有限级更高，只需要吃🐟时删除总的链上的🐟，那么当相同🐟吃完时自然总链就不会有其它🐟了。</p>
<p>后期直接用数组维护信息，不加额外的函数，减少函数调用的时间开销，AC了</p>
<h3 id="AC代码-8"><a href="#AC代码-8" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fishs_same_before[<span class="number">100002</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> fishs_same_after[<span class="number">100002</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> fishs_diff_before[<span class="number">100002</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> fishs_diff_after[<span class="number">100002</span>] = {<span class="number">0</span>};</span><br><span class="line"><span class="type">int</span> fishs_same[<span class="number">100002</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> {</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        <span class="type">int</span> n, k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) {</span><br><span class="line">            <span class="type">int</span> type;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;type);</span><br><span class="line">            <span class="keyword">if</span> (fishs_same[type] == <span class="number">0</span>) {</span><br><span class="line">                fishs_same[type] = i;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                fishs_same_before[i] = fishs_same[type];</span><br><span class="line">                fishs_same_after[fishs_same[type]] = i;</span><br><span class="line">                fishs_same[type] = i;</span><br><span class="line">            }</span><br><span class="line">            fishs_diff_after[i] = i + <span class="number">1</span> &gt; n ? <span class="number">0</span> : i + <span class="number">1</span>;</span><br><span class="line">            fishs_diff_before[i] = i - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> now = k;</span><br><span class="line">        <span class="keyword">while</span> (now != <span class="number">0</span>) {</span><br><span class="line">            <span class="type">int</span> next = now;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>, next);</span><br><span class="line">            <span class="keyword">if</span> (fishs_same_before[now] == <span class="number">0</span> &amp;&amp; fishs_same_after[now] == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (fishs_diff_before[now] == <span class="number">0</span> &amp;&amp; fishs_diff_after[now] == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (fishs_diff_before[now] == <span class="number">0</span> &amp;&amp; fishs_diff_after[now] != <span class="number">0</span>) {</span><br><span class="line">                    next = fishs_diff_after[now];</span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (fishs_diff_before[now] != <span class="number">0</span> &amp;&amp; fishs_diff_after[now] == <span class="number">0</span>) {</span><br><span class="line">                    next = fishs_diff_before[now];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">if</span> (now - fishs_diff_before[now] &lt;= fishs_diff_after[now] - now) {</span><br><span class="line">                        next = fishs_diff_before[now];</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        next = fishs_diff_after[now];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (fishs_same_before[now] == <span class="number">0</span> &amp;&amp; fishs_same_after[now] != <span class="number">0</span>) {</span><br><span class="line">                next = fishs_same_after[now];</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (fishs_same_before[now] != <span class="number">0</span> &amp;&amp; fishs_same_after[now] == <span class="number">0</span>) {</span><br><span class="line">                next = fishs_same_before[now];</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="keyword">if</span> (now - fishs_same_before[now] &lt;= fishs_same_after[now] - now) {</span><br><span class="line">                    next = fishs_same_before[now];</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    next = fishs_same_after[now];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            fishs_same_before[fishs_same_after[now]] = fishs_same_before[fishs_same_after[now]] ? fishs_same_before[now] : <span class="number">0</span>;</span><br><span class="line">            fishs_same_after[fishs_same_before[now]] = fishs_same_after[fishs_same_before[now]] ? fishs_same_after[now] : <span class="number">0</span>;</span><br><span class="line">            fishs_diff_before[fishs_diff_after[now]] = fishs_diff_before[fishs_diff_after[now]] ? fishs_diff_before[now] : <span class="number">0</span>;</span><br><span class="line">            fishs_diff_after[fishs_diff_before[now]] = fishs_diff_after[fishs_diff_before[now]] ? fishs_diff_after[now] : <span class="number">0</span>;</span><br><span class="line">            fishs_same_before[now] = <span class="number">0</span>;</span><br><span class="line">            fishs_same_after[now] = <span class="number">0</span>;</span><br><span class="line">            fishs_diff_before[now] = <span class="number">0</span>;</span><br><span class="line">            fishs_diff_after[now] = <span class="number">0</span>;</span><br><span class="line">            now = next;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="built_in">memset</span>(fishs_same_before, <span class="number">0</span>, <span class="keyword">sizeof</span>(fishs_same_before[<span class="number">0</span>]) * (n + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(fishs_same_after, <span class="number">0</span>, <span class="keyword">sizeof</span>(fishs_same_after[<span class="number">0</span>]) * (n + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(fishs_diff_before, <span class="number">0</span>, <span class="keyword">sizeof</span>(fishs_diff_before[<span class="number">0</span>]) * (n + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(fishs_diff_after, <span class="number">0</span>, <span class="keyword">sizeof</span>(fishs_diff_after[<span class="number">0</span>]) * (n + <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">memset</span>(fishs_same, <span class="number">0</span>, <span class="keyword">sizeof</span>(fishs_same));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="J-tree-tree-de"><a href="#J-tree-tree-de" class="headerlink" title="J tree tree de"></a>J tree tree de</h2><h3 id="原题如下-6"><a href="#原题如下-6" class="headerlink" title="原题如下"></a>原题如下</h3><h3 id="考察知识点-9"><a href="#考察知识点-9" class="headerlink" title="考察知识点"></a>考察知识点</h3><ul>
<li>数学分析</li>
</ul>
<h3 id="思路分析-9"><a href="#思路分析-9" class="headerlink" title="思路分析"></a>思路分析</h3><p>先观察规律叭</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">1 2 2 1</span><br><span class="line">1 3 3 2 2 3 3 1</span><br><span class="line">1 4 4 3 3 5 5 2 2 5 5 3 3 4 4 1</span><br><span class="line">1 5 5 4 4 7 7 3 3 8 8 5 5 7 7 2 2 7 7 5 5 8 8 3 3 7 7 4 4 5 5 1</span><br></pre></td></tr></table></figure></div>

<p>没什么规律</p>
<p>还是程序说话叭</p>
<p>初步发现可以递归求解，判断一个结点是否是父代的左孩子可以从结点左右值的大小关系判断，如果右比左大一定是左孩子，反之是右孩子</p>
<p>如果是左孩子，可以直接找亲本的右孩子得出下一个编号结点的值</p>
<p>如果是右孩子，还有两种情况</p>
<p>如果不在最右边，那么下一个结点的值可以通过求亲本的下一个兄弟结点的左孩子得出，而求亲本的下一个兄弟结点是又一个新问题，由此递归</p>
<p>如果恰好在最右边，那么下一个结点的值可以通过这个满二叉树的左右对称性，最右边结点与最左边结点的值恰好相反，由此可以通过求已知结点的对称结点的左孩子得到下一个结点</p>
<p>好哒TLE***</p>
<p>？？？</p>
<p>重理一下思路，目前时间复杂度应该是O(tlgn)</p>
<p>这个数据组数嘶，最坏情况下复杂度需要降到20次指令。好的，还是找规律，我们发现</p>
<p>非边缘右孩子与右兄弟结点有筝形的路径对称关系，什么意思呢，就是从右孩子到其兄弟孩子的计算路径总是可以通过一个合适的筝形（缺底一个角）路径得到</p>
<p>比如</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">     11</span><br><span class="line">   12  21</span><br><span class="line">13 32 23 31</span><br></pre></td></tr></table></figure></div>

<p>这个32跟23可以沿着<code>32-&gt;12-&gt;11-&gt;21-&gt;23</code>的缺角筝形计算，并且对于所有正斜杆的边，结点的左值以右值为差成等差数列，反斜杠同理，于是可以进行计算，大大减少函数递归时间</p>
<p>换而言之，这个就是之前写的递归函数的搜索路径，只是把它的规律总结出来了而已</p>
<p>AC了</p>
<h3 id="AC代码-9"><a href="#AC代码-9" class="headerlink" title="AC代码"></a>AC代码</h3><div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> {</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> left;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> right;</span><br><span class="line">} node;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">find_next</span><span class="params">(node now)</span> </span>{</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now_left = now.left;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> now_right = now.right;</span><br><span class="line">    node next;</span><br><span class="line">    <span class="keyword">if</span> (now.left &lt; now.right) {</span><br><span class="line">        next.left = now.right;</span><br><span class="line">        next.right = now.right - now.left;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (now.right != <span class="number">1</span>) {</span><br><span class="line">        <span class="type">int</span> left_distance = now_left / now_right;</span><br><span class="line">        node left;</span><br><span class="line">        left.left = now_left - now_right * left_distance;</span><br><span class="line">        left.right = now_right;</span><br><span class="line">        node top;</span><br><span class="line">        top.left = left.left;</span><br><span class="line">        top.right = left.right - left.left;</span><br><span class="line">        next.left = top.left + top.right;</span><br><span class="line">        next.right = top.right + next.left * left_distance;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        next.left = now.right;</span><br><span class="line">        next.right = now.left + now.right;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) {</span><br><span class="line">        node now;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;now.left, &amp;now.right);</span><br><span class="line">        node next = <span class="built_in">find_next</span>(now);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, next.left, next.right);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C/C++</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Geany</title>
    <url>/tengpaz/2023/10/07/Geany/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio2022-C/C++语言环境配置</title>
    <url>/tengpaz/2023/10/08/VisualStudio2022-C-C-%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>这个软件的C语言环境配置还是很容易的，难就难在，不同电脑的状况不太一样，总有一些电脑的环境等等会出一些问题，所以这里想对我已经发现的一些问题提出我的解决方案，方法不唯一，能用就行。</p>
<h2 id="第一步-下载-Visual-Studio-2022-的安装软件"><a href="#第一步-下载-Visual-Studio-2022-的安装软件" class="headerlink" title="第一步 下载 Visual Studio 2022 的安装软件"></a>第一步 下载 Visual Studio 2022 的安装软件</h2><h3 id="直接冲向官网"><a href="#直接冲向官网" class="headerlink" title="直接冲向官网"></a>直接冲向官网</h3><p>这是<a class="link"   href="https://visualstudio.microsoft.com/zh-hans/vs/" >Visual Studio 2022 官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>的连接，直接点击进入即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vs.png"
                      alt="Visual Studio 2022 官网"
                ></p>
<p>点击导航栏上的下载进入下载页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsdownload.png"
                      alt="下载界面"
                ></p>
<p>如果你没有特殊需求，选择下载社区版，毕竟那是免费的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscommunity.png"
                      alt="下载community"
                ></p>
<p>没说错的话，下载的目前只是一个安装程序Visual Studio Installer</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsinstaller.png"
                      alt="vs"
                ></p>
<h2 id="第二步-下载-Visual-Studio-Community-2022"><a href="#第二步-下载-Visual-Studio-Community-2022" class="headerlink" title="第二步 下载 Visual Studio Community 2022"></a>第二步 下载 Visual Studio Community 2022</h2><p>一般Visual Studio Installer下载完在桌面上不会存在快捷方式，此时你可以打开开始菜单搜索这个东西的名字，找到它（如果你下载成功了的话）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsinstaller2.png"
                      alt="vsinstaller"
                ></p>
<p>打开它</p>
<p>选择下载 Visual Studio Community 2022</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscommunityinstall.png"
                      alt="vscommunityinstall"
                ></p>
<p>后面会让你选择要安装的工作负荷，请勾选 <strong>Desktop development with C++</strong> 或中文 <strong>使用C++的桌面开发</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/packages.png"
                      alt="工作负荷"
                ></p>
<p>关注一下右侧的<strong>安装详细信息</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/installdetails.png"
                      alt="安装详细信息"
                ></p>
<ul>
<li>如果使用的是<strong>Win11</strong>，看看有没有下载<strong>MSVC v143 -VS 2022 C++ x64&#x2F;x86 生成工具</strong> 和 <strong>Windows 11 SDK</strong></li>
<li>如果使用的是<strong>Win10</strong>，看看有没有下载<strong>MSVC v143 -VS 2022 C++ x64&#x2F;x86 生成工具</strong> 和 <strong>Windows 10 SDK</strong></li>
</ul>
<p>请不要为了省空间不安装，因为这两个包会直接决定你的程序能否在<strong>不更改库路径和源路径和配置</strong>的情况下编写运行C&#x2F;C++程序，如果你真的不小心没有安装或安装出现了失误，我在文章的末尾给了解决方案，你可以去看看能不能帮到你，实在不能解决，重新下载来一遍会是一个不错的选择。</p>
<p>弄完上面的东西后点击<strong>安装</strong></p>
<h3 id="更改安装位置（可选-有点点文件处理能力的都可以考虑）"><a href="#更改安装位置（可选-有点点文件处理能力的都可以考虑）" class="headerlink" title="更改安装位置（可选|有点点文件处理能力的都可以考虑）"></a>更改安装位置（可选|有点点文件处理能力的都可以考虑）</h3><p>安装时也可以选择把软件安装到C盘外的其他盘中，因为这个编辑器实在是太占内存了呜呜呜<br>但是有些软件默认的重要文件还是会安装在C盘默认的目录里，让它去便是</p>
<h2 id="第三步-配置C语言开发环境"><a href="#第三步-配置C语言开发环境" class="headerlink" title="第三步 配置C语言开发环境"></a>第三步 配置C语言开发环境</h2><p>其实实际上只是教你如何创建一个C语言文件项目而已，因为环境啥的在之前的下载安装软件的过程中已经帮你自动配置好了，所以我说这个软件环境配置还是很容易的，当然，这是在你电脑没出什么问题的情况下，比如我神奇的电脑就出了基本市面上能出现的所有问题awwwwwwww</p>
<p>打开软件，如果你找不到软件，可以到开始菜单里搜索</p>
<p>打开后的界面应该大致长成这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsstart.png"
                      alt="vsstart"
                ></p>
<h3 id="创建你的C-C-项目"><a href="#创建你的C-C-项目" class="headerlink" title="创建你的C&#x2F;C++项目"></a>创建你的C&#x2F;C++项目</h3><p>点击<strong>创建新项目</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsstartaproject.png"
                      alt="make a new project"
                ></p>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>编辑器</category>
        <category>VisualStdio2022</category>
        <category>开发环境配置</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>环境配置</tag>
        <tag>VisualStdio2022</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudioCode</title>
    <url>/tengpaz/2023/10/07/VisualStudioCode/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现网站邮箱爬取</title>
    <url>/tengpaz/2023/10/08/Python%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E9%82%AE%E7%AE%B1%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="网络爬虫之邮箱爬取"><a href="#网络爬虫之邮箱爬取" class="headerlink" title="网络爬虫之邮箱爬取"></a>网络爬虫之邮箱爬取</h1><h2 id="第一步-编程环境准备"><a href="#第一步-编程环境准备" class="headerlink" title="第一步 编程环境准备"></a>第一步 编程环境准备</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h4><h5 id="检查你的系统是否安装了Python"><a href="#检查你的系统是否安装了Python" class="headerlink" title="检查你的系统是否安装了Python"></a>检查你的系统是否安装了Python</h5><p>在开始菜单中搜索cmd打开命令提示符，或者按住Shift并右击桌面选择<strong>在终端中打开</strong></p>
<p>在终端窗口中输入<code>python</code>并按下回车键Enter</p>
<ul>
<li>如果出现了Python提示符<code>&gt;&gt;&gt;</code>，就说明你的系统安装了Python</li>
<li>如果看到一条错误信息说<strong>python是无法识别的指令</strong>那么就说明你的系统里还没有安装Python</li>
</ul>
<h5 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h5><p>有些Windows系统中不会默认安装Python，比如我的。。。所以你需要安装Python</p>
<p>这是python官网的连接：<a class="link"   href="https://www.python.org/" >https://www.python.org/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>因为我使用的是windows11，所以对于win7以及更早的版本没有什么很好的建议，如果你是这一类的用户，可以参见官网的指导</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/python.png"
                      alt="python官网"
                ></p>
<p>直接点击<strong>python 3.12.0</strong>下载最新版即可，如果由于文章未更新而最新版本信息未匹配，请下载官网提供的最新版即可</p>
<p>运行安装程序时，请勾选<strong>Add Python to PATH</strong>，否则你的配置会麻烦许多</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Python的安装-1"><a href="#Python的安装-1" class="headerlink" title="Python的安装"></a>Python的安装</h4><p>Linux系统是专门为编程而设计的，在绝大多数Linux系统中都默认安装了Python，所以你基本不需要安装什么软件或修改什么设置</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数，传入用户输入的参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">argv</span>):</span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    pages = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-h 帮助信息;\n&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment">#定义异常处理</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        opts,args = getopt.getopt(argv,<span class="string">&quot;-u:-p:-h&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error an argument!&#x27;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="string">&quot;-u&quot;</span>:</span><br><span class="line">            url = arg</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="string">&quot;-p&quot;</span>:</span><br><span class="line">            pages = arg</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="string">&quot;-h&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(usage())</span><br><span class="line"></span><br><span class="line">    launcher(url,pages)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usage</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-h: --help 帮助;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-u: --url 域名;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-p: --pages 页数;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eg: python -u &quot;www.baidu.com&quot; -p 100&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#漏洞回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launcher</span>(<span class="params">url,pages</span>):   <span class="comment">#调用bing_search()和baidu_search()函数并且将bing爬到的和baidu爬到的合并去重</span></span><br><span class="line">    email_num = []</span><br><span class="line">    key_words = [<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;mailbox&#x27;</span>,<span class="string">&#x27;邮件&#x27;</span>,<span class="string">&#x27;邮箱&#x27;</span>,<span class="string">&#x27;postbox&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(pages)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> key_word <span class="keyword">in</span> key_words:</span><br><span class="line">            bing_emails = bing_search(url,page,key_word)</span><br><span class="line">            baidu_emails = baidu_search(url,page,key_word)</span><br><span class="line">            sum_emails = bing_emails + baidu_emails</span><br><span class="line">            <span class="keyword">for</span> email <span class="keyword">in</span> sum_emails:</span><br><span class="line">                <span class="keyword">if</span> email <span class="keyword">in</span> email_num:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(email)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(email + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    email_num.append(email)</span><br><span class="line"></span><br><span class="line"><span class="comment">#bingSearch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bing_search</span>(<span class="params">url,page,key_word</span>): <span class="comment">#绕过Bing搜索引擎反爬(校验referer和cookie)</span></span><br><span class="line">    referer = <span class="string">&quot;http://cn.bing.com/search?q=email+site%3abaidu.com&amp;qs=n&amp;sp=-1&amp;pq=emailsite%3abaidu.com&amp;first=1&amp;FORM=PERE1&quot;</span></span><br><span class="line">    conn = requests.session()</span><br><span class="line">    bing_url = <span class="string">&quot;https://cn.bing.com/search?q=&quot;</span>+key_word+<span class="string">&quot;site%3a&quot;</span>+url+<span class="string">&quot;&amp;qs=n&amp;sp=-1&amp;pq=&quot;</span>+key_word+<span class="string">&quot;site%3a&quot;</span>+url+<span class="string">&quot;&amp;first=&quot;</span>+<span class="built_in">str</span>((page-<span class="number">1</span>)*<span class="number">10</span>)+<span class="string">&quot;&amp;FORM=PERE1&quot;</span></span><br><span class="line">    conn.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>,headers=headers(referer))</span><br><span class="line">    r = conn.get(bing_url,stream=<span class="literal">True</span>,headers=headers(referer),timeout=<span class="number">8</span>)</span><br><span class="line">    emails = search_email(r.text)</span><br><span class="line">    <span class="keyword">return</span> emails</span><br><span class="line"></span><br><span class="line"><span class="comment">#baiduSearch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu_search</span>(<span class="params">url,page,key_word</span>):   <span class="comment">#绕过百度搜索引擎的反爬(JS请求链)</span></span><br><span class="line">    email_list = []</span><br><span class="line">    emails = []</span><br><span class="line">    referer = <span class="string">&quot;https://www.baidu.com/s?wd=email+site%3Abaidu.com&amp;pn=1&quot;</span></span><br><span class="line">    baidu_url = <span class="string">&quot;https://www.baidu.com/s?wd=&quot;</span>+key_word+<span class="string">&quot;+site%3A&quot;</span>+url+<span class="string">&quot;&amp;pn=&quot;</span>+<span class="built_in">str</span>((page-<span class="number">1</span>)*<span class="number">10</span>)</span><br><span class="line">    conn = requests.session()</span><br><span class="line">    conn.get(referer,headers=headers(referer))</span><br><span class="line">    r = conn.get(baidu_url, headers=headers(referer))</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    tagh3 = soup.find_all(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> h3 <span class="keyword">in</span> tagh3:</span><br><span class="line">        href = h3.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(href, headers=headers(referer),timeout=<span class="number">8</span>)</span><br><span class="line">            emails = search_email(r.text)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            email_list.append(email)</span><br><span class="line">    <span class="keyword">return</span> email_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_email</span>(<span class="params">html</span>):</span><br><span class="line">    emails = re.findall(<span class="string">r&quot;[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+&quot;</span>,html,re.I)  <span class="comment">#正则表达式获取邮箱号码</span></span><br><span class="line">    <span class="keyword">return</span> emails</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">headers</span>(<span class="params">referer</span>):</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Language&#x27;</span>:<span class="string">&#x27;en-US,en;q=0.5&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Encoding&#x27;</span>:<span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>:referer&#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#定义异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        start(sys.argv[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;interrupted by user,killing all threads...&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>本篇文章转载自<a class="link"   href="https://blog.csdn.net/qq_41046513/article/details/121402824%EF%BC%8C" >https://blog.csdn.net/qq_41046513/article/details/121402824，<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 做了一些微调，非原创</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo&amp;github pages建站指南</title>
    <url>/tengpaz/2023/10/01/hexo&amp;github%20pages%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>我也是刚开始搭博客没多久，路上遇到了挺多问题，自己曾尝试一个人debug，但是最后没有完全解决所有问题，感谢很多学长耐心的帮助，得以搭建成这个博客，这里把我所知道的相关教程和经验分享给你们，希望你们能少走一些弯路，谢谢阅读！</p>
<p>有很多内容是直接搬自Hexo官方文档，所以也可以参照官网操作后遇到特殊情况再来看噢</p>
<h1 id="Hexo-Github-pages-搭建个人博客指北"><a href="#Hexo-Github-pages-搭建个人博客指北" class="headerlink" title="Hexo &amp; Github pages 搭建个人博客指北"></a>Hexo &amp; Github pages 搭建个人博客指北</h1><p>中间如果遇到问题可以直接评论或联系我询问噢，我能帮一定会帮</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="第一步-下载Node-js"><a href="#第一步-下载Node-js" class="headerlink" title="第一步 下载Node.js"></a>第一步 下载<strong>Node.js</strong></h3><p>建站过程中需要用到<strong>npm</strong>[^1]的指令下载相关代码包</p>
<p>[^1]: <strong>npm</strong>全称为<strong>Node Package Manager</strong>，看名字就大概可以猜到它的用途了，npm是基于<strong>Node.js</strong>的一个代码包的库，如果没有npm，而我们又需要一些Node.js的拓展代码来完成一些特殊任务，就需要到代码所在的相应网站去下载，问题是，如果我们需要很多代码包，它们都分处不同的网站，那么这时候去挨个访问网站去下载代码就会非常麻烦了，npm就是为了解决这个问题而出现的，npm为那些代码的开发者提供了一个平台，使得代码可以被发布到npm上，使用者可以直接通过npm下载相应的代码，而不需要另外拜访相应网站去下载了。</p>
<p>既然这是一个基于Node.js的工具，它的下载是伴随Node.js的，所以这里需要下载Node.js来支持网站搭建</p>
<p><a class="link"   href="https://nodejs.org/en" >Node.js下载官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这里不必下载最新版，下载推荐的版本即可</p>
<p>下载要注意勾选<code>Add to PATH</code>的选项</p>
<h3 id="第二步-下载Git"><a href="#第二步-下载Git" class="headerlink" title="第二步 下载Git"></a>第二步 下载<strong>Git</strong></h3><p>Git是一个代码版本管理器，详细可以参见搜索引擎或后期发表的文章</p>
<p><a class="link"   href="https://git-scm.com/download/win" >Windows系统Git下载官方网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>这个网站由于是外国网站，可能你会无法正常访问，所以你也可以通过<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/"><strong>淘宝 Git for Windows 镜像</strong></a>下载Git安装包，下载最新版即可，在本文发布时最新版为**v2.42.0.windows.2&#x2F;**，你可以在网站里找找</p>
<h3 id="第三步-安装Hexo"><a href="#第三步-安装Hexo" class="headerlink" title="第三步 安装Hexo"></a>第三步 安装Hexo</h3><p>请确认已经成功安装了上面两个东西，再来执行这一步</p>
<h4 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h4><p>在系统开始栏搜索打开cmd</p>
<p>输入以下指令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>

<h3 id="第四步-建站"><a href="#第四步-建站" class="headerlink" title="第四步 建站"></a>第四步 建站</h3><p>这里需要建一个放你网站文件的文件夹</p>
<p>请找到你想把文件夹放在的地方，比如你想放到D盘的话，你就需要在cmd中先输入<code>D:</code>，然后输入以下指令</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></div>

<ul>
<li>这里的<code>&lt;folder&gt;</code>是你想建的文件夹的名字，建议用英文</li>
<li><code>cd &lt;folder&gt;</code>表示在终端中切换到你的博客文件夹中进行操作</li>
<li><code>npm install</code>表示在选中的文件夹里安装npm相关的文件</li>
</ul>
<p>新建完成后，你选定的文件夹目录应该如下：</p>
<ul>
<li>_config.yml</li>
<li>package.json</li>
<li>scaffolds</li>
<li>source<ul>
<li>_drafts</li>
<li>_posts</li>
</ul>
</li>
<li>themes</li>
</ul>
<p>下面介绍各文件或文件夹的作用</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>该文件储存的是网站的配置信息，在其中可以配置大部分的参数，后期在应用主题后，还会有单独的主题配置文件，用于针对主题内容进行配置。</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>这里储存应用程序的信息，其中像<code>EJS</code>,<code>Stylus</code>和<code>Markdown渲染引擎</code>已经默认安装，可以后期被移除</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>其中<code>dependencies</code>中列出的就是已经安装好的应用程序</p>
<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>储存文件模板的文件夹，在新建文章、页面、草稿时，Hexo会根据相对应的模板生成一个带有模板内容的文件</p>
<p>比如通过修改文件夹中<code>post.md</code>中的<code>Front-matter</code>的内容，那么这个修改将应用于以后所有生成的<code>post</code>文件中</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹，用来存放用户资源的地方，除了<code>_posts</code>文件夹外，其它所有开头名为<code>_</code>的文件和文件夹及隐藏的文件都会被忽略</p>
<p>其中<code>Markdown</code>和<code>HTML</code>文件会被解析放到public文件夹，其它文件直接被拷贝进去</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，<code>Hexo</code>会根据主题来生成静态页面</p>
<h3 id="第五步-配置"><a href="#第五步-配置" class="headerlink" title="第五步 配置"></a>第五步 配置</h3><p>内容细节，详见<a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="第六步-主题选取"><a href="#第六步-主题选取" class="headerlink" title="第六步 主题选取"></a>第六步 主题选取</h3><p>水平够高可以自己写主题，我肯定是做不到的反正</p>
<p><a class="link"   href="https://hexo.io/themes/" >hexo 主题<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>在这里你可以选择你想要的主题，并根据相应主题的说明，应用主题并调整相关配置</p>
<h3 id="第七步-了解实用指令"><a href="#第七步-了解实用指令" class="headerlink" title="第七步 了解实用指令"></a>第七步 了解实用指令</h3><p>当你开始向网站中发布文章时，你会需要知道一些基本指令。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></div>

<p>新建一个布局类型为<code>layout</code>标题为<code>title</code>的文章或页面或草稿</p>
<p>当你没有修改<code>config.yml</code>中的相关信息时，默认为<code>post</code></p>
<p>新建后你可以编辑source&#x2F;_posts文件夹下相应新建的文件来更新文章内容</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure></div>

<p>发表草稿</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></div>

<p>清除缓存和<code>public</code>文件夹中的文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>
<p>简写为<code>hexo g</code><br>生成静态文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>预览网站</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>简写为<code>hexo d</code><br>部署网站</p>
<p>执行这个指令可能经常会碰到连接不到仓库的情况，这是正常情况，毕竟中国连github还是太难了…</p>
<p>反复试，直到连上！（我最多刷了几十遍，当然我不懂怎么解决网络不好的问题，虽然会用梯子）</p>
<h3 id="第八步-？？？"><a href="#第八步-？？？" class="headerlink" title="第八步 ？？？"></a>第八步 ？？？</h3><p>不管过程中遇到了什么问题，细心、耐心，解决它~</p>
<p>弄完这些基本网站就大概好啦</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>后期操作熟悉后，发布文章是三步走</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>指令的简写可以上官网</p>
<h5 id="欢迎指正建议"><a href="#欢迎指正建议" class="headerlink" title="欢迎指正建议~"></a>欢迎指正建议~</h5>]]></content>
      <categories>
        <category>建站</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>静态网站</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code C语言环境配置</title>
    <url>/tengpaz/2023/09/22/VisualStudioCodeC%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="第一步-安装gcc编译器"><a href="#第一步-安装gcc编译器" class="headerlink" title="第一步 安装gcc编译器"></a>第一步 安装gcc编译器</h2><h3 id="已经确认无误完成这一步的朋友可以跳过-检验方法如下"><a href="#已经确认无误完成这一步的朋友可以跳过-检验方法如下" class="headerlink" title="已经确认无误完成这一步的朋友可以跳过 检验方法如下"></a>已经确认无误完成这一步的朋友可以跳过 检验方法如下</h3><p>在windows开始搜索栏里搜索cmd（命令提示符）点开命令提示符</p>
<p>输入以下代码</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc --version</span><br></pre></td></tr></table></figure></div>

<p>如果输出为</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc (Rev6, Built by MSYS2 project) 13.1.0</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></div>

<p>那么你这一步可以跳过了</p>
<p>现在开始教你如何安装gcc编译器</p>
<h3 id="下载MinGW-w64"><a href="#下载MinGW-w64" class="headerlink" title="下载MinGW-w64"></a>下载MinGW-w64</h3><p>在windows系统中想使用gcc编译器，一般需要安装MinGW-w64</p>
<p>搜索MinGW-w64进入<a class="link"   href="https://sourceforge.net/projects/mingw-w64/" >sourceforge网站<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>下载压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/sourceforge.png"
                      alt="sourceforge网站"
                ></p>
<p>下载完后把压缩包解压到你想放的文件目录下</p>
<p>上面的方式在10.3时试出现了一些疑惑的状况，建议更换为以下方式</p>
<p>点进这个<a class="link"   href="https://github.com/niXman/mingw-builds-binaries/releases" >网址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>找自己需要的安装包</p>
<ul>
<li><code>i686</code>是32位系统，<code>x86_64</code>为64位系统</li>
<li><code>win32</code>是windows系统使用的标准，<code>posix</code>是其他系统（如Linux、Unix、Mac OS）使用的标准</li>
<li><code>ucrt</code>是微软提供的一个通用C++运行时库，提供了许多与C标准库兼容的函数和一些新的C函数，同时还支持Unicode字符集和安全函数，如strcpy_s、strcat_s、_itoa_s等，支持新的C11和C++11标准，适用于win10及更高的系统；<code>msvcrt</code>是微软提供的一个C++运行库，提供了许多与C标准库兼容的函数，不支持新的C11和C++11标准</li>
<li><code>dwarf</code>只有32位可用，没有永久的运行时间开销，需要整个调用堆栈被启用，所以exception不能被抛出；<code>seh</code>可以用于64位GCC</li>
</ul>
<p>无论放在哪个目录下，请复制或记住里面文件bin的位置</p>
<p>例如C:\msys64\mingw64\x86_64-w64-mingw32\bin</p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>然后在win11中，依次点击开始-设置-（系统）系统信息-（设备规格下面的相关链接）高级系统设置-环境变量（N）…<br>选定系统变量下的Path一行后点击编辑-新建<br>把之前记住的文件位置粘贴或输入进去<br>点击确定-确定-确定</p>
<p>做完这些后你就可以在cmd中检测有没有装好啦，检测方法见文首</p>
<h2 id="第二步-安装Visual-Studio-Code"><a href="#第二步-安装Visual-Studio-Code" class="headerlink" title="第二步 安装Visual Studio Code"></a>第二步 安装Visual Studio Code</h2><h3 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h3><p>搜索Visual Studio Code进入<a href="https://code.visualstudio.com/"><strong>官网</strong></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/VScodewebsite.png"
                      alt="vscode官网"
                ></p>
<p>点击Download for Windows<br>下载完安装包后打开<br>安装到你想要的位置<br>注意安装过程中建议勾选 “将”通过Code打开”操作添加到Windows资源管理器文件&amp;&amp;目录上下文菜单”</p>
<p><strong>如果没有勾选，可以看文尾有解决办法</strong></p>
<!-- ![安装](https://swkfk.top/img/vsc-win-install.png) -->

<p>安装完后打开vscode</p>
<h2 id="第三步-VScode配置"><a href="#第三步-VScode配置" class="headerlink" title="第三步 VScode配置"></a>第三步 VScode配置</h2><h3 id="安装vscode拓展插件"><a href="#安装vscode拓展插件" class="headerlink" title="安装vscode拓展插件"></a>安装vscode拓展插件</h3><p>打开vscode后，在左侧栏选择</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscode%E7%95%8C%E9%9D%A2.jpg"
                      alt="进入vscode后的界面"
                ></p>
<p>下载图上的四个东西以及CMake、CMake Tools、Code Runner，下完后关闭vscode</p>
<h3 id="代码文件夹"><a href="#代码文件夹" class="headerlink" title="代码文件夹"></a>代码文件夹</h3><p>在配置完成前，你要确定你的代码（准确地说是VScode的代码）放在哪里   </p>
<p>在一个没有中文的路径位置上新建一个文件夹，文件夹的名字和位置你最好要记住，否则找起来挺麻烦</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>注意 文件夹的名字也不能有中文！因为c语言是不支持中文的，有中文后期配置会出大问题。</p>

  </div>

<p>如果你之前已经有了一个合格的文件夹，那么你这步也可以跳过</p>
<p>创建好文件夹后，在vscode中打开这个文件夹，此时如果你是第一次打开这个文件夹，页面上会弹出一段警告，选择“是，信任此作者”即可</p>
<h3 id="开始正式配置"><a href="#开始正式配置" class="headerlink" title="开始正式配置"></a>开始正式配置</h3><p>点回拓展，点击C&#x2F;C++插件右下角的齿轮，点击安装另一个版本，选择1.8.4版的，改完版本重新开启一下vscode</p>
<p>之前不是弄了一个文件夹嘛，点击左栏第一个图标，在你的文件夹里新建一个c语言程序，随便写些可执行代码，之后，按运行代码的快捷键（F5）运行，不要用“run code”运行,此时软件上面会弹出一个选择框，选择C++(GDB&#x2F;LLDB)<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%B9%E5%87%BA%E6%A1%86.png"
                      alt="第一个弹出框"
                ></p>
<p>然后再选择最上面的”gcc.exe-生成和调试活动文件”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%BC%B9%E5%87%BA%E6%A1%86.jpg"
                      alt="第二个弹出框"
                ></p>
<p>然后就没什么问题了，你这时再回到文件夹里看会发现新增了一个叫作”.vscode”的文件夹，里面会有”tasks.json”和”launch.json”两个配置文件，之后你可以选择再把之前那个插件改回最新版，但是注意不要删除或修改新生成的那个叫作”launch.json”的配置文件就行</p>
<p>至此，基本就配置好了，对于一些特殊情况请在下面继续看</p>
<h2 id="已经有配置经历并出了问题"><a href="#已经有配置经历并出了问题" class="headerlink" title="已经有配置经历并出了问题"></a>已经有配置经历并出了问题</h2><h3 id="检查代码所在文件夹的路径"><a href="#检查代码所在文件夹的路径" class="headerlink" title="检查代码所在文件夹的路径"></a>检查代码所在文件夹的路径</h3><p>如果你的代码文件夹路径上有中文名，你可能会遇到下面这种情况<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E8%B7%AF%E5%BE%84%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E5%90%8D.png"
                      alt="路径出现中文名"
                ><br>此时只要把文件夹转移到没有中文名的路径上即可再重复之前的操作</p>
<h3 id="检查是否已经有了配置文件"><a href="#检查是否已经有了配置文件" class="headerlink" title="检查是否已经有了配置文件"></a>检查是否已经有了配置文件</h3><p>如果你之前有尝试配置过vscode，可能在你的文件夹里已经有了”launch.json”的配置文件，如果配置依旧有问题，请把这个文件删除，重复之前的操作</p>
<h3 id="运行使用的按键"><a href="#运行使用的按键" class="headerlink" title="运行使用的按键"></a>运行使用的按键</h3><p>如果你点击右上角的三角形，可能它会给你三种运行方式，这里建议直接使用F5运行即可，如果你不需要进行调试，那么选择Run code也毫无问题</p>
<h2 id="第四步-完善其他配置"><a href="#第四步-完善其他配置" class="headerlink" title="第四步 完善其他配置"></a>第四步 完善其他配置</h2><p>这里有一些其他有用的配置</p>
<h3 id="让程序在终端中运行-保存程序"><a href="#让程序在终端中运行-保存程序" class="headerlink" title="让程序在终端中运行&amp;&amp;保存程序"></a>让程序在终端中运行&amp;&amp;保存程序</h3><p>点击左栏最下方的齿轮（管理），点击设置<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E8%AE%BE%E7%BD%AE.png"
                      alt="设置"
                ><br>找到Run Code Configuration那一块<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/runcodeconfiguration.png"
                      alt="Run Code Configuration"
                ><br>向下划，找到这三项并勾选<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E4%B8%89%E9%A1%B9.png"
                      alt="三项"
                ><br>这能让你的程序直接在终端运行，并在你每次运行程序时保存你的程序，避免修改或程序丢失</p>
<h3 id="删除执行程序时生成的-exe文件"><a href="#删除执行程序时生成的-exe文件" class="headerlink" title="删除执行程序时生成的.exe文件"></a>删除执行程序时生成的.exe文件</h3><p>当你的代码一多，满屏的.c和.exe可能会让你目不暇接，这里推荐一个方法，这个教程可以看看一个学长的博客，非常有用<br><a class="link"   href="https://swkfk.top/2023/07/30/VSCode-%E4%B8%AD-C-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88for-Windows%EF%BC%89/" >搬运工:)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="安装时没有勾选之前说过的项的后期解决方案"><a href="#安装时没有勾选之前说过的项的后期解决方案" class="headerlink" title="安装时没有勾选之前说过的项的后期解决方案"></a>安装时没有勾选之前说过的项的后期解决方案</h3><p>打开cmd命令提示符，输入<strong>regedit</strong>打开<strong>注册表编辑器</strong></p>
<p>找到<strong>HKEY_CLASSES_ROOT</strong></p>
<h4 id="配置“用VSCode打开文件”"><a href="#配置“用VSCode打开文件”" class="headerlink" title="配置“用VSCode打开文件”"></a>配置“用VSCode打开文件”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>*</strong>-<strong>shell</strong>，右键<strong>shell</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong>（你认得出来其实就可以www）</p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开</strong>（名字可以自定，右键文件出现的菜单反正会有这个名字，你也可以个性化一点设置成奇怪的名字嘿嘿）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步是给菜单的这一项添加图标缩略图，更好看点而已www）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%1”，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%1”</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>注意 所有的字符如双引号都应该要是英文字符，输入法为中文时与输入法为英文时字符打出来有些是不一样的，一定要区分</p>

  </div>

<h4 id="配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”"><a href="#配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”" class="headerlink" title="配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”"></a>配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>Directory</strong>-<strong>Background</strong>，右键<strong>Background</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong></p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开文件夹</strong>（名字可以自定）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步还是给菜单的这一项添加图标缩略图，更好看点而已www）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%<strong>V</strong>“，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%<strong>V</strong>“</p>
<h4 id="配置“用VSCode打开文件夹”"><a href="#配置“用VSCode打开文件夹”" class="headerlink" title="配置“用VSCode打开文件夹”"></a>配置“用VSCode打开文件夹”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>Directory</strong>-<strong>shell</strong>，右键<strong>shell</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong></p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开文件夹</strong>（名字可以自定）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步还是给菜单的这一项添加图标缩略图）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%<strong>V</strong>“，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%<strong>V</strong>“</p>
<h3 id="C程序代码板子"><a href="#C程序代码板子" class="headerlink" title="C程序代码板子~"></a>C程序代码板子~</h3><p>如果你不想在每次打C语言代码时反复输入</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那你可以考虑弄个自己的板子</p>
<p>打开vscode在左上角那里找到文件-首选项-配置用户代码片段-c.json</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.png"
                      alt="配置用户代码片段"
                ></p>
<p>在文件里输入你需要的板子</p>
<p>比如这样</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;math.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;string.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;stdlib.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;memory.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;int main()&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;	$0&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;	return 0;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;藤爬专用C语言模板~&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><code>prefix</code>表示调用这个模板你需要输入的东西<br><code>body</code>就是模板的主体内容啦<br><code>description</code>是对这个模板的描述，以免后期模板过多弄混<br><code>$0</code>表示最后打字光标停留的位置</p>
<p>保存后，在你的C语言文件里输入一个<strong>C</strong>就会跳出选择框，选到<strong>C</strong>后按<strong>Tab</strong>键就可以一键粘贴啦~</p>
<p>如果你还有其它需求比如读取数的二进制中1的个数模板</p>
<p>代码片段可能如下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="line">	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="line">	// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="line">	// same ids are connected.</span><br><span class="line">	// Example:</span><br><span class="line">	// &quot;Print to console&quot;: &#123;</span><br><span class="line">	// 	&quot;prefix&quot;: &quot;log&quot;,</span><br><span class="line">	// 	&quot;body&quot;: [</span><br><span class="line">	// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span><br><span class="line">	// 		&quot;$2&quot;</span><br><span class="line">	// 	],</span><br><span class="line">	// 	&quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">	// &#125;</span><br><span class="line">	&quot;basement&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;C&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">			&quot;#include&lt;stdio.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;math.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;string.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;stdlib.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;memory.h&gt;&quot;,</span><br><span class="line">			&quot;&quot;,</span><br><span class="line">			&quot;int main()&quot;,</span><br><span class="line">			&quot;&#123;&quot;,</span><br><span class="line">			&quot;	$0&quot;,</span><br><span class="line">			&quot;	return 0;&quot;,</span><br><span class="line">			&quot;&#125;&quot;,</span><br><span class="line">			&quot;&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;藤爬专用C语言模板~&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;popcount&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;popcount&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">			&quot;$&#123;1:unsigned int&#125; popcount($&#123;1:unsigned int&#125; g)&quot;,</span><br><span class="line">			&quot;&#123;&quot;,</span><br><span class="line">			&quot;	$&#123;1:unsigned int&#125; n = 0;//记录二进制中1的个数&quot;,</span><br><span class="line">			&quot;	for(int i = 0; i &lt;= 31; i++)&quot;,</span><br><span class="line">			&quot;	&#123;&quot;,</span><br><span class="line">			&quot;		n += (g &gt;&gt; i) &amp; 1u;&quot;,</span><br><span class="line">			&quot;	&#125;&quot;,</span><br><span class="line">			&quot;	return n;&quot;,</span><br><span class="line">			&quot;&#125;&quot;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>$1表示光标第一次停留的位置，$2以此类推，每次按<strong>Tab</strong>键就可以实现光标的跳转</p>
<p>这段代码里的花括号里给序号1添加了注释，按<strong>Tab</strong>键就默认不修改原注释内容并跳转至下一序号，一般情况下这些备注内容可能需要修改，此时相同序号的内容会被统一修改，非常方便</p>
<h3 id="如果本文有什么问题，欢迎指正"><a href="#如果本文有什么问题，欢迎指正" class="headerlink" title="如果本文有什么问题，欢迎指正\ (^ - ^) &#x2F;"></a>如果本文有什么问题，欢迎指正\ (^ - ^) &#x2F;</h3>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>编辑器</category>
        <category>vscode</category>
        <category>开发环境与配置</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>环境配置</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>python语言基础</title>
    <url>/tengpaz/2023/10/07/python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>这里所有笔记都是个人整理的，有参考等会列出，有误区会后期改正欢迎指出</p>
<h1 id="语言基础简介"><a href="#语言基础简介" class="headerlink" title="语言基础简介"></a>语言基础简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><input disabled="" type="checkbox"> 数据类型<ul>
<li>变量</li>
<li>字符串</li>
<li>数字</li>
<li>注释</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 列表</li>
<li><input disabled="" type="checkbox"> 字典</li>
<li><input disabled="" type="checkbox"> 元组</li>
<li><input disabled="" type="checkbox"> if语句</li>
<li><input disabled="" type="checkbox"> 循环语句</li>
<li><input disabled="" type="checkbox"> 用户输入</li>
<li><input disabled="" type="checkbox"> 函数</li>
<li><input disabled="" type="checkbox"> 类</li>
<li><input disabled="" type="checkbox"> 文件</li>
<li><input disabled="" type="checkbox"> 测试</li>
<li><input disabled="" type="checkbox"> 项目<ul>
<li>网站</li>
<li>爬虫</li>
<li>游戏</li>
<li>数据可视化</li>
<li>excel<br><strong>待更新</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>语言基础</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
        <tag>python</tag>
        <tag>脚本语言</tag>
      </tags>
  </entry>
  <entry>
    <title>win11神奇操作指北</title>
    <url>/tengpaz/2023/11/09/win11%E7%A5%9E%E5%A5%87%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="错误类"><a href="#错误类" class="headerlink" title="错误类"></a>错误类</h1><h2 id="打字么有打字框"><a href="#打字么有打字框" class="headerlink" title="打字么有打字框"></a>打字么有打字框</h2><p>有些人使用（应该是绝大部分人）win11系统的电脑时可能某一时候突然发现，系统输入法打字没有打字框了叻，很神奇是不是</p>
<p>但是咋解决捏</p>
<p>很简单，原理我不是很懂，但是确实可以这样做</p>
<p>打开任务管理器，如果你不会打开的话，右键<strong>开始</strong>的图标选择<strong>任务管理器</strong>即可，然后找到进程中的<strong>explorer.exe</strong>(找的话不方便直接搜索)或者中文名<strong>Windows资源管理器</strong>，右键这东西大胆点击重新启动，等待它重启完成后问题基本就解决了，如果还没解决，可能你得另找办法叻</p>
<h1 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h1><h2 id="搜索项"><a href="#搜索项" class="headerlink" title="搜索项"></a>搜索项</h2><h3 id="打开注册表编辑器"><a href="#打开注册表编辑器" class="headerlink" title="打开注册表编辑器"></a>打开注册表编辑器</h3><p>开始菜单搜索输入regidit</p>
<h3 id="打开用户账户的管理界面"><a href="#打开用户账户的管理界面" class="headerlink" title="打开用户账户的管理界面"></a>打开用户账户的管理界面</h3><p>开始菜单搜索输入netplwiz</p>
<h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h3 id="快捷复制历史输入的指令"><a href="#快捷复制历史输入的指令" class="headerlink" title="快捷复制历史输入的指令"></a>快捷复制历史输入的指令</h3><p>按$\uparrow$键</p>
<h3 id="指令补全"><a href="#指令补全" class="headerlink" title="指令补全"></a>指令补全</h3><p>按Tap键</p>
<h3 id="电脑执行策略"><a href="#电脑执行策略" class="headerlink" title="电脑执行策略"></a>电脑执行策略</h3><p><strong>查看当前电脑执行策略</strong></p>
<ul>
<li>所有项：Get-ExecutionPolicy -List或Get-ExecutionPolicy -l</li>
<li>当前默认项：Get-ExecutionPolicy</li>
</ul>
<p><strong>设置当前电脑执行策略</strong><br>Set-ExecutionPolicy -ExecutionPolicy [ExecutionPolicy] -Scope [Scope]</p>
<ul>
<li>-ExecutionPolicy：执行策略类型的参数</li>
<li>-Scope：设置的范围的参数</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>《Python黑帽子-黑客与渗透编程测试之道》问题解答</title>
    <url>/tengpaz/2023/10/21/%E3%80%8APython%E9%BB%91%E5%B8%BD%E5%AD%90-%E9%BB%91%E5%AE%A2%E4%B8%8E%E6%B8%97%E9%80%8F%E7%BC%96%E7%A8%8B%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-设置你的Python环境"><a href="#1-设置你的Python环境" class="headerlink" title="1 设置你的Python环境"></a>1 设置你的Python环境</h2><h3 id="安装Kali-Linux虚拟机"><a href="#安装Kali-Linux虚拟机" class="headerlink" title="安装Kali Linux虚拟机"></a>安装Kali Linux虚拟机</h3><h4 id="安装具体过程"><a href="#安装具体过程" class="headerlink" title="安装具体过程"></a>安装具体过程</h4><h5 id="下载虚拟机软件"><a href="#下载虚拟机软件" class="headerlink" title="下载虚拟机软件"></a>下载虚拟机软件</h5><hr>
<p><strong>1.安装什么虚拟机软件</strong></p>
<p>我下载的是<strong>VMware Player</strong>，因为我不清楚其他软件对于Win11的兼容性怎么样，下载这个软件要注意的就是不需要下载<strong>VMware</strong>，这是要付费的，加了<strong>Player</strong>的是不用付费的，注意这个就行</p>
<p>下载连接：<a class="link"   href="https://www.vmware.com/cn/products/workstation-player.html" >VMware Workstation Player<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<p><strong>2.如何下载Kali虚拟机镜像</strong></p>
<p>连接：<a class="link"   href="https://www.kali.org/get-kali/#kali-installer-images" >Kali install<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>选择下载<strong>Installer</strong>即可，记住安装位置</p>
<hr>
<p><strong>3.如何把Kali安装到虚拟机软件中</strong></p>
<p>打开虚拟机软件，点<strong>创建新虚拟机</strong></p>
<p>然后选择<strong>稍后安装操作系统</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>客户机操作系统</strong>选择<strong>Linux</strong></p>
<p><strong>版本</strong>选择最新版的<strong>Debian 64位</strong>，本文发布时最新版是<strong>11.x</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>虚拟机名称</strong>取一个你记得住的就行</p>
<p><strong>位置</strong>找你想放的地方就行，建议不要放<strong>C盘</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>最大磁盘大小</strong>按默认值可以了</p>
<p>勾选<strong>将虚拟磁盘拆分成多个文件</strong></p>
<p>点<strong>下一步</strong></p>
<p>点击<strong>自定义硬件</strong></p>
<p>在<strong>新 CD&#x2F;DVD(IDE)<strong>那一栏里勾选</strong>使用ISO映像文件</strong>，把之前让你记住的位置输入进去</p>
<p>点<strong>关闭</strong></p>
<p>点<strong>完成</strong></p>
<p>打开刚建的虚拟机</p>
<p>后面如果有选择项，选择应用到全部磁盘即可，账号密码请一定记住，一般设置默认都可以</p>
<h4 id="安装完的配置"><a href="#安装完的配置" class="headerlink" title="安装完的配置"></a>安装完的配置</h4><p><strong>1.如何打开shell窗口</strong></p>
<p>进虚拟机后左上角处有一个黑方框的应用图标，点击进入即可</p>
<p><strong>2.更新指令无法正常执行</strong></p>
<p>按照书中的指令输入可能会出现一些情况</p>
<p><strong>如果你输入了某一行指令后窗口出现一个文字框，有一个<code>[OK]</code>的选项你不知道怎么点</strong></p>
<p>点击键盘上的<strong>Tab</strong>键，当<code>[OK]</code>变成光亮时点<strong>Enter</strong>即可</p>
<hr>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>黑客</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>空间解析几何简明教程</title>
    <url>/tengpaz/2023/11/04/%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li>向量代数</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 向量</li>
<li><input disabled="" type="checkbox"> 内积</li>
<li><input disabled="" type="checkbox"> 外积</li>
<li><input disabled="" type="checkbox"> 混合积</li>
<li><input disabled="" type="checkbox"> 双重外积</li>
</ul>
<ol start="2">
<li>平面与空间直线</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 平面</li>
<li><input disabled="" type="checkbox"> 空间直线</li>
</ul>
<ol start="3">
<li>曲面曲线</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 曲面</li>
<li><input disabled="" type="checkbox"> 曲线</li>
</ul>
<h1 id="第一章-向量代数"><a href="#第一章-向量代数" class="headerlink" title="第一章 向量代数"></a>第一章 向量代数</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="向量的定义"><a href="#向量的定义" class="headerlink" title="向量的定义"></a>向量的定义</h3><p>既有大小又有方向的量，又叫作矢量</p>
<h3 id="标量的定义"><a href="#标量的定义" class="headerlink" title="标量的定义"></a>标量的定义</h3><p>只有大小没有方向的量，又叫作数量</p>
<h3 id="向量的表示"><a href="#向量的表示" class="headerlink" title="向量的表示"></a>向量的表示</h3><p>在欧几里得空间中，向量可用有向线段表示</p>
<h3 id="零向量"><a href="#零向量" class="headerlink" title="零向量"></a>零向量</h3><p>模是0的向量</p>
<h3 id="向量的位置关系"><a href="#向量的位置关系" class="headerlink" title="向量的位置关系"></a>向量的位置关系</h3><h4 id="共线"><a href="#共线" class="headerlink" title="共线"></a>共线</h4><p>平行的两个向量也叫共线向量</p>
<h4 id="共面"><a href="#共面" class="headerlink" title="共面"></a>共面</h4><p>两个向量一定共面</p>
<h3 id="向量的加法"><a href="#向量的加法" class="headerlink" title="向量的加法"></a>向量的加法</h3><h4 id="三角形法则"><a href="#三角形法则" class="headerlink" title="三角形法则"></a>三角形法则</h4><h4 id="平行四边形法则"><a href="#平行四边形法则" class="headerlink" title="平行四边形法则"></a>平行四边形法则</h4><h4 id="律"><a href="#律" class="headerlink" title="律"></a>律</h4><h3 id="向量的数乘"><a href="#向量的数乘" class="headerlink" title="向量的数乘"></a>向量的数乘</h3><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><h4 id="定理1（共线定理）"><a href="#定理1（共线定理）" class="headerlink" title="定理1（共线定理）"></a>定理1（共线定理）</h4><p>设<strong>a</strong>$\neq$<strong>0</strong>，则<strong>b</strong>$\parallel$<strong>a</strong>（共线）$\Leftrightarrow$<strong>b</strong>$&#x3D;k$<strong>a</strong>，且数$k$唯一存在.即设向量<strong>a</strong>$\neq$<strong>0</strong>，则<strong>b</strong>与<strong>a</strong>共线的充要条件是<strong>b</strong>$&#x3D;k$<strong>a</strong>，且实数$k$唯一存在.</p>
<h4 id="推论1"><a href="#推论1" class="headerlink" title="推论1"></a>推论1</h4><p><strong>a</strong>$\parallel$<strong>b</strong>$\Leftrightarrow$<strong>b</strong>$&#x3D;k$<strong>a</strong>或<strong>a</strong>$&#x3D;$$\lambda$<strong>b</strong>.</p>
<h4 id="推论2"><a href="#推论2" class="headerlink" title="推论2"></a>推论2</h4><p><strong>a</strong>$\parallel$<strong>b</strong>$\Leftrightarrow$</p>
]]></content>
      <categories>
        <category>高等代数</category>
        <category>空间解析几何</category>
      </categories>
      <tags>
        <tag>空间解析几何</tag>
      </tags>
  </entry>
  <entry>
    <title>淑芬</title>
    <url>/tengpaz/2023/11/29/%E6%B7%91%E8%8A%AC/</url>
    <content><![CDATA[<h2 id="淑芬笔记"><a href="#淑芬笔记" class="headerlink" title="淑芬笔记"></a>淑芬笔记</h2><p>我把我当年的完整淑芬笔记放下面的电子书里了，有兴趣的可以看看</p>
<p><a class="link" href="https://qinaida.cn/tengpaz/tengpazbook">工科数学分析笔记<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h3><h4 id="6-1-不定积分的概念"><a href="#6-1-不定积分的概念" class="headerlink" title="6.1 不定积分的概念"></a>6.1 不定积分的概念</h4><p><strong>定义6.1.1</strong>若区间I上的函数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>与<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.749ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2099 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(749,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1138,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1710,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>满足，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.817ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 5665.3 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(837.3,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1081.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1470.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2042.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2709.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3765.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(4315.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4704.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(5276.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>则称<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.749ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2099 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(749,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1138,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1710,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>在区间I上的一个==原函数==</p>
<p><strong>定义6.1.2</strong>函数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>在区间I上的全体原函数成为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>在区间I上的不定积分,记为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.691ex;" xmlns="http://www.w3.org/2000/svg" width="1.38ex" height="2.514ex" role="img" focusable="false" viewBox="0 -805.5 610 1111"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 0.5)"><path data-c="222B" d="M113 -244Q113 -246 119 -251T139 -263T167 -269Q186 -269 199 -260Q220 -247 232 -218T251 -133T262 -15T276 155T297 367Q300 390 305 438T314 512T325 580T340 647T361 703T390 751T428 784T479 804Q481 804 488 804T501 805Q552 802 581 769T610 695Q610 669 594 657T561 645Q542 645 527 658T512 694Q512 705 516 714T526 729T538 737T548 742L552 743Q552 745 545 751T525 762T498 768Q475 768 460 756T434 716T418 652T407 559T398 444T387 300T369 133Q349 -38 337 -102T303 -207Q256 -306 169 -306Q119 -306 87 -272T55 -196Q55 -170 71 -158T104 -146Q123 -146 138 -159T153 -195Q153 -206 149 -215T139 -230T127 -238T117 -242L113 -244Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.769ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2992 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(1900,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2420,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container><br>如果<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.749ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2099 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(749,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1138,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1710,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>的一个原函数,则有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.691ex;" xmlns="http://www.w3.org/2000/svg" width="1.38ex" height="2.514ex" role="img" focusable="false" viewBox="0 -805.5 610 1111"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 0.5)"><path data-c="222B" d="M113 -244Q113 -246 119 -251T139 -263T167 -269Q186 -269 199 -260Q220 -247 232 -218T251 -133T262 -15T276 155T297 367Q300 390 305 438T314 512T325 580T340 647T361 703T390 751T428 784T479 804Q481 804 488 804T501 805Q552 802 581 769T610 695Q610 669 594 657T561 645Q542 645 527 658T512 694Q512 705 516 714T526 729T538 737T548 742L552 743Q552 745 545 751T525 762T498 768Q475 768 460 756T434 716T418 652T407 559T398 444T387 300T369 133Q349 -38 337 -102T303 -207Q256 -306 169 -306Q119 -306 87 -272T55 -196Q55 -170 71 -158T104 -146Q123 -146 138 -159T153 -195Q153 -206 149 -215T139 -230T127 -238T117 -242L113 -244Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.02ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8407 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(1900,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2420,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3269.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4325.6,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(5074.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5463.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6035.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6646.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7647,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.691ex;" xmlns="http://www.w3.org/2000/svg" width="1.38ex" height="2.514ex" role="img" focusable="false" viewBox="0 -805.5 610 1111"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 0.5)"><path data-c="222B" d="M113 -244Q113 -246 119 -251T139 -263T167 -269Q186 -269 199 -260Q220 -247 232 -218T251 -133T262 -15T276 155T297 367Q300 390 305 438T314 512T325 580T340 647T361 703T390 751T428 784T479 804Q481 804 488 804T501 805Q552 802 581 769T610 695Q610 669 594 657T561 645Q542 645 527 658T512 694Q512 705 516 714T526 729T538 737T548 742L552 743Q552 745 545 751T525 762T498 768Q475 768 460 756T434 716T418 652T407 559T398 444T387 300T369 133Q349 -38 337 -102T303 -207Q256 -306 169 -306Q119 -306 87 -272T55 -196Q55 -170 71 -158T104 -146Q123 -146 138 -159T153 -195Q153 -206 149 -215T139 -230T127 -238T117 -242L113 -244Z"></path></g></g></g></svg></mjx-container>称为不定积分号,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.769ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2992 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(1900,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2420,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>称为被积表达式,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>称为被积函数,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.294ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 572 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>称为积分变量</p>
<h5 id="6-1-1基本积分公式"><a href="#6-1-1基本积分公式" class="headerlink" title="6.1.1基本积分公式"></a>6.1.1基本积分公式</h5><ol>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.691ex;" xmlns="http://www.w3.org/2000/svg" width="1.38ex" height="2.514ex" role="img" focusable="false" viewBox="0 -805.5 610 1111"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 0.5)"><path data-c="222B" d="M113 -244Q113 -246 119 -251T139 -263T167 -269Q186 -269 199 -260Q220 -247 232 -218T251 -133T262 -15T276 155T297 367Q300 390 305 438T314 512T325 580T340 647T361 703T390 751T428 784T479 804Q481 804 488 804T501 805Q552 802 581 769T610 695Q610 669 594 657T561 645Q542 645 527 658T512 694Q512 705 516 714T526 729T538 737T548 742L552 743Q552 745 545 751T525 762T498 768Q475 768 460 756T434 716T418 652T407 559T398 444T387 300T369 133Q349 -38 337 -102T303 -207Q256 -306 169 -306Q119 -306 87 -272T55 -196Q55 -170 71 -158T104 -146Q123 -146 138 -159T153 -195Q153 -206 149 -215T139 -230T127 -238T117 -242L113 -244Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.624ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 6022 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1041,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1890.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2946.6,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(3467.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4261.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(5262,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g></g></svg></mjx-container></li>
<li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.691ex;" xmlns="http://www.w3.org/2000/svg" width="1.38ex" height="2.514ex" role="img" focusable="false" viewBox="0 -805.5 610 1111"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 0.5)"><path data-c="222B" d="M113 -244Q113 -246 119 -251T139 -263T167 -269Q186 -269 199 -260Q220 -247 232 -218T251 -133T262 -15T276 155T297 367Q300 390 305 438T314 512T325 580T340 647T361 703T390 751T428 784T479 804Q481 804 488 804T501 805Q552 802 581 769T610 695Q610 669 594 657T561 645Q542 645 527 658T512 694Q512 705 516 714T526 729T538 737T548 742L552 743Q552 745 545 751T525 762T498 768Q475 768 460 756T434 716T418 652T407 559T398 444T387 300T369 133Q349 -38 337 -102T303 -207Q256 -306 169 -306Q119 -306 87 -272T55 -196Q55 -170 71 -158T104 -146Q123 -146 138 -159T153 -195Q153 -206 149 -215T139 -230T127 -238T117 -242L113 -244Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="7.256ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 3207.2 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(1059.5,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1579.5,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(2429.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.912ex;" xmlns="http://www.w3.org/2000/svg" width="3.955ex" height="2.869ex" role="img" focusable="false" viewBox="0 -864.9 1748.1 1267.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(697.3,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1350,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="1508.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.442ex" height="1.912ex" role="img" focusable="false" viewBox="0 -833.9 1963.1 844.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1350,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.66ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2943.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1538,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(1982.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2371.7,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="2.106ex" role="img" focusable="false" viewBox="0 -716 778 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2260" d="M166 -215T159 -215T147 -212T141 -204T139 -197Q139 -190 144 -183L306 133H70Q56 140 56 153Q56 168 72 173H327L406 327H72Q56 332 56 347Q56 360 70 367H426Q597 702 602 707Q605 716 618 716Q625 716 630 712T636 703T638 696Q638 692 471 367H707Q722 359 722 347Q722 336 708 328L451 327L371 173H708Q722 163 722 153Q722 140 707 133H351Q175 -210 170 -212Q166 -215 159 -215Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="3.771ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1667 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1278,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li>
</ol>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数分</tag>
      </tags>
  </entry>
</search>
