<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023级E2练习赛</title>
    <url>/tengpaz/2023/09/24/2023%E7%BA%A7E2%E7%BB%83%E4%B9%A0%E8%B5%9B/</url>
    <content><![CDATA[<h1 id="2023级本科新生第二次练习赛习题讲解"><a href="#2023级本科新生第二次练习赛习题讲解" class="headerlink" title="2023级本科新生第二次练习赛习题讲解"></a>2023级本科新生第二次练习赛习题讲解</h1><h2 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h2><ul>
<li>2023&#x2F;10&#x2F;15 sizeof()是操作符不是函数</li>
</ul>
<h2 id="A-坐标系变换"><a href="#A-坐标系变换" class="headerlink" title="A 坐标系变换"></a>A 坐标系变换</h2><hr>
<h3 id="原题如下"><a href="#原题如下" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023E2A.png"
                      alt="E2A"
                ></p>
<h3 id="你需要知道"><a href="#你需要知道" class="headerlink" title="你需要知道"></a>你需要知道</h3><p>本题会用到</p>
<ul>
<li>&lt;math.h&gt;头文件中的<code>cos</code>、<code>sin</code>两个函数  </li>
<li>数学里极坐标的基本知识</li>
<li>标准输出里如何保留小数位数输出浮点数</li>
</ul>
<h3 id="cos-函数-求余弦"><a href="#cos-函数-求余弦" class="headerlink" title="cos()函数-求余弦"></a>cos()函数-求余弦</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型： </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">cos</span><span class="params">(<span class="type">double</span> x)</span>;</span><br></pre></td></tr></table></figure></div>

<p>这里<code>cos</code>前的<code>double</code>表示的是函数的返回值为<code>double</code>双精度实型<br>里面的<code>double x</code>表示这里函数的形式参数是double类型的实数<br>实际运用时，函数名前的<code>double</code>以及参数前的<code>double</code>都不用写，这里只是告诉你函数相关值的类型</p>
<h3 id="sin-函数-求正弦"><a href="#sin-函数-求正弦" class="headerlink" title="sin()函数-求正弦"></a>sin()函数-求正弦</h3><p>同理我们可以推到正弦函数是怎么使用的<br>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">sin</span><span class="params">(<span class="type">double</span> x)</span>;</span><br></pre></td></tr></table></figure></div>
<p>读者可以自行类比</p>
<h3 id="极坐标"><a href="#极坐标" class="headerlink" title="极坐标"></a>极坐标</h3><p>在极坐标中，我们用一个点到极点的距离ρ也即极径和过极点与该点的射线与极轴在逆时针方向所成的角度θ也即极角来描述一个点的位置，不难得到，极坐标转化为直角坐标后表示为(ρcosθ,ρsinθ).<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E6%9E%81%E5%9D%90%E6%A0%87.png"
                      alt="极坐标"
                ></p>
<h3 id="保留小数位数输出浮点数"><a href="#保留小数位数输出浮点数" class="headerlink" title="保留小数位数输出浮点数"></a>保留小数位数输出浮点数</h3><p>来看看如下的输出语句</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%-6.2lf&quot;</span>, x);</span><br></pre></td></tr></table></figure></div>

<p>这个语句中  </p>
<ul>
<li><code>-</code>表示左对齐</li>
<li><code>6</code>表示输出占6个字符</li>
<li><code>2</code>表示保留两位小数<br>如果x&#x3D;3.14123，输出如下</li>
</ul>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>如果去掉<code>6</code>前面的负号<br>输出如下(下面的·表示空格)</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line">··<span class="number">3.14</span></span><br></pre></td></tr></table></figure></div>

<p>注意在使用时不要忘了两个数字中间的<code>.</code>，比如本题我们不需要调整输出的浮点数的对齐方式和占据的字符数，那么就可以把语句写成</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1lf&quot;</span>,x);</span><br></pre></td></tr></table></figure></div>

<p>这个就表示保留一位小数输出浮点数<code>x</code>啦</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> a, b;<span class="comment">//a表示极径，b表示极角</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.1lf %.1lf&quot;</span>, a * <span class="built_in">cos</span>(b), a * <span class="built_in">sin</span>(b));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="B-这里是BUAA-2"><a href="#B-这里是BUAA-2" class="headerlink" title="B 这里是BUAA 2"></a>B 这里是BUAA 2</h2><hr>
<h3 id="原题如下-1"><a href="#原题如下-1" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023E2B.png"
                      alt="E2B"
                ></p>
<h3 id="你需要知道-1"><a href="#你需要知道-1" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>在ASCII码表中，大写字母数值连续，比如<code>&#39;B&#39;</code>比<code>&#39;A&#39;</code>大1</li>
<li>读取多个字符</li>
</ul>
<h3 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h3><p>对于读取的每一个字符，我们可以做一次判断，当读取的字符在<code>&#39;B&#39;</code>和<code>&#39;Z&#39;</code>之间时才需要把字母往前调一位</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里不是最简单的版本，如果你喜欢数组和字符串的话<br>可以给你看看一个非常啰嗦的版本</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span><span class="comment">//引入字符串相关函数的头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">10001</span>];</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    gets(str);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n - <span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i] &gt;= <span class="string">&#x27;B&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;Z&#x27;</span> ? str[i] - <span class="number">1</span> : str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>大佬直接跳，我这里稍作解释</p>
<h3 id="strlen-函数"><a href="#strlen-函数" class="headerlink" title="strlen()函数"></a>strlen()函数</h3><p>头文件：<code>string.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> <span class="title function_">strlen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>size_t</code>表示函数返回字符串的长度,为unsigned int类型<br><code>const char *str</code>是一个形式参数，类型是常量指针，<code>const</code>是<code>constant</code>的缩写，本意为不变的，不可改变的，表明该类指针指向的内存值不可改变<br><code>char *str</code>是一个指向字符串的指针，如果目前没学指针的话，暂时可以理解为<code>char str[]</code>，这里其实说明调用函数传参时传的是地址不是数值<br>这个函数的作用是返回字符串的长度，但需要注意的是，这个函数在取字符串长度时，读取到<code>&#39;\0&#39;</code>时就会停止，最后读取到的长度是第一个字符到第一个<code>&#39;\0&#39;</code>（不包括<code>&#39;\0&#39;</code>）之间的字符串长度  </p>
<p>这里举个例子</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出为<code>6</code><br>再来举几个例子  </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;<span class="comment">//[a b c d e f \0]</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p + <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure></div>

<p>最后一个<code>printf</code>没有打印出来，因为指针p解码后是字符串中的一个字符，而<code>strlen</code>并不能对一个数据求长度  </p>
<p>这里尤其需要与另一个操作符区分一下</p>
<h3 id="sizeof-操作符"><a href="#sizeof-操作符" class="headerlink" title="sizeof()操作符"></a>sizeof()操作符</h3><p>对于同一个合理字符串来说，sizeof操作符返回的字符串长度会包含结尾的<code>&#39;\0&#39;</code>，而strlen不会包含，并且sizeof计算的是整个字符串占据的字节，并不会在<code>&#39;\0&#39;</code>处就此停下<br>来看一个例子  </p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">strlen</span>(p));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="keyword">sizeof</span>(p))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure></div>

<h3 id="gets-函数"><a href="#gets-函数" class="headerlink" title="gets()函数"></a>gets()函数</h3><p>头文件：<code>stdio.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure></div>

<p><code>char *</code>表明返回的是一个指向字符串的指针<br>里面的<code>char *str</code>说明传参时传入的是指向字符串str的地址<br><code>gets</code>函数与<code>scanf</code>函数一样都是输入函数，但是两者还是会有很多差别的  </p>
<ul>
<li><code>scanf</code>读取字符串是以空格作为结束标志的，这就决定了它无法读取完整的含有空格字符的字符串</li>
<li><code>gets</code>也是读取一行字符串，但是它是以回车键作为结束标记的，所以它能读取含有空格字符的字符串</li>
</ul>
<h2 id="C-GYCY的乘法口诀表"><a href="#C-GYCY的乘法口诀表" class="headerlink" title="C GYCY的乘法口诀表"></a>C GYCY的乘法口诀表</h2><hr>
<h3 id="原题如下-2"><a href="#原题如下-2" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2C.png"
                      alt="ACE2C"
                ></p>
<h3 id="你需要知道-2"><a href="#你需要知道-2" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li><code>for</code>循环遍历</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>很明显需要迭代两个<code>for</code>循环进行遍历，这里不多说，直接上代码</p>
<h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= i;j++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d &quot;</span>, i, j, i * j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="D-小亮的圆周率"><a href="#D-小亮的圆周率" class="headerlink" title="D 小亮的圆周率"></a>D 小亮的圆周率</h2><hr>
<h3 id="原题如下-3"><a href="#原题如下-3" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2D.png"
                      alt="ACE2D"
                ></p>
<h3 id="你需要知道-3"><a href="#你需要知道-3" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>各类数据类型及数据表示范围</li>
<li>强制类型转换</li>
<li>如果你想，可以使用<code>fabs</code>函数求两个浮点数之差的绝对值</li>
<li>如果你想练习函数，可以故意把代码搞麻烦点弄两个计算不同公式不同项数值的函数</li>
<li>多个数据输入</li>
<li>保留特定小数位数输出</li>
<li>如果你想，可以使用<code>pow()</code>函数计算次方</li>
</ul>
<h3 id="fabs-函数"><a href="#fabs-函数" class="headerlink" title="fabs()函数"></a><code>fabs()</code>函数</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">fabs</span><span class="params">(<span class="type">double</span> x)</span></span><br></pre></td></tr></table></figure></div>

<p>这个函数可以用来返回<strong>浮点数</strong>x的绝对值，这样我们在做这道题时可以不用比较两个公式计算值的大小关系了<br>不过使用这个函数时要注意，我们看这个函数声明可以发现，传参是有要求的，<code>fabs</code>函数可以用于<code>double</code>、<code>float</code>、<code>long double</code>类型的参数如果你用它来求整数绝对值，最后求得的结果将带上小数<br>如果你以后需要计算某个整数的绝对值，可以选择使用<code>abs()</code>函数，这里就不详细展开了</p>
<h3 id="pow-函数"><a href="#pow-函数" class="headerlink" title="pow()函数"></a><code>pow()</code>函数</h3><p>头文件：<code>math.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">pow</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br></pre></td></tr></table></figure></div>

<p>同样我们看函数声明可以发现，该函数返回值为<code>double</code>类型，传递的参数类型为<code>double</code>类型，计算出的结果是x的y次幂</p>
<h3 id="数据类型及表示范围"><a href="#数据类型及表示范围" class="headerlink" title="数据类型及表示范围"></a>数据类型及表示范围</h3><p>我们仔细观察可以发现，n的取值可以非常大，加上公式中出现的(2n+1)^2^数值将会达到4x10^10^，int能容纳得下吗？我们需要使用long long啦</p>
<ul>
<li>int类型数据所占内存大小为4字节32位，其中一位为符号位，计算机是以二进制储存数据的，我们通过计算可以知道int最大允许的取值为2^31^-1，好的，不够用了</li>
<li>long long类型数据所占内存大小为8字节64位，这就完全够用了</li>
</ul>
<h3 id="保留小数位数"><a href="#保留小数位数" class="headerlink" title="保留小数位数"></a>保留小数位数</h3><p>详见A</p>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>你所需要的最终数据的类型可能与你最初给的数据的类型不同，这时候便需要转换数据的类型了，格式如下<br>(&lt;数据类型&gt;)x<br>这表示把x的数据类型强制转换为括号内的数据类型</p>
<h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里给出的只是正确代码，不是最佳代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">x</span><span class="params">(<span class="type">int</span> j)</span>;</span><br><span class="line"><span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">int</span> j)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= t; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>,<span class="built_in">fabs</span>(x(n)-y(n)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">x</span><span class="params">(<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">        sum+=<span class="built_in">pow</span>(<span class="number">-1</span>,j - <span class="number">1</span>)/(<span class="number">2</span> * j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span>*sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">y</span><span class="params">(<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">        sum+=(<span class="type">double</span>)<span class="number">1</span>/((<span class="type">long</span> <span class="type">long</span>)(<span class="number">2</span> * j - <span class="number">1</span>)*(<span class="number">2</span> * j - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="number">8</span> * sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="E-体能锻炼走廊"><a href="#E-体能锻炼走廊" class="headerlink" title="E 体能锻炼走廊"></a>E 体能锻炼走廊</h2><hr>
<h3 id="原题如下-4"><a href="#原题如下-4" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2E.png"
                      alt="ACE2E"
                ></p>
<h3 id="你需要知道-4"><a href="#你需要知道-4" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>多组多个数据输入</li>
<li>对前次循环进行数值清除</li>
</ul>
<h3 id="多次循环"><a href="#多次循环" class="headerlink" title="多次循环"></a>多次循环</h3><p>当你的同一个变量在多次循环中出现并作为一种判断条件，你就要注意了，如果你清楚地知道你需要用该变量做什么，你就要关注这个变量是否会带着上一轮的数据进入下一轮并作为条件进行判断了，因为这很容易导致逻辑错误而导致结果不如人意，并且这种错误很难被人察觉</p>
<h3 id="分析思路-1"><a href="#分析思路-1" class="headerlink" title="分析思路"></a>分析思路</h3><p>其实思路挺简单，主要就是对条件语句的运用了</p>
<h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里是正确代码，不是最佳代码，不是最简代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, below = <span class="number">0</span>, up = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">            <span class="keyword">if</span>(m &gt;= <span class="number">48</span>)&#123;</span><br><span class="line">                up = m<span class="number">-48</span>;</span><br><span class="line">                <span class="keyword">if</span>(below &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    below += up;</span><br><span class="line">                    <span class="keyword">if</span>(below &gt; <span class="number">0</span>)</span><br><span class="line">                        below = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">                below += m - <span class="number">48</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(below == <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Success\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(below &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Failure %d\n&quot;</span>,-below);</span><br><span class="line">        below = <span class="number">0</span>;<span class="comment">//清除前一轮的数据</span></span><br><span class="line">        up = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="F-Wings-咖啡"><a href="#F-Wings-咖啡" class="headerlink" title="F Wings 咖啡"></a>F Wings 咖啡</h2><hr>
<h3 id="原题如下-5"><a href="#原题如下-5" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2F.png"
                      alt="ACE2F"
                ></p>
<h3 id="你需要知道-5"><a href="#你需要知道-5" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>对于多种极端情况的考虑要求周全</li>
<li>数据范围</li>
<li>如何防止爆栈</li>
<li>全局变量</li>
<li>对数据最大值的求取</li>
</ul>
<h3 id="情况极端"><a href="#情况极端" class="headerlink" title="情况极端"></a>情况极端</h3><ul>
<li>虽然说你可能凭直觉觉得6元肯定是划算的价格，不然就不会把每天用校园卡买的第一杯咖啡定为6元了，但是！！！这是编程题目不是实际情况，咖啡价格确实很有可能小于6元（bushi</li>
<li>虽然说去找卡的那个人大概明白需要多少张卡，但是这也避免不了找到的卡的数量比需要的卡的数量要更多</li>
<li>本人的卡和人头数你算上了吗？</li>
<li>你有注意数据有多大吗？</li>
<li>你有注意需要的数组的长度吗？</li>
</ul>
<h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>之前强调过就不再强调了</p>
<h3 id="爆栈"><a href="#爆栈" class="headerlink" title="爆栈"></a>爆栈</h3><p>c语言的函数调用机制是依靠堆栈来实现的，称为函数调用栈（栈空间），程序中函数的局部变量存放在栈空间中，但是，每一个函数的栈空间有限，Windows系统下通常是2MB，所以，局部数组不能开得太大了！！！<br>像这道题，如果你把一个长度为3000001的int型数组作为局部数组扔那个小小的<code>main</code>函数栈空间里（辛苦你了），后果长啥样应该能知道了叭，这就是爆栈，在Debug中应该是被软件识别为<code>segmantation fault</code>（储存器区块错误），你的程序就运行不了啦  </p>
<p>解决这个问题其实也很简单<br>你放函数里面会爆，我扔函数外面就没事了嘛<br>这就是我们接下来要讲的-全局变量</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>我们之前提到了，函数里边定义的变量其实是局部变量，为什么叫局部呢，因为这个变量的生命周期，是随着函数的调用与结束而开始和终结的，也就是说，你函数一用完，这变量就没了<br>而全局函数不同的是，它是定义在整个程序中而不是某个函数中的，也就是说，它的生命周期随这个程序的运行情况而定，只有当程序运行完后，变量才会“死亡”<br>并且，理论上讲，全局变量能使用的空间是无限的（当然得要小于你电脑的内存啦awww），所以你可以放心大胆得开你的超长数组。。。</p>
<h3 id="最大值的求取"><a href="#最大值的求取" class="headerlink" title="最大值的求取"></a>最大值的求取</h3><p>其实在c语言里有这个函数的文件的，但这个函数的头文件叫<code>algorithm</code>，如果你用的编译软件是VScode，这个软件可能找不到这个文件的位置，需要你进行配置，这里就不展开说明啦<br>所以就别躲了，上循环硬刚叭  </p>
<p>本题需要的不仅仅是最大值，而是最大的m+1个值，所以我们可以在每循环一次求得了最大值后，选择把最大值处理掉，使上一个最大值不再影响第二次最大值的求取</p>
<h3 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h3><p>这不是最优的，但是是正确的</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">3000001</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,max,num;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;<span class="comment">//sum的数值后期非常大</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    num = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= <span class="number">6</span>)&#123;<span class="comment">//算出咖啡价格大于6的人头数</span></span><br><span class="line">            n--;</span><br><span class="line">            sum += a[i];</span><br><span class="line">            a[i] = <span class="number">0</span>;<span class="comment">//把数值清零，后面就不会重复加和了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m &gt;= n)&#123;</span><br><span class="line">        sum += <span class="number">6</span> * (n+<span class="number">1</span>);<span class="comment">//卡足够，全部置为6</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m + <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>||a[max] &lt; a[i])&#123;<span class="comment">//取最大值</span></span><br><span class="line">                    max = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[max] = <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)&#123;</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="G-某咸鱼与投资"><a href="#G-某咸鱼与投资" class="headerlink" title="G 某咸鱼与投资"></a>G 某咸鱼与投资</h2><hr>
<h3 id="原题如下-6"><a href="#原题如下-6" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2G.png"
                      alt="ACE2G"
                ></p>
<h3 id="你需要知道-6"><a href="#你需要知道-6" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>输出数字的前导零</li>
<li>字符串相等的判断-<code>strcmp()</code>函数</li>
<li>你知道闰年的规则嘛</li>
</ul>
<h3 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a><code>strcmp()</code>函数</h3><p>头文件：<code>string.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span>;</span><br></pre></td></tr></table></figure></div>

<p>从声明中我们可以知道，这个函数返回一个int型整数值，传参为两个指向字符串的常量指针  </p>
<p>返回值的规则如下  </p>
<ul>
<li>如果<code>str1 &gt; str2</code>，返回正数</li>
<li>如果<code>str1 = str2</code>，返回0</li>
<li>如果<code>str1 &lt; str2</code>，返回负数</li>
</ul>
<p>其中，两个字符串比较时从第一个字符开始比较，如果相同则比较下一个  </p>
<ul>
<li>遇到不同的字符，排在字母表前面的字符小于排在后面的（可以认为是比较字符的ASCII码）</li>
<li>如果两个字符串所有字符都相同，则二者相等</li>
<li>如果一个字符串提前结束，那么一定是长的那个字符串大于短的那个字符串</li>
</ul>
<h3 id="输出前导零"><a href="#输出前导零" class="headerlink" title="输出前导零"></a>输出前导零</h3><p>比如<code>%0md</code>，表示以整型输出时在数字前补充前导零，使其总位数为m位，m也即<strong>位宽</strong></p>
<h3 id="闰年"><a href="#闰年" class="headerlink" title="闰年"></a>闰年</h3><p>对于闰年来说，它能整除4且不能被100整除，或者它能整除400，则这个年为闰年</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实主要就是需要判断2月的天数，大月小月判断，以及延期是早于时间点还是晚于时间点，这些用普通条件语句可以解决啦<br>看代码实现叭</p>
<h3 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h3><p>这是正确的，不是最好的</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">runnian</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//判断是否为闰年的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ifdelay</span><span class="params">(<span class="type">char</span>*, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)</span>;<span class="comment">//判断延期类型的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">monthdays</span><span class="params">(<span class="type">int</span>)</span>;<span class="comment">//判断月的天数的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">after</span><span class="params">(<span class="type">char</span>*)</span>;<span class="comment">//日期后移的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">()</span>;<span class="comment">//输出函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a;<span class="comment">//闰年情况，全局变量</span></span><br><span class="line"><span class="type">char</span> mon[] = <span class="string">&quot;Mon&quot;</span>, tue[] = <span class="string">&quot;Tue&quot;</span>, wed[] = <span class="string">&quot;Wed&quot;</span>, thu[] = <span class="string">&quot;Thu&quot;</span>, fri[] = <span class="string">&quot;Fri&quot;</span>, sat[] = <span class="string">&quot;Sat&quot;</span>, sun[] = <span class="string">&quot;Sun&quot;</span>;</span><br><span class="line"><span class="type">int</span> year, month, day, hour, minute, second;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> litter;<span class="comment">//吞掉空格，或者你也可以在输入代码后面做改动</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d/%d/%d %d:%d:%d&quot;</span>, &amp;year, &amp;month, &amp;day, &amp;hour, &amp;minute, &amp;second);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;litter);<span class="comment">//清除空格</span></span><br><span class="line">    <span class="type">char</span> date[<span class="number">4</span>];<span class="comment">//日期，注意把字符串结束符括进去</span></span><br><span class="line">    gets(date);</span><br><span class="line">    <span class="comment">//判断闰年</span></span><br><span class="line">    runnian(year);</span><br><span class="line">    <span class="comment">//延期情况分类</span></span><br><span class="line">    <span class="keyword">if</span>(ifdelay(date, hour, minute, second))&#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ifdelay(date, hour, minute, second) == <span class="number">0</span>)&#123;<span class="comment">//延期</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, sat) == <span class="number">0</span>)&#123;<span class="comment">//周六</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">2</span>)&#123;</span><br><span class="line">                day += <span class="number">2</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = day + <span class="number">2</span> - monthdays(month);</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = day + <span class="number">2</span> - monthdays(month);</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, sun) == <span class="number">0</span>)&#123;<span class="comment">//周日</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">1</span>)&#123;</span><br><span class="line">                day++;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(date, fri) != <span class="number">0</span>)&#123;<span class="comment">//周一到周四</span></span><br><span class="line">            after(date);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">1</span>)&#123;</span><br><span class="line">                day++;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = <span class="number">1</span>;</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//周五</span></span><br><span class="line">            <span class="built_in">strcpy</span>(date,mon);</span><br><span class="line">            <span class="keyword">if</span>(day &lt;= monthdays(month) - <span class="number">3</span>)&#123;</span><br><span class="line">                day += <span class="number">3</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(month != <span class="number">12</span>)&#123;</span><br><span class="line">                month ++;</span><br><span class="line">                day = day + <span class="number">3</span> - monthdays(month);</span><br><span class="line">                print();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                year++;</span><br><span class="line">                day = day + <span class="number">3</span> - monthdays(month);</span><br><span class="line">                month = <span class="number">1</span>;</span><br><span class="line">                print();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">//前类延期</span></span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闰年函数定义</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">runnian</span><span class="params">(<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        a = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        a = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延期判断</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ifdelay</span><span class="params">(<span class="type">char</span>* str, <span class="type">int</span> h, <span class="type">int</span> m, <span class="type">int</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,sat) == <span class="number">0</span> || <span class="built_in">strcmp</span>(str,sun) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//后移</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((h &gt;= <span class="number">9</span> &amp;&amp; h &lt;= <span class="number">14</span>) || (h == <span class="number">15</span> &amp;&amp; m == <span class="number">0</span> &amp;&amp; s == <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//不延期</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(h &lt; <span class="number">9</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//前类</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//后类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//月天数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">monthdays</span><span class="params">(<span class="type">int</span> m)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span> || m == <span class="number">3</span> || m == <span class="number">5</span> || m == <span class="number">7</span> || m == <span class="number">8</span> || m == <span class="number">10</span> || m == <span class="number">12</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">29</span> : <span class="number">28</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//日期后移</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">after</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,mon) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,tue);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,tue) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,wed);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(str,wed) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,thu);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(str,fri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d/%02d/%02d&quot;</span>, year, month, day);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="H-摩卡背单词"><a href="#H-摩卡背单词" class="headerlink" title="H 摩卡背单词"></a>H 摩卡背单词</h2><hr>
<h3 id="原题如下-7"><a href="#原题如下-7" class="headerlink" title="原题如下"></a>原题如下</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/2023ACE2H.png"
                      alt="ACE2H"
                ></p>
<h3 id="你需要知道-7"><a href="#你需要知道-7" class="headerlink" title="你需要知道"></a>你需要知道</h3><ul>
<li>对于重复字符的判断转化为数字确实会容易很多，因为数字是计算机可以直接识别的整体，而字符串计算机无法直接判断是否相同</li>
<li>输入的东西在计算机里的储存方式</li>
<li>如何清除掉换行符</li>
</ul>
<h3 id="字符转化为数字"><a href="#字符转化为数字" class="headerlink" title="字符转化为数字"></a>字符转化为数字</h3><p>如何把字符串翻译成数字呢？</p>
<p>用<strong>ASCII码</strong></p>
<p>为了不保证字符位置的改变造成的数字重复，同时也保证数字不要过于大，我们可以把不同位置的字符减去一个合理的相同的数字后分别乘以一个不同的数来转化为数字</p>
<p>比如说moca</p>
<p>可以把每个字符先减97</p>
<p>第一个字符乘1000000</p>
<p>第二个字符乘10000</p>
<p>第三个字符乘100</p>
<p>最后一个不乘</p>
<p>结果加和就是我们翻译出来的数字啦嘿</p>
<h3 id="输入的东西在计算机里是如何储存的"><a href="#输入的东西在计算机里是如何储存的" class="headerlink" title="输入的东西在计算机里是如何储存的"></a>输入的东西在计算机里是如何储存的</h3><p>比如我们按照题目示例那样，在第一行输入一个6后按回车键，那么这一输入在计算机里储存实际上大概长这样</p>
<p><code>[6|\n]</code></p>
<p>此时如果你没有处理掉<strong>回车键</strong></p>
<p>你就可能在后面读取字符时把回车键一起读取进去，导致答案错误</p>
<h3 id="处理掉回车键换行符"><a href="#处理掉回车键换行符" class="headerlink" title="处理掉回车键换行符"></a>处理掉回车键换行符</h3><p>我们可以使用<code>getchar()</code>函数，因为这个函数读取字符只读取一个，也就是说，它只会读取到<code>\n</code>，从而可以很好地解决到行尾换行符回车键的问题</p>
<h3 id="getchar-函数"><a href="#getchar-函数" class="headerlink" title="getchar()函数"></a><code>getchar()</code>函数</h3><p>头文件：<code>stdio.h</code><br>语法&#x2F;原型：</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure></div>

<p>我们来看这个函数的声明，不难发现，<code>getchar</code>返回值是字符的<code>ASCII</code>码</p>
<p><code>getchar</code>用于读取单个字符，如果此时<strong>缓存区</strong>（如果不清楚就暂且把它理解为暂时储存你输入的东西的地方）中有多个字符，那么<code>getchar</code>读取的就是上一次读取的最后一个字符的后一个字符</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>既然我们已经可以把字符串转化为数字了，那我们就可以用数组来判断是否重复的问题</p>
<p>比如如果39出现过了，我们就可以把数组的第39个元素设为1，其他位置的数据在刚开始时全部设为0，这样再次遇见39时，我们只要判断该数组的第39个元素是否为1即可</p>
<h3 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h3><p>这不是最优代码，但是是正确代码</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[<span class="number">26262627</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> m;</span><br><span class="line">    <span class="type">char</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        getchar();<span class="comment">//清除换行符</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        m = (a - <span class="number">97</span>) * <span class="number">1000000</span> + (b - <span class="number">97</span>) * <span class="number">10000</span> + (c - <span class="number">97</span>) * <span class="number">100</span> + d;<span class="comment">//翻译为数字</span></span><br><span class="line">        <span class="keyword">if</span> (x[m] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca has already memorized this word!\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            x[m] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca memorized a new word!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>最小内存版本</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">readBit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> bit,<span class="type">char</span> *<span class="built_in">array</span>)</span>&#123;<span class="comment">//读取字节</span></span><br><span class="line">    <span class="type">int</span> shift = <span class="number">7</span> - (bit % <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> ((<span class="built_in">array</span>[bit / <span class="number">8</span> ]&gt;&gt;shift)&amp;<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeBit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> bit,<span class="type">int</span> value,<span class="type">char</span>*<span class="built_in">array</span>)</span>&#123;<span class="comment">//压缩字节</span></span><br><span class="line">    <span class="keyword">if</span>(readBit(bit,<span class="built_in">array</span>)==value)&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">array</span>[bit/<span class="number">8</span>] ^= (<span class="number">128</span>&gt;&gt; (bit % <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样可以做到把一个数字压缩为一个bit储存于数组内存的不同位中，达到减小内存的目的</span></span><br><span class="line"><span class="type">char</span> wordBank[<span class="number">57122</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> n,position;</span><br><span class="line">    <span class="type">char</span> a, b, c, d;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>, &amp;a, &amp;b, &amp;c, &amp;d);</span><br><span class="line">        position = (a - <span class="string">&#x27;a&#x27;</span>)*<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span> + (b - <span class="string">&#x27;a&#x27;</span>) *<span class="number">26</span>*<span class="number">26</span>  + (c - <span class="string">&#x27;a&#x27;</span>) * <span class="number">26</span> + d-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (readBit(position,wordBank)) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca has already memorized this word!\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            writeBit(position,<span class="number">1</span>,wordBank);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Moca memorized a new word!\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="I-规则的形"><a href="#I-规则的形" class="headerlink" title="I 规则的形"></a>I 规则的形</h2><hr>
<p><strong>待更新哦</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>练习题</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/tengpaz/2023/10/07/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>这里所有笔记都是个人整理的，有参考等会列出，有误区会后期改正欢迎指出</p>
<h1 id="语言基础简介"><a href="#语言基础简介" class="headerlink" title="语言基础简介"></a>语言基础简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><input disabled="" type="checkbox"> C语言程序开发步骤</li>
<li><input disabled="" type="checkbox"> 数据表示</li>
<li><input disabled="" type="checkbox"> 数据处理与储存<ul>
<li>编码</li>
<li>进制</li>
<li>储存</li>
<li>浮点数的表达与储存</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 运算<ul>
<li>关系运算</li>
<li>算术运算</li>
<li>逻辑运算</li>
<li>位运算</li>
<li>复合赋值运算</li>
<li>自增自减运算</li>
<li>运算优先级</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 控制结构<ul>
<li>选择结构</li>
<li>循环结构</li>
<li>goto语句</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 函数<ul>
<li>定义与调用</li>
<li>参数传递原理</li>
<li>递归函数</li>
<li>标准库函数</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之数组<ul>
<li>一维数组</li>
<li>二维数组</li>
<li>变长数组</li>
<li>多维数组</li>
<li>字符型数组与字符串</li>
<li>标准字符串strings处理函数</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之指针<ul>
<li>什么是指针</li>
<li>指针变量</li>
<li>指针运算</li>
<li>空指针</li>
<li>字符串指针</li>
<li>数组指针</li>
<li>多重指针</li>
<li>指针数组</li>
<li>函数指针</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之结构体</li>
<li><input disabled="" type="checkbox"> 复杂数据类型之联合体</li>
<li><input disabled="" type="checkbox"> 文件<br><strong>待更新</strong></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>语言基础</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>语言基础</tag>
        <tag>编译语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Geany</title>
    <url>/tengpaz/2023/10/07/Geany/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Git剖析</title>
    <url>/tengpaz/2024/07/29/Git%E5%89%96%E6%9E%90/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><p>对于Git怎么传输数据，官方文档给了两种不同的处理方式，分别是”哑<code>(dump)</code>“协议和”智能<code>(smart)</code>协议.</p>
<h3 id="哑协议"><a href="#哑协议" class="headerlink" title="哑协议"></a>哑协议</h3><p>如果架设的仓库是一个基于HTTP协议的<strong>只读</strong>版本库,注意是<strong>只读</strong>.一般而言这种情况下使用的就是哑协议,它不允许客户端向服务端传输数据,可能这也是为什么会称为”哑”(不过具体是怎么命名的请另外深入了解).</p>
<p>对于基于HTTP协议的一个版本库来说,如果我们使用<code>git clone</code>抓取仓库信息,那么就涉及到哑协议,具体实现过程如下:</p>
<p>首先是我们使用了指令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git clone http://server/repo-progit.git</span><br></pre></td></tr></table></figure></div>

<p>这里的<code>server</code>指的是<strong>服务器</strong>,<code>repo</code>指的是<strong>仓库名</strong>.</p>
<p>输入指令后第一件事是拉取<code>info/refs</code>文件.这个文件是通过<code>update-server-info</code>生成的,于是乎相当于经历了一下过程:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET info/refs</span><br><span class="line">xxxxxxxxxxxxxxx(一堆编号)       refs/heads/master</span><br></pre></td></tr></table></figure></div>

<p>这样就获取了一个远程引用和<code>SHA-1</code>值的列表,接下来要确定HEAD引用的是什么,由此来确定完成后被检出到工作目录里的内容.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure></div>

<p>这说明在抓取完成后应该检出<code>master</code>分支,然后开始遍历处理,然后由于是从之前获取的<code>xxxxx</code>对象开始的,所以首先获取它:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">=&gt; GET objects/xx/xxx</span><br><span class="line">([number] bytes of binary data)</span><br></pre></td></tr></table></figure></div>

<p>然后就取得了一个服务器上保存的<strong>对象</strong>,这是使用静态<code>HTTP GET</code>请求获取的,然后可以<code>zlib</code>解压它</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实现网站邮箱爬取</title>
    <url>/tengpaz/2023/10/08/Python%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E9%82%AE%E7%AE%B1%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<h1 id="网络爬虫之邮箱爬取"><a href="#网络爬虫之邮箱爬取" class="headerlink" title="网络爬虫之邮箱爬取"></a>网络爬虫之邮箱爬取</h1><h2 id="第一步-编程环境准备"><a href="#第一步-编程环境准备" class="headerlink" title="第一步 编程环境准备"></a>第一步 编程环境准备</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="Python的安装"><a href="#Python的安装" class="headerlink" title="Python的安装"></a>Python的安装</h4><h5 id="检查你的系统是否安装了Python"><a href="#检查你的系统是否安装了Python" class="headerlink" title="检查你的系统是否安装了Python"></a>检查你的系统是否安装了Python</h5><p>在开始菜单中搜索cmd打开命令提示符，或者按住Shift并右击桌面选择<strong>在终端中打开</strong></p>
<p>在终端窗口中输入<code>python</code>并按下回车键Enter</p>
<ul>
<li>如果出现了Python提示符<code>&gt;&gt;&gt;</code>，就说明你的系统安装了Python</li>
<li>如果看到一条错误信息说<strong>python是无法识别的指令</strong>那么就说明你的系统里还没有安装Python</li>
</ul>
<h5 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h5><p>有些Windows系统中不会默认安装Python，比如我的。。。所以你需要安装Python</p>
<p>这是python官网的连接：<a class="link"   href="https://www.python.org/" >https://www.python.org/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>因为我使用的是windows11，所以对于win7以及更早的版本没有什么很好的建议，如果你是这一类的用户，可以参见官网的指导</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/python.png"
                      alt="python官网"
                ></p>
<p>直接点击<strong>python 3.12.0</strong>下载最新版即可，如果由于文章未更新而最新版本信息未匹配，请下载官网提供的最新版即可</p>
<p>运行安装程序时，请勾选<strong>Add Python to PATH</strong>，否则你的配置会麻烦许多</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="Python的安装-1"><a href="#Python的安装-1" class="headerlink" title="Python的安装"></a>Python的安装</h4><p>Linux系统是专门为编程而设计的，在绝大多数Linux系统中都默认安装了Python，所以你基本不需要安装什么软件或修改什么设置</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> getopt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数，传入用户输入的参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start</span>(<span class="params">argv</span>):</span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    pages = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-h 帮助信息;\n&quot;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="comment">#定义异常处理</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        banner()</span><br><span class="line">        opts,args = getopt.getopt(argv,<span class="string">&quot;-u:-p:-h&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> getopt.GetoptError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error an argument!&#x27;</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">for</span> opt,arg <span class="keyword">in</span> opts:</span><br><span class="line">        <span class="keyword">if</span> opt == <span class="string">&quot;-u&quot;</span>:</span><br><span class="line">            url = arg</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="string">&quot;-p&quot;</span>:</span><br><span class="line">            pages = arg</span><br><span class="line">        <span class="keyword">elif</span> opt == <span class="string">&quot;-h&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(usage())</span><br><span class="line"></span><br><span class="line">    launcher(url,pages)</span><br><span class="line"></span><br><span class="line"><span class="comment">#banner信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">banner</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\033[0;31;42m 爬虫不控频,亲人两行泪 \033[0m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用规则</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">usage</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-h: --help 帮助;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-u: --url 域名;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-p: --pages 页数;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;eg: python -u &quot;www.baidu.com&quot; -p 100&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#漏洞回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launcher</span>(<span class="params">url,pages</span>):   <span class="comment">#调用bing_search()和baidu_search()函数并且将bing爬到的和baidu爬到的合并去重</span></span><br><span class="line">    email_num = []</span><br><span class="line">    key_words = [<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;mailbox&#x27;</span>,<span class="string">&#x27;邮件&#x27;</span>,<span class="string">&#x27;邮箱&#x27;</span>,<span class="string">&#x27;postbox&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">int</span>(pages)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> key_word <span class="keyword">in</span> key_words:</span><br><span class="line">            bing_emails = bing_search(url,page,key_word)</span><br><span class="line">            baidu_emails = baidu_search(url,page,key_word)</span><br><span class="line">            sum_emails = bing_emails + baidu_emails</span><br><span class="line">            <span class="keyword">for</span> email <span class="keyword">in</span> sum_emails:</span><br><span class="line">                <span class="keyword">if</span> email <span class="keyword">in</span> email_num:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(email)</span><br><span class="line">                    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                        f.write(email + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    email_num.append(email)</span><br><span class="line"></span><br><span class="line"><span class="comment">#bingSearch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bing_search</span>(<span class="params">url,page,key_word</span>): <span class="comment">#绕过Bing搜索引擎反爬(校验referer和cookie)</span></span><br><span class="line">    referer = <span class="string">&quot;http://cn.bing.com/search?q=email+site%3abaidu.com&amp;qs=n&amp;sp=-1&amp;pq=emailsite%3abaidu.com&amp;first=1&amp;FORM=PERE1&quot;</span></span><br><span class="line">    conn = requests.session()</span><br><span class="line">    bing_url = <span class="string">&quot;https://cn.bing.com/search?q=&quot;</span>+key_word+<span class="string">&quot;site%3a&quot;</span>+url+<span class="string">&quot;&amp;qs=n&amp;sp=-1&amp;pq=&quot;</span>+key_word+<span class="string">&quot;site%3a&quot;</span>+url+<span class="string">&quot;&amp;first=&quot;</span>+<span class="built_in">str</span>((page-<span class="number">1</span>)*<span class="number">10</span>)+<span class="string">&quot;&amp;FORM=PERE1&quot;</span></span><br><span class="line">    conn.get(<span class="string">&#x27;http://cn.bing.com&#x27;</span>,headers=headers(referer))</span><br><span class="line">    r = conn.get(bing_url,stream=<span class="literal">True</span>,headers=headers(referer),timeout=<span class="number">8</span>)</span><br><span class="line">    emails = search_email(r.text)</span><br><span class="line">    <span class="keyword">return</span> emails</span><br><span class="line"></span><br><span class="line"><span class="comment">#baiduSearch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu_search</span>(<span class="params">url,page,key_word</span>):   <span class="comment">#绕过百度搜索引擎的反爬(JS请求链)</span></span><br><span class="line">    email_list = []</span><br><span class="line">    emails = []</span><br><span class="line">    referer = <span class="string">&quot;https://www.baidu.com/s?wd=email+site%3Abaidu.com&amp;pn=1&quot;</span></span><br><span class="line">    baidu_url = <span class="string">&quot;https://www.baidu.com/s?wd=&quot;</span>+key_word+<span class="string">&quot;+site%3A&quot;</span>+url+<span class="string">&quot;&amp;pn=&quot;</span>+<span class="built_in">str</span>((page-<span class="number">1</span>)*<span class="number">10</span>)</span><br><span class="line">    conn = requests.session()</span><br><span class="line">    conn.get(referer,headers=headers(referer))</span><br><span class="line">    r = conn.get(baidu_url, headers=headers(referer))</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    tagh3 = soup.find_all(<span class="string">&#x27;h3&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> h3 <span class="keyword">in</span> tagh3:</span><br><span class="line">        href = h3.find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.get(href, headers=headers(referer),timeout=<span class="number">8</span>)</span><br><span class="line">            emails = search_email(r.text)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">for</span> email <span class="keyword">in</span> emails:</span><br><span class="line">            email_list.append(email)</span><br><span class="line">    <span class="keyword">return</span> email_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_email</span>(<span class="params">html</span>):</span><br><span class="line">    emails = re.findall(<span class="string">r&quot;[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+&quot;</span>,html,re.I)  <span class="comment">#正则表达式获取邮箱号码</span></span><br><span class="line">    <span class="keyword">return</span> emails</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">headers</span>(<span class="params">referer</span>):</span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Language&#x27;</span>:<span class="string">&#x27;en-US,en;q=0.5&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Accept-Encoding&#x27;</span>:<span class="string">&#x27;gzip,deflate&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;Referer&#x27;</span>:referer&#125;</span><br><span class="line">    <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#定义异常</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        start(sys.argv[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;interrupted by user,killing all threads...&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudio2022-C/C++语言环境配置</title>
    <url>/tengpaz/2023/10/08/VisualStudio2022-C-C-%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>这个软件的C语言环境配置还是很容易的，难就难在，不同电脑的状况不太一样，总有一些电脑的环境等等会出一些问题，所以这里想对我已经发现的一些问题提出我的解决方案，方法不唯一，能用就行。</p>
<h2 id="第一步-下载-Visual-Studio-2022-的安装软件"><a href="#第一步-下载-Visual-Studio-2022-的安装软件" class="headerlink" title="第一步 下载 Visual Studio 2022 的安装软件"></a>第一步 下载 Visual Studio 2022 的安装软件</h2><h3 id="直接冲向官网"><a href="#直接冲向官网" class="headerlink" title="直接冲向官网"></a>直接冲向官网</h3><p>这是<a class="link"   href="https://visualstudio.microsoft.com/zh-hans/vs/" >Visual Studio 2022 官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>的连接，直接点击进入即可</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vs.png"
                      alt="Visual Studio 2022 官网"
                ></p>
<p>点击导航栏上的下载进入下载页面</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsdownload.png"
                      alt="下载界面"
                ></p>
<p>如果你没有特殊需求，选择下载社区版，毕竟那是免费的</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscommunity.png"
                      alt="下载community"
                ></p>
<p>没说错的话，下载的目前只是一个安装程序Visual Studio Installer</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsinstaller.png"
                      alt="vs"
                ></p>
<h2 id="第二步-下载-Visual-Studio-Community-2022"><a href="#第二步-下载-Visual-Studio-Community-2022" class="headerlink" title="第二步 下载 Visual Studio Community 2022"></a>第二步 下载 Visual Studio Community 2022</h2><p>一般Visual Studio Installer下载完在桌面上不会存在快捷方式，此时你可以打开开始菜单搜索这个东西的名字，找到它（如果你下载成功了的话）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsinstaller2.png"
                      alt="vsinstaller"
                ></p>
<p>打开它</p>
<p>选择下载 Visual Studio Community 2022</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscommunityinstall.png"
                      alt="vscommunityinstall"
                ></p>
<p>后面会让你选择要安装的工作负荷，请勾选 <strong>Desktop development with C++</strong> 或中文 <strong>使用C++的桌面开发</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/packages.png"
                      alt="工作负荷"
                ></p>
<p>关注一下右侧的<strong>安装详细信息</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/installdetails.png"
                      alt="安装详细信息"
                ></p>
<ul>
<li>如果使用的是<strong>Win11</strong>，看看有没有下载<strong>MSVC v143 -VS 2022 C++ x64&#x2F;x86 生成工具</strong> 和 <strong>Windows 11 SDK</strong></li>
<li>如果使用的是<strong>Win10</strong>，看看有没有下载<strong>MSVC v143 -VS 2022 C++ x64&#x2F;x86 生成工具</strong> 和 <strong>Windows 10 SDK</strong></li>
</ul>
<p>请不要为了省空间不安装，因为这两个包会直接决定你的程序能否在<strong>不更改库路径和源路径和配置</strong>的情况下编写运行C&#x2F;C++程序，如果你真的不小心没有安装或安装出现了失误，我在文章的末尾给了解决方案，你可以去看看能不能帮到你，实在不能解决，重新下载来一遍会是一个不错的选择。</p>
<p>弄完上面的东西后点击<strong>安装</strong></p>
<h3 id="更改安装位置（可选-有点点文件处理能力的都可以考虑）"><a href="#更改安装位置（可选-有点点文件处理能力的都可以考虑）" class="headerlink" title="更改安装位置（可选|有点点文件处理能力的都可以考虑）"></a>更改安装位置（可选|有点点文件处理能力的都可以考虑）</h3><p>安装时也可以选择把软件安装到C盘外的其他盘中，因为这个编辑器实在是太占内存了呜呜呜<br>但是有些软件默认的重要文件还是会安装在C盘默认的目录里，让它去便是</p>
<h2 id="第三步-配置C语言开发环境"><a href="#第三步-配置C语言开发环境" class="headerlink" title="第三步 配置C语言开发环境"></a>第三步 配置C语言开发环境</h2><p>其实实际上只是教你如何创建一个C语言文件项目而已，因为环境啥的在之前的下载安装软件的过程中已经帮你自动配置好了，所以我说这个软件环境配置还是很容易的，当然，这是在你电脑没出什么问题的情况下，比如我神奇的电脑就出了基本市面上能出现的所有问题awwwwwwww</p>
<p>打开软件，如果你找不到软件，可以到开始菜单里搜索</p>
<p>打开后的界面应该大致长成这样</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsstart.png"
                      alt="vsstart"
                ></p>
<h3 id="创建你的C-C-项目"><a href="#创建你的C-C-项目" class="headerlink" title="创建你的C&#x2F;C++项目"></a>创建你的C&#x2F;C++项目</h3><p>点击<strong>创建新项目</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vsstartaproject.png"
                      alt="make a new project"
                ></p>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>编辑器</category>
        <category>VisualStdio2022</category>
        <category>开发环境配置</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>环境配置</tag>
        <tag>VisualStdio2022</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo&amp;github pages建站指南</title>
    <url>/tengpaz/2023/10/01/hexo&amp;github%20pages%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>我也是刚开始搭博客没多久，路上遇到了挺多问题，自己曾尝试一个人debug，但是最后没有完全解决所有问题，感谢很多学长耐心的帮助，得以搭建成这个博客，这里把我所知道的相关教程和经验分享给你们，希望你们能少走一些弯路，谢谢阅读！</p>
<p>有很多内容是直接搬自Hexo官方文档，所以也可以参照官网操作后遇到特殊情况再来看噢</p>
<h1 id="Hexo-Github-pages-搭建个人博客指北"><a href="#Hexo-Github-pages-搭建个人博客指北" class="headerlink" title="Hexo &amp; Github pages 搭建个人博客指北"></a>Hexo &amp; Github pages 搭建个人博客指北</h1><p>中间如果遇到问题可以直接评论或联系我询问噢，我能帮一定会帮</p>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="第一步-下载Node-js"><a href="#第一步-下载Node-js" class="headerlink" title="第一步 下载Node.js"></a>第一步 下载<strong>Node.js</strong></h3><p>建站过程中需要用到<strong>npm</strong>[^1]的指令下载相关代码包</p>
<p>[^1]: <strong>npm</strong>全称为<strong>Node Package Manager</strong>，看名字就大概可以猜到它的用途了，npm是基于<strong>Node.js</strong>的一个代码包的库，如果没有npm，而我们又需要一些Node.js的拓展代码来完成一些特殊任务，就需要到代码所在的相应网站去下载，问题是，如果我们需要很多代码包，它们都分处不同的网站，那么这时候去挨个访问网站去下载代码就会非常麻烦了，npm就是为了解决这个问题而出现的，npm为那些代码的开发者提供了一个平台，使得代码可以被发布到npm上，使用者可以直接通过npm下载相应的代码，而不需要另外拜访相应网站去下载了。</p>
<p>既然这是一个基于Node.js的工具，它的下载是伴随Node.js的，所以这里需要下载Node.js来支持网站搭建</p>
<p><a class="link"   href="https://nodejs.org/en" >Node.js下载官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这里不必下载最新版，下载推荐的版本即可</p>
<p>下载要注意勾选<code>Add to PATH</code>的选项</p>
<h3 id="第二步-下载Git"><a href="#第二步-下载Git" class="headerlink" title="第二步 下载Git"></a>第二步 下载<strong>Git</strong></h3><p>Git是一个代码版本管理器，详细可以参见搜索引擎或后期发表的文章</p>
<p><a class="link"   href="https://git-scm.com/download/win" >Windows系统Git下载官方网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>这个网站由于是外国网站，可能你会无法正常访问，所以你也可以通过<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/"><strong>淘宝 Git for Windows 镜像</strong></a>下载Git安装包，下载最新版即可，在本文发布时最新版为**v2.42.0.windows.2&#x2F;**，你可以在网站里找找</p>
<h3 id="第三步-安装Hexo"><a href="#第三步-安装Hexo" class="headerlink" title="第三步 安装Hexo"></a>第三步 安装Hexo</h3><p>请确认已经成功安装了上面两个东西，再来执行这一步</p>
<h4 id="使用npm安装Hexo"><a href="#使用npm安装Hexo" class="headerlink" title="使用npm安装Hexo"></a>使用npm安装Hexo</h4><p>在系统开始栏搜索打开cmd</p>
<p>输入以下指令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></div>

<h3 id="第四步-建站"><a href="#第四步-建站" class="headerlink" title="第四步 建站"></a>第四步 建站</h3><p>这里需要建一个放你网站文件的文件夹</p>
<p>请找到你想把文件夹放在的地方，比如你想放到D盘的话，你就需要在cmd中先输入<code>D:</code>，然后输入以下指令</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></div>

<ul>
<li>这里的<code>&lt;folder&gt;</code>是你想建的文件夹的名字，建议用英文</li>
<li><code>cd &lt;folder&gt;</code>表示在终端中切换到你的博客文件夹中进行操作</li>
<li><code>npm install</code>表示在选中的文件夹里安装npm相关的文件</li>
</ul>
<p>新建完成后，你选定的文件夹目录应该如下：</p>
<ul>
<li>_config.yml</li>
<li>package.json</li>
<li>scaffolds</li>
<li>source<ul>
<li>_drafts</li>
<li>_posts</li>
</ul>
</li>
<li>themes</li>
</ul>
<p>下面介绍各文件或文件夹的作用</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>该文件储存的是网站的配置信息，在其中可以配置大部分的参数，后期在应用主题后，还会有单独的主题配置文件，用于针对主题内容进行配置。</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>这里储存应用程序的信息，其中像<code>EJS</code>,<code>Stylus</code>和<code>Markdown渲染引擎</code>已经默认安装，可以后期被移除</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>其中<code>dependencies</code>中列出的就是已经安装好的应用程序</p>
<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>储存文件模板的文件夹，在新建文章、页面、草稿时，Hexo会根据相对应的模板生成一个带有模板内容的文件</p>
<p>比如通过修改文件夹中<code>post.md</code>中的<code>Front-matter</code>的内容，那么这个修改将应用于以后所有生成的<code>post</code>文件中</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹，用来存放用户资源的地方，除了<code>_posts</code>文件夹外，其它所有开头名为<code>_</code>的文件和文件夹及隐藏的文件都会被忽略</p>
<p>其中<code>Markdown</code>和<code>HTML</code>文件会被解析放到public文件夹，其它文件直接被拷贝进去</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，<code>Hexo</code>会根据主题来生成静态页面</p>
<h3 id="第五步-配置"><a href="#第五步-配置" class="headerlink" title="第五步 配置"></a>第五步 配置</h3><p>内容细节，详见<a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >官方文档 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="第六步-主题选取"><a href="#第六步-主题选取" class="headerlink" title="第六步 主题选取"></a>第六步 主题选取</h3><p>水平够高可以自己写主题，我肯定是做不到的反正</p>
<p><a class="link"   href="https://hexo.io/themes/" >hexo 主题 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>在这里你可以选择你想要的主题，并根据相应主题的说明，应用主题并调整相关配置</p>
<h3 id="第七步-了解实用指令"><a href="#第七步-了解实用指令" class="headerlink" title="第七步 了解实用指令"></a>第七步 了解实用指令</h3><p>当你开始向网站中发布文章时，你会需要知道一些基本指令。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></div>

<p>新建一个布局类型为<code>layout</code>标题为<code>title</code>的文章或页面或草稿</p>
<p>当你没有修改<code>config.yml</code>中的相关信息时，默认为<code>post</code></p>
<p>新建后你可以编辑source&#x2F;_posts文件夹下相应新建的文件来更新文章内容</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure></div>

<p>发表草稿</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></div>

<p>清除缓存和<code>public</code>文件夹中的文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>
<p>简写为<code>hexo g</code><br>生成静态文件</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>预览网站</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>简写为<code>hexo d</code><br>部署网站</p>
<p>执行这个指令可能经常会碰到连接不到仓库的情况，这是正常情况，毕竟中国连github还是太难了…</p>
<p>反复试，直到连上！（我最多刷了几十遍，当然我不懂怎么解决网络不好的问题，虽然会用梯子）</p>
<h3 id="第八步-？？？"><a href="#第八步-？？？" class="headerlink" title="第八步 ？？？"></a>第八步 ？？？</h3><p>不管过程中遇到了什么问题，细心、耐心，解决它~</p>
<p>弄完这些基本网站就大概好啦</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>后期操作熟悉后，发布文章是三步走</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>
<p>指令的简写可以上官网</p>
<h5 id="欢迎指正建议"><a href="#欢迎指正建议" class="headerlink" title="欢迎指正建议~"></a>欢迎指正建议~</h5>]]></content>
      <categories>
        <category>建站</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>静态网站</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code C语言环境配置</title>
    <url>/tengpaz/2023/09/22/VisualStudioCodeC%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="第一步-安装gcc编译器"><a href="#第一步-安装gcc编译器" class="headerlink" title="第一步 安装gcc编译器"></a>第一步 安装gcc编译器</h2><h3 id="已经确认无误完成这一步的朋友可以跳过-检验方法如下"><a href="#已经确认无误完成这一步的朋友可以跳过-检验方法如下" class="headerlink" title="已经确认无误完成这一步的朋友可以跳过 检验方法如下"></a>已经确认无误完成这一步的朋友可以跳过 检验方法如下</h3><p>在windows开始搜索栏里搜索cmd（命令提示符）点开命令提示符</p>
<p>输入以下代码</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc --version</span><br></pre></td></tr></table></figure></div>

<p>如果输出为</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc (Rev6, Built by MSYS2 project) 13.1.0</span><br><span class="line">Copyright (C) 2023 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure></div>

<p>那么你这一步可以跳过了</p>
<p>现在开始教你如何安装gcc编译器</p>
<h3 id="下载MinGW-w64"><a href="#下载MinGW-w64" class="headerlink" title="下载MinGW-w64"></a>下载MinGW-w64</h3><p>在windows系统中想使用gcc编译器，一般需要安装MinGW-w64</p>
<p>搜索MinGW-w64进入<a class="link"   href="https://sourceforge.net/projects/mingw-w64/" >sourceforge网站 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>下载压缩包</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/sourceforge.png"
                      alt="sourceforge网站"
                ></p>
<p>下载完后把压缩包解压到你想放的文件目录下</p>
<p>上面的方式在10.3时试出现了一些疑惑的状况，建议更换为以下方式</p>
<p>点进这个<a class="link"   href="https://github.com/niXman/mingw-builds-binaries/releases" >网址 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>找自己需要的安装包</p>
<ul>
<li><code>i686</code>是32位系统，<code>x86_64</code>为64位系统</li>
<li><code>win32</code>是windows系统使用的标准，<code>posix</code>是其他系统（如Linux、Unix、Mac OS）使用的标准</li>
<li><code>ucrt</code>是微软提供的一个通用C++运行时库，提供了许多与C标准库兼容的函数和一些新的C函数，同时还支持Unicode字符集和安全函数，如strcpy_s、strcat_s、_itoa_s等，支持新的C11和C++11标准，适用于win10及更高的系统；<code>msvcrt</code>是微软提供的一个C++运行库，提供了许多与C标准库兼容的函数，不支持新的C11和C++11标准</li>
<li><code>dwarf</code>只有32位可用，没有永久的运行时间开销，需要整个调用堆栈被启用，所以exception不能被抛出；<code>seh</code>可以用于64位GCC</li>
</ul>
<p>无论放在哪个目录下，请复制或记住里面文件bin的位置</p>
<p>例如C:\msys64\mingw64\x86_64-w64-mingw32\bin</p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>然后在win11中，依次点击开始-设置-（系统）系统信息-（设备规格下面的相关链接）高级系统设置-环境变量（N）…<br>选定系统变量下的Path一行后点击编辑-新建<br>把之前记住的文件位置粘贴或输入进去<br>点击确定-确定-确定</p>
<p>做完这些后你就可以在cmd中检测有没有装好啦，检测方法见文首</p>
<h2 id="第二步-安装Visual-Studio-Code"><a href="#第二步-安装Visual-Studio-Code" class="headerlink" title="第二步 安装Visual Studio Code"></a>第二步 安装Visual Studio Code</h2><h3 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h3><p>搜索Visual Studio Code进入<a href="https://code.visualstudio.com/"><strong>官网</strong></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/VScodewebsite.png"
                      alt="vscode官网"
                ></p>
<p>点击Download for Windows<br>下载完安装包后打开<br>安装到你想要的位置<br>注意安装过程中建议勾选 “将”通过Code打开”操作添加到Windows资源管理器文件&amp;&amp;目录上下文菜单”</p>
<p><strong>如果没有勾选，可以看文尾有解决办法</strong></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://swkfk.top/img/vsc-win-install.png"
                      alt="安装"
                ></p>
<p>安装完后打开vscode</p>
<h2 id="第三步-VScode配置"><a href="#第三步-VScode配置" class="headerlink" title="第三步 VScode配置"></a>第三步 VScode配置</h2><h3 id="安装vscode拓展插件"><a href="#安装vscode拓展插件" class="headerlink" title="安装vscode拓展插件"></a>安装vscode拓展插件</h3><p>打开vscode后，在左侧栏选择</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/vscode%E7%95%8C%E9%9D%A2.jpg"
                      alt="进入vscode后的界面"
                ></p>
<p>下载图上的四个东西以及CMake、CMake Tools、Code Runner，下完后关闭vscode</p>
<h3 id="代码文件夹"><a href="#代码文件夹" class="headerlink" title="代码文件夹"></a>代码文件夹</h3><p>在配置完成前，你要确定你的代码（准确地说是VScode的代码）放在哪里   </p>
<p>在一个没有中文的路径位置上新建一个文件夹，文件夹的名字和位置你最好要记住，否则找起来挺麻烦</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>注意 文件夹的名字也不能有中文！因为c语言是不支持中文的，有中文后期配置会出大问题。</p>

  </div>

<p>如果你之前已经有了一个合格的文件夹，那么你这步也可以跳过</p>
<p>创建好文件夹后，在vscode中打开这个文件夹，此时如果你是第一次打开这个文件夹，页面上会弹出一段警告，选择“是，信任此作者”即可</p>
<h3 id="开始正式配置"><a href="#开始正式配置" class="headerlink" title="开始正式配置"></a>开始正式配置</h3><p>点回拓展，点击C&#x2F;C++插件右下角的齿轮，点击安装另一个版本，选择1.8.4版的，改完版本重新开启一下vscode</p>
<p>之前不是弄了一个文件夹嘛，点击左栏第一个图标，在你的文件夹里新建一个c语言程序，随便写些可执行代码，之后，按运行代码的快捷键（F5）运行，不要用“run code”运行,此时软件上面会弹出一个选择框，选择C++(GDB&#x2F;LLDB)<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BC%B9%E5%87%BA%E6%A1%86.png"
                      alt="第一个弹出框"
                ></p>
<p>然后再选择最上面的”gcc.exe-生成和调试活动文件”<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%BC%B9%E5%87%BA%E6%A1%86.jpg"
                      alt="第二个弹出框"
                ></p>
<p>然后就没什么问题了，你这时再回到文件夹里看会发现新增了一个叫作”.vscode”的文件夹，里面会有”tasks.json”和”launch.json”两个配置文件，之后你可以选择再把之前那个插件改回最新版，但是注意不要删除或修改新生成的那个叫作”launch.json”的配置文件就行</p>
<p>至此，基本就配置好了，对于一些特殊情况请在下面继续看</p>
<h2 id="已经有配置经历并出了问题"><a href="#已经有配置经历并出了问题" class="headerlink" title="已经有配置经历并出了问题"></a>已经有配置经历并出了问题</h2><h3 id="检查代码所在文件夹的路径"><a href="#检查代码所在文件夹的路径" class="headerlink" title="检查代码所在文件夹的路径"></a>检查代码所在文件夹的路径</h3><p>如果你的代码文件夹路径上有中文名，你可能会遇到下面这种情况<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E8%B7%AF%E5%BE%84%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E5%90%8D.png"
                      alt="路径出现中文名"
                ><br>此时只要把文件夹转移到没有中文名的路径上即可再重复之前的操作</p>
<h3 id="检查是否已经有了配置文件"><a href="#检查是否已经有了配置文件" class="headerlink" title="检查是否已经有了配置文件"></a>检查是否已经有了配置文件</h3><p>如果你之前有尝试配置过vscode，可能在你的文件夹里已经有了”launch.json”的配置文件，如果配置依旧有问题，请把这个文件删除，重复之前的操作</p>
<h3 id="运行使用的按键"><a href="#运行使用的按键" class="headerlink" title="运行使用的按键"></a>运行使用的按键</h3><p>如果你点击右上角的三角形，可能它会给你三种运行方式，这里建议直接使用F5运行即可，如果你不需要进行调试，那么选择Run code也毫无问题</p>
<h2 id="第四步-完善其他配置"><a href="#第四步-完善其他配置" class="headerlink" title="第四步 完善其他配置"></a>第四步 完善其他配置</h2><p>这里有一些其他有用的配置</p>
<h3 id="让程序在终端中运行-保存程序"><a href="#让程序在终端中运行-保存程序" class="headerlink" title="让程序在终端中运行&amp;&amp;保存程序"></a>让程序在终端中运行&amp;&amp;保存程序</h3><p>点击左栏最下方的齿轮（管理），点击设置<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E8%AE%BE%E7%BD%AE.png"
                      alt="设置"
                ><br>找到Run Code Configuration那一块<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/runcodeconfiguration.png"
                      alt="Run Code Configuration"
                ><br>向下划，找到这三项并勾选<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E4%B8%89%E9%A1%B9.png"
                      alt="三项"
                ><br>这能让你的程序直接在终端运行，并在你每次运行程序时保存你的程序，避免修改或程序丢失</p>
<h3 id="删除执行程序时生成的-exe文件"><a href="#删除执行程序时生成的-exe文件" class="headerlink" title="删除执行程序时生成的.exe文件"></a>删除执行程序时生成的.exe文件</h3><p>当你的代码一多，满屏的.c和.exe可能会让你目不暇接，这里推荐一个方法，这个教程可以看看一个学长的博客，非常有用<br><a class="link"   href="https://swkfk.top/2023/07/30/VSCode-%E4%B8%AD-C-%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%88for-Windows%EF%BC%89/" >搬运工:) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="安装时没有勾选之前说过的项的后期解决方案"><a href="#安装时没有勾选之前说过的项的后期解决方案" class="headerlink" title="安装时没有勾选之前说过的项的后期解决方案"></a>安装时没有勾选之前说过的项的后期解决方案</h3><p>打开cmd命令提示符，输入<strong>regedit</strong>打开<strong>注册表编辑器</strong></p>
<p>找到<strong>HKEY_CLASSES_ROOT</strong></p>
<h4 id="配置“用VSCode打开文件”"><a href="#配置“用VSCode打开文件”" class="headerlink" title="配置“用VSCode打开文件”"></a>配置“用VSCode打开文件”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>*</strong>-<strong>shell</strong>，右键<strong>shell</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong>（你认得出来其实就可以www）</p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开</strong>（名字可以自定，右键文件出现的菜单反正会有这个名字，你也可以个性化一点设置成奇怪的名字嘿嘿）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步是给菜单的这一项添加图标缩略图，更好看点而已www）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%1”，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%1”</p>

  <div class="note p-4 mb-4 rounded-small warning">
    <p>注意 所有的字符如双引号都应该要是英文字符，输入法为中文时与输入法为英文时字符打出来有些是不一样的，一定要区分</p>

  </div>

<h4 id="配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”"><a href="#配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”" class="headerlink" title="配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”"></a>配置在文件夹空白处右键点击出现的菜单栏的“用VSCode打开文件夹”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>Directory</strong>-<strong>Background</strong>，右键<strong>Background</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong></p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开文件夹</strong>（名字可以自定）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步还是给菜单的这一项添加图标缩略图，更好看点而已www）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%<strong>V</strong>“，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%<strong>V</strong>“</p>
<h4 id="配置“用VSCode打开文件夹”"><a href="#配置“用VSCode打开文件夹”" class="headerlink" title="配置“用VSCode打开文件夹”"></a>配置“用VSCode打开文件夹”</h4><p>找到<strong>HKEY_CLASSES_ROOT</strong>-<strong>Directory</strong>-<strong>shell</strong>，右键<strong>shell</strong>点击<strong>新建</strong>-<strong>项</strong></p>
<p>把项的名字设置为<strong>VScode</strong></p>
<p>修改里面默认文件（字符串）的<strong>数值数据</strong>为<strong>用VSCode打开文件夹</strong>（名字可以自定）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>可扩充字符串值</strong>，名字设置为<strong>Icon</strong>双击它修改它的数值数据为你的VScode应用程序的路径，比如说我的电脑中是<strong>D:\Software\Microsoft VS Code\Code.exe</strong>（这一步还是给菜单的这一项添加图标缩略图）</p>
<p>右击建的项<strong>VSCode</strong>新建<strong>项</strong>，名字设置为<strong>command</strong>，然后修改其中的默认文件的数值数据为”[你的VScode应用程序的路径]””%<strong>V</strong>“，我的电脑中是”D:\Software\Microsoft VS Code\Code.exe””%<strong>V</strong>“</p>
<h3 id="C程序代码板子"><a href="#C程序代码板子" class="headerlink" title="C程序代码板子~"></a>C程序代码板子~</h3><p>如果你不想在每次打C语言代码时反复输入</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那你可以考虑弄个自己的板子</p>
<p>打开vscode在左上角那里找到文件-首选项-配置用户代码片段-c.json</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/tengpaz/images/%E9%85%8D%E7%BD%AE%E7%94%A8%E6%88%B7%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5.png"
                      alt="配置用户代码片段"
                ></p>
<p>在文件里输入你需要的板子</p>
<p>比如这样</p>
<div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;#include&lt;stdio.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;math.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;string.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;stdlib.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;#include&lt;memory.h&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;int main()&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;	$0&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;	return 0;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;藤爬专用C语言模板~&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><code>prefix</code>表示调用这个模板你需要输入的东西<br><code>body</code>就是模板的主体内容啦<br><code>description</code>是对这个模板的描述，以免后期模板过多弄混<br><code>$0</code>表示最后打字光标停留的位置</p>
<p>保存后，在你的C语言文件里输入一个<strong>C</strong>就会跳出选择框，选到<strong>C</strong>后按<strong>Tab</strong>键就可以一键粘贴啦~</p>
<p>如果你还有其它需求比如读取数的二进制中1的个数模板</p>
<p>代码片段可能如下</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and </span><br><span class="line">	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span><br><span class="line">	// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span><br><span class="line">	// same ids are connected.</span><br><span class="line">	// Example:</span><br><span class="line">	// &quot;Print to console&quot;: &#123;</span><br><span class="line">	// 	&quot;prefix&quot;: &quot;log&quot;,</span><br><span class="line">	// 	&quot;body&quot;: [</span><br><span class="line">	// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span><br><span class="line">	// 		&quot;$2&quot;</span><br><span class="line">	// 	],</span><br><span class="line">	// 	&quot;description&quot;: &quot;Log output to console&quot;</span><br><span class="line">	// &#125;</span><br><span class="line">	&quot;basement&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;C&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">			&quot;#include&lt;stdio.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;math.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;string.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;stdlib.h&gt;&quot;,</span><br><span class="line">			&quot;#include&lt;memory.h&gt;&quot;,</span><br><span class="line">			&quot;&quot;,</span><br><span class="line">			&quot;int main()&quot;,</span><br><span class="line">			&quot;&#123;&quot;,</span><br><span class="line">			&quot;	$0&quot;,</span><br><span class="line">			&quot;	return 0;&quot;,</span><br><span class="line">			&quot;&#125;&quot;,</span><br><span class="line">			&quot;&quot;,</span><br><span class="line">		],</span><br><span class="line">		&quot;description&quot;: &quot;藤爬专用C语言模板~&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;popcount&quot;: &#123;</span><br><span class="line">		&quot;prefix&quot;: &quot;popcount&quot;,</span><br><span class="line">		&quot;body&quot;: [</span><br><span class="line">			&quot;$&#123;1:unsigned int&#125; popcount($&#123;1:unsigned int&#125; g)&quot;,</span><br><span class="line">			&quot;&#123;&quot;,</span><br><span class="line">			&quot;	$&#123;1:unsigned int&#125; n = 0;//记录二进制中1的个数&quot;,</span><br><span class="line">			&quot;	for(int i = 0; i &lt;= 31; i++)&quot;,</span><br><span class="line">			&quot;	&#123;&quot;,</span><br><span class="line">			&quot;		n += (g &gt;&gt; i) &amp; 1u;&quot;,</span><br><span class="line">			&quot;	&#125;&quot;,</span><br><span class="line">			&quot;	return n;&quot;,</span><br><span class="line">			&quot;&#125;&quot;,</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>$1表示光标第一次停留的位置，$2以此类推，每次按<strong>Tab</strong>键就可以实现光标的跳转</p>
<p>这段代码里的花括号里给序号1添加了注释，按<strong>Tab</strong>键就默认不修改原注释内容并跳转至下一序号，一般情况下这些备注内容可能需要修改，此时相同序号的内容会被统一修改，非常方便</p>
<h3 id="如果本文有什么问题，欢迎指正"><a href="#如果本文有什么问题，欢迎指正" class="headerlink" title="如果本文有什么问题，欢迎指正\ (^ - ^) &#x2F;"></a>如果本文有什么问题，欢迎指正\ (^ - ^) &#x2F;</h3>]]></content>
      <categories>
        <category>编程</category>
        <category>编译语言</category>
        <category>C语言</category>
        <category>编辑器</category>
        <category>vscode</category>
        <category>开发环境与配置</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>环境配置</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>VisualStudioCode</title>
    <url>/tengpaz/2023/10/07/VisualStudioCode/</url>
    <content><![CDATA[<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>编程工具</category>
      </categories>
      <tags>
        <tag>编程工具</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>python语言基础</title>
    <url>/tengpaz/2023/10/07/python%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>这里所有笔记都是个人整理的，有参考等会列出，有误区会后期改正欢迎指出</p>
<h1 id="语言基础简介"><a href="#语言基础简介" class="headerlink" title="语言基础简介"></a>语言基础简介</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><input disabled="" type="checkbox"> 数据类型<ul>
<li>变量</li>
<li>字符串</li>
<li>数字</li>
<li>注释</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 列表</li>
<li><input disabled="" type="checkbox"> 字典</li>
<li><input disabled="" type="checkbox"> 元组</li>
<li><input disabled="" type="checkbox"> if语句</li>
<li><input disabled="" type="checkbox"> 循环语句</li>
<li><input disabled="" type="checkbox"> 用户输入</li>
<li><input disabled="" type="checkbox"> 函数</li>
<li><input disabled="" type="checkbox"> 类</li>
<li><input disabled="" type="checkbox"> 文件</li>
<li><input disabled="" type="checkbox"> 测试</li>
<li><input disabled="" type="checkbox"> 项目<ul>
<li>网站</li>
<li>爬虫</li>
<li>游戏</li>
<li>数据可视化</li>
<li>excel<br><strong>待更新</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>语言基础</category>
      </categories>
      <tags>
        <tag>语言基础</tag>
        <tag>python</tag>
        <tag>脚本语言</tag>
      </tags>
  </entry>
  <entry>
    <title>win11神奇操作指北</title>
    <url>/tengpaz/2023/11/09/win11%E7%A5%9E%E5%A5%87%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="错误类"><a href="#错误类" class="headerlink" title="错误类"></a>错误类</h1><h2 id="打字么有打字框"><a href="#打字么有打字框" class="headerlink" title="打字么有打字框"></a>打字么有打字框</h2><p>有些人使用（应该是绝大部分人）win11系统的电脑时可能某一时候突然发现，系统输入法打字没有打字框了叻，很神奇是不是</p>
<p>但是咋解决捏</p>
<p>很简单，原理我不是很懂，但是确实可以这样做</p>
<p>打开任务管理器，如果你不会打开的话，右键<strong>开始</strong>的图标选择<strong>任务管理器</strong>即可，然后找到进程中的<strong>explorer.exe</strong>(找的话不方便直接搜索)或者中文名<strong>Windows资源管理器</strong>，右键这东西大胆点击重新启动，等待它重启完成后问题基本就解决了，如果还没解决，可能你得另找办法叻</p>
<h1 id="操作类"><a href="#操作类" class="headerlink" title="操作类"></a>操作类</h1><h2 id="搜索项"><a href="#搜索项" class="headerlink" title="搜索项"></a>搜索项</h2><h3 id="打开注册表编辑器"><a href="#打开注册表编辑器" class="headerlink" title="打开注册表编辑器"></a>打开注册表编辑器</h3><p>开始菜单搜索输入regidit</p>
<h3 id="打开用户账户的管理界面"><a href="#打开用户账户的管理界面" class="headerlink" title="打开用户账户的管理界面"></a>打开用户账户的管理界面</h3><p>开始菜单搜索输入netplwiz</p>
<h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><h3 id="快捷复制历史输入的指令"><a href="#快捷复制历史输入的指令" class="headerlink" title="快捷复制历史输入的指令"></a>快捷复制历史输入的指令</h3><p>按$\uparrow$键</p>
<h3 id="指令补全"><a href="#指令补全" class="headerlink" title="指令补全"></a>指令补全</h3><p>按Tap键</p>
<h3 id="电脑执行策略"><a href="#电脑执行策略" class="headerlink" title="电脑执行策略"></a>电脑执行策略</h3><p><strong>查看当前电脑执行策略</strong></p>
<ul>
<li>所有项：Get-ExecutionPolicy -List或Get-ExecutionPolicy -l</li>
<li>当前默认项：Get-ExecutionPolicy</li>
</ul>
<p><strong>设置当前电脑执行策略</strong><br>Set-ExecutionPolicy -ExecutionPolicy [ExecutionPolicy] -Scope [Scope]</p>
<ul>
<li>-ExecutionPolicy：执行策略类型的参数</li>
<li>-Scope：设置的范围的参数</li>
</ul>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>win11</tag>
      </tags>
  </entry>
  <entry>
    <title>《Python黑帽子-黑客与渗透编程测试之道》问题解答</title>
    <url>/tengpaz/2023/10/21/%E3%80%8APython%E9%BB%91%E5%B8%BD%E5%AD%90-%E9%BB%91%E5%AE%A2%E4%B8%8E%E6%B8%97%E9%80%8F%E7%BC%96%E7%A8%8B%E6%B5%8B%E8%AF%95%E4%B9%8B%E9%81%93%E3%80%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-设置你的Python环境"><a href="#1-设置你的Python环境" class="headerlink" title="1 设置你的Python环境"></a>1 设置你的Python环境</h2><h3 id="安装Kali-Linux虚拟机"><a href="#安装Kali-Linux虚拟机" class="headerlink" title="安装Kali Linux虚拟机"></a>安装Kali Linux虚拟机</h3><h4 id="安装具体过程"><a href="#安装具体过程" class="headerlink" title="安装具体过程"></a>安装具体过程</h4><h5 id="下载虚拟机软件"><a href="#下载虚拟机软件" class="headerlink" title="下载虚拟机软件"></a>下载虚拟机软件</h5><hr>
<p><strong>1.安装什么虚拟机软件</strong></p>
<p>我下载的是<strong>VMware Player</strong>，因为我不清楚其他软件对于Win11的兼容性怎么样，下载这个软件要注意的就是不需要下载<strong>VMware</strong>，这是要付费的，加了<strong>Player</strong>的是不用付费的，注意这个就行</p>
<p>下载连接：<a class="link"   href="https://www.vmware.com/cn/products/workstation-player.html" >VMware Workstation Player <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<hr>
<p><strong>2.如何下载Kali虚拟机镜像</strong></p>
<p>连接：<a class="link"   href="https://www.kali.org/get-kali/#kali-installer-images" >Kali install <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>选择下载<strong>Installer</strong>即可，记住安装位置</p>
<hr>
<p><strong>3.如何把Kali安装到虚拟机软件中</strong></p>
<p>打开虚拟机软件，点<strong>创建新虚拟机</strong></p>
<p>然后选择<strong>稍后安装操作系统</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>客户机操作系统</strong>选择<strong>Linux</strong></p>
<p><strong>版本</strong>选择最新版的<strong>Debian 64位</strong>，本文发布时最新版是<strong>11.x</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>虚拟机名称</strong>取一个你记得住的就行</p>
<p><strong>位置</strong>找你想放的地方就行，建议不要放<strong>C盘</strong></p>
<p>点<strong>下一步</strong></p>
<p><strong>最大磁盘大小</strong>按默认值可以了</p>
<p>勾选<strong>将虚拟磁盘拆分成多个文件</strong></p>
<p>点<strong>下一步</strong></p>
<p>点击<strong>自定义硬件</strong></p>
<p>在<strong>新 CD&#x2F;DVD(IDE)<strong>那一栏里勾选</strong>使用ISO映像文件</strong>，把之前让你记住的位置输入进去</p>
<p>点<strong>关闭</strong></p>
<p>点<strong>完成</strong></p>
<p>打开刚建的虚拟机</p>
<p>后面如果有选择项，选择应用到全部磁盘即可，账号密码请一定记住，一般设置默认都可以</p>
<h4 id="安装完的配置"><a href="#安装完的配置" class="headerlink" title="安装完的配置"></a>安装完的配置</h4><p><strong>1.如何打开shell窗口</strong></p>
<p>进虚拟机后左上角处有一个黑方框的应用图标，点击进入即可</p>
<p><strong>2.更新指令无法正常执行</strong></p>
<p>按照书中的指令输入可能会出现一些情况</p>
<p><strong>如果你输入了某一行指令后窗口出现一个文字框，有一个<code>[OK]</code>的选项你不知道怎么点</strong></p>
<p>点击键盘上的<strong>Tab</strong>键，当<code>[OK]</code>变成光亮时点<strong>Enter</strong>即可</p>
<hr>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>脚本语言</category>
        <category>python</category>
        <category>黑客</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>淑芬</title>
    <url>/tengpaz/2023/11/29/%E6%B7%91%E8%8A%AC/</url>
    <content><![CDATA[<h2 id="淑芬笔记"><a href="#淑芬笔记" class="headerlink" title="淑芬笔记"></a>淑芬笔记</h2><p>详见更新</p>
<h3 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h3><h4 id="6-1-不定积分的概念"><a href="#6-1-不定积分的概念" class="headerlink" title="6.1 不定积分的概念"></a>6.1 不定积分的概念</h4><p><strong>定义6.1.1</strong>若区间I上的函数$f(x)$与$F(x)$满足，$F’(x) &#x3D; f(x)$则称$F(x)$为$f(x)$在区间I上的一个&#x3D;&#x3D;原函数&#x3D;&#x3D;</p>
<p><strong>定义6.1.2</strong>函数$f(x)$在区间I上的全体原函数成为$f(x)$在区间I上的不定积分,记为$\int$$f(x)dx$<br>如果$F(x)$为$f(x)$的一个原函数,则有$\int$$f(x)dx&#x3D;F(x)+C$</p>
<p>$\int$称为不定积分号,$f(x)dx$称为被积表达式,$f(x)$称为被积函数,$x$称为积分变量</p>
<h5 id="6-1-1基本积分公式"><a href="#6-1-1基本积分公式" class="headerlink" title="6.1.1基本积分公式"></a>6.1.1基本积分公式</h5><ol>
<li>$\int$$kdx&#x3D;kx+C$</li>
<li>$\int$$x^udx&#x3D;$$\frac{1}{u+1}$$x^{u+1}$$+C,(u$$\neq$$-1)$</li>
</ol>
<p><strong>待更新</strong></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数分</tag>
      </tags>
  </entry>
  <entry>
    <title>空间解析几何简明教程</title>
    <url>/tengpaz/2023/11/04/%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ol>
<li>向量代数</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 向量</li>
<li><input disabled="" type="checkbox"> 内积</li>
<li><input disabled="" type="checkbox"> 外积</li>
<li><input disabled="" type="checkbox"> 混合积</li>
<li><input disabled="" type="checkbox"> 双重外积</li>
</ul>
<ol start="2">
<li>平面与空间直线</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 平面</li>
<li><input disabled="" type="checkbox"> 空间直线</li>
</ul>
<ol start="3">
<li>曲面曲线</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 曲面</li>
<li><input disabled="" type="checkbox"> 曲线</li>
</ul>
<h1 id="第一章-向量代数"><a href="#第一章-向量代数" class="headerlink" title="第一章 向量代数"></a>第一章 向量代数</h1><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><h3 id="向量的定义"><a href="#向量的定义" class="headerlink" title="向量的定义"></a>向量的定义</h3><p>既有大小又有方向的量，又叫作矢量</p>
<h3 id="标量的定义"><a href="#标量的定义" class="headerlink" title="标量的定义"></a>标量的定义</h3><p>只有大小没有方向的量，又叫作数量</p>
<h3 id="向量的表示"><a href="#向量的表示" class="headerlink" title="向量的表示"></a>向量的表示</h3><p>在欧几里得空间中，向量可用有向线段表示</p>
<h3 id="零向量"><a href="#零向量" class="headerlink" title="零向量"></a>零向量</h3><p>模是0的向量</p>
<h3 id="向量的位置关系"><a href="#向量的位置关系" class="headerlink" title="向量的位置关系"></a>向量的位置关系</h3><h4 id="共线"><a href="#共线" class="headerlink" title="共线"></a>共线</h4><p>平行的两个向量也叫共线向量</p>
<h4 id="共面"><a href="#共面" class="headerlink" title="共面"></a>共面</h4><p>两个向量一定共面</p>
<h3 id="向量的加法"><a href="#向量的加法" class="headerlink" title="向量的加法"></a>向量的加法</h3><h4 id="三角形法则"><a href="#三角形法则" class="headerlink" title="三角形法则"></a>三角形法则</h4><h4 id="平行四边形法则"><a href="#平行四边形法则" class="headerlink" title="平行四边形法则"></a>平行四边形法则</h4><h4 id="律"><a href="#律" class="headerlink" title="律"></a>律</h4><h3 id="向量的数乘"><a href="#向量的数乘" class="headerlink" title="向量的数乘"></a>向量的数乘</h3><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><h4 id="定理1（共线定理）"><a href="#定理1（共线定理）" class="headerlink" title="定理1（共线定理）"></a>定理1（共线定理）</h4><p>设<strong>a</strong>$\neq$<strong>0</strong>，则<strong>b</strong>$\parallel$<strong>a</strong>（共线）$\Leftrightarrow$<strong>b</strong>$&#x3D;k$<strong>a</strong>，且数$k$唯一存在.即设向量<strong>a</strong>$\neq$<strong>0</strong>，则<strong>b</strong>与<strong>a</strong>共线的充要条件是<strong>b</strong>$&#x3D;k$<strong>a</strong>，且实数$k$唯一存在.</p>
<h4 id="推论1"><a href="#推论1" class="headerlink" title="推论1"></a>推论1</h4><p><strong>a</strong>$\parallel$<strong>b</strong>$\Leftrightarrow$<strong>b</strong>$&#x3D;k$<strong>a</strong>或<strong>a</strong>$&#x3D;$$\lambda$<strong>b</strong>.</p>
<h4 id="推论2"><a href="#推论2" class="headerlink" title="推论2"></a>推论2</h4><p><strong>a</strong>$\parallel$<strong>b</strong>$\Leftrightarrow$</p>
]]></content>
      <categories>
        <category>高等代数</category>
        <category>空间解析几何</category>
      </categories>
      <tags>
        <tag>空间解析几何</tag>
      </tags>
  </entry>
</search>
